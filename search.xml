<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript</title>
    <url>/posts/3/</url>
    <content><![CDATA[<h2 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h2><ul>
<li><p>什么是 JavaScript</p>
<ul>
<li>JavaScript 是一门跨平台、面向对象的脚本语言，它能使网页可交互(例如拥有复杂的动画，可点击的按钮，通俗的菜单等)。另外还有高级的服务端 Javascript 版本，例如 Node.js，它可以让你在网页上添加更多功能，不仅仅是下载文件(例如在多台电脑之间的协同合作)。在宿主环境(例如 web 浏览器)中，JavaScript 能够通过其所连接的环境提供的编程接口进行控制。</li>
</ul>
</li>
<li><p>JavaScript 和 Java</p>
<ul>
<li><p>JavaScript 和 Java 有一些共性但是在另一些方面有着根本性区别。JavaScript 语言类似 Java 但是并没有 Java 的静态类型和强类型检查特性。JavaScript 遵循了 Java 的表达式语法，命名规范以及基础流程控制，这也是 JavaScript 从 LiveScript 更名的原因。</p>
</li>
<li><p>与 Java 通过声明的方式构建类的编译时系统不同，JavaScript 采用基于少量的数据类型如数字、布尔、字符串值的运行时系统。JavaScript 拥有基于原型的对象模型提供的动态继承；也就是说，独立对象的继承是可以改变的。JavaScript 支持匿名函数。函数也可以作为对象的属性被当做宽松的类型方式执行。</p>
</li>
<li><p>与 Java 相比，Javascript 是一门形式自由的语言。你不必声明所有的变量，类和方法。你不必关心方法是否是公有、私有或者受保护的，也不需要实现接口。无需显式指定变量、参数、方法返回值的数据类型。</p>
</li>
</ul>
</li>
</ul>
<h2 id="JavaScript-基础-数据类型-x2F-语法"><a href="#JavaScript-基础-数据类型-x2F-语法" class="headerlink" title="JavaScript 基础(数据类型&#x2F;语法)"></a>JavaScript 基础(数据类型&#x2F;语法)</h2><details class="note "><summary><p>red fas fa-bullhorn</p>
</summary>
<p>📖 JavaScript 中的数据类型是想要学习 JavaScript 的重中之重</p>

</details>

<h3 id="JS-中数据类型分基本数据类型和引用数据类型"><a href="#JS-中数据类型分基本数据类型和引用数据类型" class="headerlink" title="JS 中数据类型分基本数据类型和引用数据类型"></a>JS 中数据类型分基本数据类型和引用数据类型</h3><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><a href="#test4-1">基本数据类型</a></li><li class="tab"><a href="#test4-2">引用数据类型</a></li><li class="tab"><a href="#test4-3">区别</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test4-1"><p><strong>基本数据类型</strong></p>
<ul>
<li><p>Number 数字</p>
<ul>
<li>number 类型中有一个特殊的数字 NaN，它代表一个”不是数字”的值。这个特殊的值是因为运算不能执行而导致的，不能执行的原因要么是因为其中的运算对象之一非数字(例如，”abc” &#x2F; 4)，要么是因为运算的结果非数字（例如，除数为零）。</li>
</ul>
</li>
<li><p>String 字符串</p>
<ul>
<li>一般情况下，以引号（’abc’）、双引号（”abc”）、反引号（&#96;&#96;），等形式展示的数据都属于字符串。</li>
</ul>
</li>
<li><p>Boolean 布尔值</p>
<ul>
<li>true 和 false 就是布尔值</li>
</ul>
</li>
<li><p>Null 空</p>
<ul>
<li>它表示此处无值，或等以后了再给赋值</li>
</ul>
</li>
<li><p>undefined 未定义</p>
<ul>
<li>它表示此处应该有值，但是没有赋值</li>
</ul>
</li>
<li><p>bigInt 大数值（ES6 新增）</p>
<ul>
<li>number 数字类型的最大安全值是 2 的 53 次方，再大就会不准确了，es6 先了 bigint 大数值，解决了这个问题</li>
</ul>
</li>
<li><p>symbol 唯一值（ES6 新增）</p>
<ul>
<li>es6 新增的唯一值表示独一无二的值，最大的用法是用来定义对象的唯一属性名。</li>
</ul>
</li>
</ul></div><div class="tab-pane" id="test4-2"><p><strong>引用数据类型</strong></p>
<ul>
<li>function 函数<ul>
<li>例子：</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Object 对象<ul>
<li>例子：</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">key1</span>: <span class="string">&quot;value&quot;</span>, <span class="attr">key2</span>: <span class="string">&quot;value&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Array 数组<ul>
<li>例子：</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test4-3"><p><strong>基本数据类型和引用数据类型的区别</strong></p>
<ul>
<li><p>声明变量时不同的内存分配</p>
<ul>
<li>基本类型值：存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。</li>
<li>引用类型值：存储在堆中的对象，也就是说，存储在变量处的值是一个指针，指向存储对象的内存地址。</li>
</ul>
</li>
<li><p>不同的内存分配机制也带来了不同的访问机制</p>
<ul>
<li>在 javascript 中不允许直接访问保存在堆内存中的对象。</li>
<li>而基本类型的值则是可以直接访问到的。</li>
</ul>
</li>
<li><p>复制变量时的不同</p>
<pre><code>- 基本类型值：将一个变量复制给另一个变量时，此后这两个变量是完全独立的，他们只是拥有相同的 value 而已。
- 引用类型值：将一个变量复制给另一个变量时，会把这个内存地址赋值给新变量，也就是说这两个变量都有一个指向堆内存中同一个对象的指针，他们中任何一个作出的改变都会反映在另一个身上。复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个指针。
</code></pre>
</li>
</ul></div></div></div>

<h4 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h4><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">强制类型转换</a></li><li class="tab"><a href="#-2">隐式类型转换</a></li><li class="tab"><a href="#-3">乱七八糟的转</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><ul>
<li>强制类型转换<ul>
<li>Number() 强制转为数字</li>
<li>String() 强制转换字符串</li>
<li>Boolean() 强制转换布尔值</li>
</ul>
</li>
</ul></div><div class="tab-pane" id="-2"><ul>
<li><p>隐式类型转换</p>
<ul>
<li><p>算术运算符转换都是隐式类型转换</p>
</li>
<li><p>string 转 number</p>
<ul>
<li>“” ——结果”0”</li>
<li>“ “ ——结果”0”</li>
<li>“文字” ——结果”NaN”</li>
<li>“123” ——结果”123”</li>
</ul>
</li>
<li><p>string 转 boolean</p>
<ul>
<li>“” ——结果”false”</li>
<li>“ “ ——结果”true”</li>
<li>“文字” ——结果”true”</li>
<li>“123” ——结果”true”</li>
</ul>
</li>
<li><p>boolean 转 number</p>
<ul>
<li>true ——结果”1”</li>
<li>false ——结果”0”</li>
</ul>
</li>
<li><p>number 转 boolean - 0 ——结果”false” - 123 ——结果“true” - NaN ——结果”false” - -1 ——结果“true” - 0.3 ——结果”true”</p>
</li>
</ul>
</li>
</ul></div><div class="tab-pane" id="-3"><ul>
<li><p>null 转为 number 是 0</p>
</li>
<li><p>undefined 转为 number 是 NaN</p>
</li>
<li><p>null 转换 boolean 是 false</p>
</li>
<li><p>undefined 转换 boolean 是 false</p>
</li>
<li><p>转为 number 结果为 0 都有:</p>
<ul>
<li>0，false，””,null,” “,”0”</li>
</ul>
</li>
<li><p>转换 boolean 为 false 都有： - null，undefined，””,0,NaN</p>
</li>
</ul></div></div></div>

<h3 id="JS-中的一些语法规范"><a href="#JS-中的一些语法规范" class="headerlink" title="JS 中的一些语法规范"></a>JS 中的一些语法规范</h3><ul>
<li><p>严格区分大小写（指令）</p>
</li>
<li><p>每一局结束之后加分号</p>
</li>
<li><p>空格换行忽略不记，是调整格式。</p>
</li>
<li><p>标识符</p>
<ul>
<li><p>在 JS 中可以由我们自己命名的变量名，函数名，属性名。</p>
</li>
<li><p>命名规则</p>
<ul>
<li>标识符必须包含字母，数字 1_，$1</li>
<li>不能以数字开头</li>
<li>标识符不能是 ES 中的关键字和保留字</li>
<li>标识符采用驼峰命名</li>
</ul>
</li>
<li><p>首字母小写，每个单词首字母大写</p>
</li>
<li><p>字面量：给变量的值（&#x3D;右边的值）</p>
</li>
</ul>
</li>
</ul>
<h2 id="JavaScript-常用数组、字符串，对象方法"><a href="#JavaScript-常用数组、字符串，对象方法" class="headerlink" title="JavaScript 常用数组、字符串，对象方法"></a>JavaScript 常用数组、字符串，对象方法</h2><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><a href="#test4-1">会改变原数组</a></li><li class="tab"><a href="#test4-2">不会改变原数组</a></li><li class="tab"><a href="#test4-3">数组的迭代方法</a></li><li class="tab"><a href="#test4-4">reduce详解</a></li><li class="tab"><a href="#test4-5">forEach详解</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test4-1"><p><strong>会改变原数组</strong></p>
<ul>
<li><strong>push</strong><ul>
<li>参数：向数组末尾添加的元素</li>
<li>用途：向数组的末尾增加一个元素或多个元素，并返回新的长度</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="number">3</span>)); <span class="comment">//返回新的数组长度 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[0,1,2,3]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>pop</strong><ul>
<li>参数：无参数</li>
<li>用途：删除并返回数组的最后一个元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>()); <span class="comment">//删除并返回数组最后一个元素 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[0,1]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>shift</strong><ul>
<li>参数：无参数</li>
<li>用途：删除并返回数组的第一个元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>()); <span class="comment">//删除并返回数组第一个元素 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>unshift</strong><ul>
<li>参数：要向数组开头增加的元素</li>
<li>用途：向数组的开头增加一个或多个元素，并返回新的长度</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">unshift</span>(-<span class="number">2</span>, -<span class="number">1</span>)); <span class="comment">//返回新的数组长度 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[-2, -1, 0, 1, 2]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>reverse</strong><ul>
<li>参数：无参数</li>
<li>用途：将数组的数据进行反转，并且返回反转后的数组，会改变原数组</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>();); <span class="comment">//    [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;, 3, 2, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//    [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>sort</strong><ul>
<li>参数：可以是一个函数，也可以不穿参数</li>
<li>用途：对数组排序</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接使用</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的形式使用</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">ll</span>: <span class="string">&quot;www&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">ll</span>: <span class="string">&quot;eee&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">ll</span>: <span class="string">&quot;rrr&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> a = arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// return a.id-b.id //根据id正序</span></span><br><span class="line">  <span class="keyword">return</span> b.<span class="property">id</span> - a.<span class="property">id</span>; <span class="comment">//根据id倒序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//根据id排序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//改变了原数组</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>splice</strong><ul>
<li>参数：<ul>
<li>参数 1：从第几个索引开始截取</li>
<li>参数 2：截取到第几位</li>
<li>参数 3：替换的元素</li>
</ul>
</li>
<li>功能：删，增，替换数组元素，返回被删除数组，无删除则不返回</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="comment">// let a = arr.splice(1) // [&quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="comment">// let a = arr.splice((1,2)) // [&quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="keyword">let</span> a = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;f&quot;</span>); <span class="comment">// [&quot;a&quot;, &quot;f&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 返回被删除的元素数组[&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 在添加的地方添加元素后的数组[&quot;a&quot;, &quot;f&quot;, &quot;d&quot;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>copyWithin</strong><ul>
<li>参数：要复制的元素跟位置</li>
<li>功能：方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = arr.<span class="title function_">copyWithin</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//返回被复制的元素数组 [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//原元素数组已经改变 [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>fill</strong><ul>
<li>参数：<ul>
<li>参数 1：要填充的元素</li>
<li>参数 2：填充那个元素</li>
<li>参数 3：填充几位</li>
</ul>
</li>
<li>功能:用一个元素填充原来的数组</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = arr.<span class="title function_">fill</span>(<span class="string">&quot;e&quot;</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 返回它会改变调用它的 `this` 对象本身, 然后返回它[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;, &#x27;e&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>map</strong><ul>
<li>参数：一个函数</li>
<li>注释：只有当 arr 为基本数据类型时，map 方法才不会改变原始数组，arr 为引用类型时，还是会改变原数组的</li>
<li>功能：遍历数组中的元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> citys = [&#123; <span class="attr">name</span>: <span class="string">&quot;shenzhen&quot;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;hanghzhou&quot;</span> &#125;];</span><br><span class="line">citys.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  <span class="comment">// &#123;name: &quot;shenzhen&quot;&#125;</span></span><br><span class="line">  <span class="comment">// &#123;name: &quot;hanghzhou&quot;&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test4-2"><p><strong>不改变原数组的</strong></p>
<ul>
<li><strong>concat</strong><ul>
<li>参数：要拼接的数组</li>
<li>功能：将两个数组拼接为一个数组</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.<span class="title function_">concat</span>([<span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 新数组 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] 不变</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>join</strong><ul>
<li>参数：放置的分隔符</li>
<li>功能：将数组中所有元素以参数作为分隔符放入一个字符</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 字符串 a-b-c-d</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] 不变</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>slice</strong><ul>
<li>参数：<ul>
<li>参数 1：截取字符串的索引位置</li>
<li>参数 2：要截取到哪</li>
</ul>
</li>
<li>功能：截取数组中的元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [&#123; <span class="attr">name</span>: <span class="string">&quot;shenzhen&quot;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;hanghzhou&quot;</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> a = arr1.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [&#123; name: &#x27;hanghzhou&#x27; &#125;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [&#123; name: &#x27;shenzhen&#x27; &#125;, &#123; name: &#x27;hanghzhou&#x27; &#125;] 不变</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test4-3"><p><strong>八个迭代方法</strong></p>
<ul>
<li><strong>every</strong><ul>
<li>参数：一个函数</li>
<li>功能：如果全部符合条件那么就返回 true，如果一个不对就返回 false</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">every</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// return item.id === 1 // false</span></span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">id</span> === item.<span class="property">id</span>; <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>some</strong><ul>
<li>参数：一个函数</li>
<li>功能：如果数组中有一向符合条件的就返回 true</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// return item.id === 1 // true</span></span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">id</span> === item.<span class="property">id</span>; <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>map</strong><ul>
<li>参数：一个函数</li>
<li>注释：只有当 arr 为基本数据类型时，map 方法才不会改变原始数组，arr 为引用类型时，还是会改变原数组的</li>
<li>功能：遍历数组中的元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> citys = [&#123; <span class="attr">name</span>: <span class="string">&quot;shenzhen&quot;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;hanghzhou&quot;</span> &#125;];</span><br><span class="line">citys.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  <span class="comment">// &#123;name: &quot;shenzhen&quot;&#125;</span></span><br><span class="line">  <span class="comment">// &#123;name: &quot;hanghzhou&quot;&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>filter</strong><ul>
<li>参数：一个函数</li>
<li>功能：过滤出符合条件的元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">age</span> === <span class="number">30</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [&#123;id:1,name:&#x27;张三&#x27;,age:30&#125;, &#123;id:3,name:&#x27;王五&#x27;,age:30&#125;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>findIndex</strong><ul>
<li>参数：一个函数</li>
<li>功能：返回第一个符合条件的元素的索引</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">age</span> === <span class="number">30</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>find</strong><ul>
<li>参数：一个函数</li>
<li>功能：找到第一个符合条件的元素，并返回这个元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">age</span> === <span class="number">30</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// &#123;id: 1, name: &quot;张三&quot;, age: 30&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>reduce 和 map</strong></li>
<li>见详解</li>
</ul></div><div class="tab-pane" id="test4-4"><p><strong>reduce 方法</strong></p>
<p>下面是 api 的使用和每个参数代表的含义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index, arr</span>) =&gt;</span> &#123;&#125;, init);</span><br></pre></td></tr></table></figure>

<ul>
<li>arr: 表示将要原数组</li>
<li>prev:表示上一次调用回调时的返回值，或者初始值 init</li>
<li>cur:表示当前正在处理的数组元素</li>
<li>index:表示正在处理的数组元素的索引，若提供 init 值，则索引为 0，否则索引为 1</li>
<li>init: 表示初始值</li>
</ul>
<p><strong>案例</strong></p>
<p><strong>数组求和</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>

<p>数组求和方法是这个 reduce 方法最常见的使用案例了，但是很多人只知道返回 pre + cur 就能返回总和，如果我稍微把这个方法下面这样呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>

<p>大家觉得结果还是一样的吗 答案显然是否定的，下面我给大家解释解释：</p>
<ul>
<li>首先我们要明确的时候，pre 表示的是上一次回调时的返回值，或者是初始值 init。</li>
<li>在我们第一次调用的时候，第一个案例是没有设置 init 的值，在没有设置 init 值的情况下，index 的索引值是从 1，其实是第一次的时候就隐式调用了 pre+cur，你可以理解为是在背后做了 pre 是 0+cur:1。我们在控制台看到的就是整个计算过程是 index 是 1-6。</li>
<li>在第二个案例中，init 设置的值是 2，那么就是代表 pre 的初始值就是 2，那么第一次的时候，index 是从 0 开始的,第一次调用返回的就是<code>2+arr[1]</code>=3,整个过程 index 执行是从 0-6，共 7 次</li>
</ul>
<p><strong>计算数组中每个元素出现的次数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = [<span class="string">&quot;李白&quot;</span>, <span class="string">&quot;雅典娜&quot;</span>, <span class="string">&quot;安琪拉&quot;</span>, <span class="string">&quot;李白&quot;</span>, <span class="string">&quot;诸葛亮&quot;</span>, <span class="string">&quot;安琪拉&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> nameObj = person.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (cur <span class="keyword">in</span> pre) &#123;</span><br><span class="line">    pre[cur]++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pre[cur] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameObj); <span class="comment">// &#123;李白: 2, 雅典娜: 1, 安琪拉: 2, 诸葛亮: 1&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>数组扁平化</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]], <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">newArr</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">newArr</span>(cur) : cur);</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">newArr</span>(arr2)); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<p>这个方法是使用了递归的方法结合 reduce 实现的。当然实现数组扁平化的方式不止这一种，另外的几种方式可一查看我的另外一篇博文<a href="https://juejin.cn/post/6971058700433752101" title="https://juejin.cn/post/6971058700433752101">数组扁平化的方式</a></p>
<p><strong>数组去重</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">const</span> resultArr = arr3.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!pre.<span class="title function_">includes</span>(cur)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pre.<span class="title function_">concat</span>(cur);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultArr);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test4-5"><p><strong>forEach 方法详解</strong></p>
<p>本文会从以下几个角度来对 forEach 进行解释：</p>
<ul>
<li>forEach 方法的介绍</li>
<li>forEach 方法的特别之处</li>
<li>如何跳出 forEach 循环</li>
<li>forEach 与 for 循环的区别</li>
</ul>
<p><strong>forEach 方法的介绍</strong></p>
<p>forEach 首次提出于 ES3，并且在 ES5 中进行了完善。</p>
<p>forEach() 方法会对数组的每个元素都调用一次给定的 callbackFn 函数。</p>
<p><strong>forEach 的参数与返回值</strong></p>
<p>forEach 的参数有：</p>
<ul>
<li>callbackFn<ul>
<li>element</li>
<li>index</li>
<li>array</li>
</ul>
</li>
<li>thisArg</li>
</ul>
<p>forEach 返回值为 undefined（无返回值）。</p>
<p><strong>callbackFn 必选参数</strong></p>
<p><strong>callbackFn</strong> 是一个必选参数，表示数组中每个元素所调用的函数。</p>
<p>函数调用时带有以下参数：</p>
<ol>
<li>element -&gt; 数组中正在处理的当前元素。</li>
<li>index -&gt; 数组中正在处理的当前元素的索引。</li>
<li>array -&gt; forEach() 方法正在操作的数组。</li>
</ol>
<p><strong>thisArg 可选参数</strong></p>
<p>我们使用 forEach 方法很少使用该参数，大家了解下即可：</p>
<ul>
<li><p>thisArg 是一个可选参数，表示每次调用 callbackFn 函数时，this 的指向。</p>
<ul>
<li>如果省略了 thisArg 参数，或者其值为 null 或 undefined，this 则指向全局对象。</li>
<li>使用该参数时，不要使用箭头函数，因为只有函数表达式声明的函数才有自己的 this 绑定</li>
</ul>
</li>
</ul>
<p>thisArg 使用示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//thisArg使用场景</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    array.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">countEntry</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sum</span> += entry; <span class="comment">//元素值的总和</span></span><br><span class="line">      ++<span class="variable language_">this</span>.<span class="property">count</span>; <span class="comment">//元素个数</span></span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">obj.<span class="title function_">add</span>([<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">count</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sum</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>

<p><strong>1.1.3 forEach 的返回值</strong></p>
<p>forEach 必返回 undefined（无返回值）</p>
<p><strong>调用 forEach 方法的语法格式</strong></p>
<p>forEach 方法语法格式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(callbackFn);</span><br><span class="line">arr.<span class="title function_">forEach</span>(callbackFn, thisArg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联回调函数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">element</span>) &#123;&#125;);</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">element, index</span>) &#123;&#125;);</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">element, index, array</span>) &#123;&#125;);</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">element, index, array</span>) &#123;&#125;, thisArg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="comment">//使用箭头函数表达式来传入函数参数时， thisArg 参数会被忽略。</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="comment">//arr.forEach((element, index, array) =&gt; &#123;&#125;,thisArg)</span></span><br><span class="line"><span class="comment">//此方法无法使用，因为箭头函数在词法上绑定了 this 值，函数里面没有this，而是使用了外层函数的this。</span></span><br></pre></td></tr></table></figure>

<p>forEach 循环进行扁平化数组操作，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装扁平化数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">flatten</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(...<span class="title function_">flatten</span>(item));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> nested = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>], <span class="number">8</span>, <span class="number">9</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(nested)); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>

<p><strong>forEach 的特别之处</strong></p>
<ol>
<li><p>forEach() 遍历的范围在第一次调用 callbackFn 前就会确定，而且不会修改原数组。</p>
</li>
<li><p>另外 forEach() 不会在迭代之前创建数组的副本，所以：</p>
<ul>
<li>如果调用了 forEach 之后，再添加到数组中的元素不会被 callbackFn 访问到。</li>
<li>如果迭代过程中改变了 itemN 的值或删除了 itemN 时：<ul>
<li>itemN 被删除或未初始化(是空位)时，itemN 将不会被遍历，而会被跳过。</li>
<li>itemN 被修改时，传递给 callbackFn 的值是 forEach() 遍历到 itemN 那一刻的值。</li>
<li>如果使用 shift、pop 等方法改变了数组中的结构，会对遍历结果有相应的影响，影响效果见下方代码。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>数组的空位(empty item)的详解可参见<a href="https://link.juejin.cn/?target=https://es6.ruanyifeng.com/%23docs/array%23%25E6%2595%25B0%25E7%25BB%2584%25E7%259A%2584%25E7%25A9%25BA%25E4%25BD%258D" title="https://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E7%9A%84%E7%A9%BA%E4%BD%8D">阮一峰老师的 es6 入门</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在迭代时 使用shift方法删除了数组的头元素</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">shift</span>(); <span class="comment">//1 将从数组中删除</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;); <span class="comment">// 1 // 2 // 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在迭代时 使用pop方法删除了数组的尾元素</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">pop</span>(); <span class="comment">//1 将从数组中删除</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;); <span class="comment">// 1 // 2 // 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>

<p><strong>如何跳出 forEach 循环</strong></p>
<p>这是一道非常经典的面试题，考验了我们 js 的基础。</p>
<p>如果在 forEach 循环中想使用<code>continue; break; return;</code>这三个关键字来跳出循环时：</p>
<ul>
<li>continue 报错： <code>SyntaxError: Illegal continue statement: no surrounding iteration statement</code></li>
<li>break 报错： <code>SyntaxError: Illegal break statement</code></li>
<li>return： 只能跳过一次循环，可认为相当于 for 循环中的 continue 关键字;</li>
</ul>
<p><strong>try catch + throw 方法</strong></p>
<p>这是我们平时开发所使用的方式，该方法的算法效率为：O(n)，性能较好。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//try catch + throw 方法</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`值为<span class="subst">$&#123;item&#125;</span>时跳出forEac循环`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">//只打印 1</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">//Error: 值为2时跳出forEac循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p><strong>splice + return 方法</strong></p>
<p>受<code>2. forEach 的特别之处</code>的内容启发，所以我想到了该方法。</p>
<p>该方法的算法效率为：O(n²)，性能较差。</p>
<p>至于两种方法的性能对比，可参考我的这篇博客<a href="https://juejin.cn/post/7145092614415613988" title="https://juejin.cn/post/7145092614415613988">JavaScript 中的 try catch 语句的性能分析</a>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//splice + return 方法</span></span><br><span class="line"><span class="comment">//在迭代时 使用splice方法 删除数组中的元素</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> spliceArr = <span class="literal">null</span>;</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</span><br><span class="line">    spliceArr = arr.<span class="title function_">splice</span>(index); <span class="comment">// 将 2 以后的元素全部删除 并赋值给spliceArr</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br><span class="line">arr.<span class="title function_">splice</span>(arr.<span class="property">length</span>, spliceArr.<span class="property">length</span>, ...spliceArr); <span class="comment">//将删除的元素拼接回去</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p><strong>forEach 与 for 循环的区别</strong></p>
<p>这也是一道经典的面试题，大家可以去看看这个视频<a href="https://link.juejin.cn/?target=https://www.bilibili.com/video/BV18Z4y1o7BB" title="https://www.bilibili.com/video/BV18Z4y1o7BB">面试官问：有了 for 循环为什么还要 forEach？</a>。</p>
<p>下面我将从本质，语法，性能三方面来进行讲解。</p>
<p><strong>本质区别</strong></p>
<ul>
<li>for 循环是 js 刚提出时就有的循环方法，本质上就是一种基本语法。</li>
<li>forEach 是在 ES3 所提出，并在 ES5 中进行了功能完善，它是挂载在可迭代对象（Array Set Map 等）原型上的方法。<ul>
<li>forEach 本质上是一个迭代器，负责遍历可迭代对象。</li>
</ul>
</li>
</ul>
<p>迭代器是 ES6 新增的一种特殊对象，它的标志是返回对象的 next()方法，迭代行为判断在 done 之中，能在不暴露内部表示的情况下，迭代器实现了遍历。 由于迭代器这块知识我尚未深入了解，所以暂时就不过多解释。</p>
<p><strong>语法区别</strong></p>
<ol>
<li><p>参数的区别</p>
<ul>
<li><code>arr.forEach(function (element, index, array) {}, thisArg)</code></li>
<li><code>for (initialization; expression; post-loop-expression) statement</code></li>
</ul>
</li>
<li><p>中断方式的区别</p>
<ul>
<li>for 循环可通过<code>continue; break; return;</code>这三个关键字来跳出循环</li>
<li>forEach 循环只能借助 try catch + throw 方法来跳出循环</li>
</ul>
</li>
<li><p>在 forEach 对 element 进行的操作原则上不会修改原数组，除非直接使用 index 下标操作原数组。</p>
</li>
<li><p>forEach 循环只能下标为 0 开始，不能进行认为干预，而 for 循环不同。</p>
</li>
</ol>
<p><strong>性能区别</strong></p>
<ul>
<li>性能比较: for &gt; forEach &gt; map</li>
</ul>
<p>在 chrome 62 和 Node.js v91.0 环境下：for 循环比 forEach 快 1 倍，forEach 比 map 快 20%左右。</p>
<ul>
<li><p>原因分析：</p>
<ul>
<li>因为 for 循环时没有涉及到<strong>函数调用栈</strong>和<strong>执行上下文</strong>，所以它的性能最好。</li>
<li>而 forEach 循环中执行了回调函数，会创建了对应的<strong>函数执行上下文</strong>，并会进行<strong>函数调用栈</strong>的<strong>入栈</strong>与<strong>出栈</strong>操作，还会涉及到<strong>垃圾回收机制</strong>，所以性能会低于 for 循环。</li>
<li>而 map 循环最慢的原因是因为 map 会返回一个新的数组，数组的创建和赋值会进行<strong>内存空间</strong>的分配操作，因此也会带来额外的性能损失。</li>
</ul>
</li>
<li><p>但抛开应用场景谈性能等于“耍流氓”，所以大家一定要结合实际应用场景来选择一种合适的方法。</p>
</li>
</ul></div></div></div>

<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d56c8218f0154011855b78607c7bd3e8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="JS字符串方法.png"></p>
<p><strong>获取字符串长度</strong></p>
<p>JavaScript 中的字符串有一个 length 属性，该属性可以用来获取字符串的长度：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.<span class="property">length</span>; <span class="comment">// 输出结果：5</span></span><br></pre></td></tr></table></figure>

<p><strong>获取字符串指定位置的值</strong></p>
<p>charAt()和 charCodeAt()方法都可以通过索引来获取指定位置的值：</p>
<ul>
<li>charAt() 方法获取到的是指定位置的字符；</li>
<li>charCodeAt()方法获取的是指定位置字符的 Unicode 值。</li>
</ul>
<p><strong>（1）charAt()</strong></p>
<p>charAt() 方法可以返回指定位置的字符。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">charAt</span>(index);</span><br></pre></td></tr></table></figure>

<p>index 表示字符在字符串中的索引值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.<span class="title function_">charAt</span>(<span class="number">1</span>); <span class="comment">// 输出结果：e</span></span><br></pre></td></tr></table></figure>

<p>我们知道，字符串也可以通过索引值来直接获取对应字符，那它和 charAt()有什么区别呢？来看例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.<span class="title function_">charAt</span>(<span class="number">1</span>); <span class="comment">// 输出结果：e</span></span><br><span class="line">str[<span class="number">1</span>]; <span class="comment">// 输出结果：e</span></span><br><span class="line">str.<span class="title function_">charAt</span>(<span class="number">5</span>); <span class="comment">// 输出结果：&#x27;&#x27;</span></span><br><span class="line">str[<span class="number">5</span>]; <span class="comment">// 输出结果：undefined</span></span><br></pre></td></tr></table></figure>

<p>可以看到，当 index 的取值不在 str 的长度范围内时，str[index]会返回 undefined，而 charAt(index)会返回空字符串；除此之外，str[index]不兼容 ie6-ie8，charAt(index)可以兼容。</p>
<p><strong>（2）charCodeAt()</strong></p>
<p><code>charCodeAt()</code>：该方法会返回指定索引位置字符的 Unicode 值，返回值是 0 - 65535 之间的整数，表示给定索引处的 UTF-16 代码单元，如果指定位置没有字符，将返回 <strong>NaN</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">1</span>)); <span class="comment">// &quot;b&quot; --&gt; 98</span></span><br></pre></td></tr></table></figure>

<p>通过这个方法，可以获取字符串中指定 Unicode 编码值范围的字符。比如，数字 0 ～ 9 的 Unicode 编码范围是: 48 ～ 57，可以通过这个方法来筛选字符串中的数字，当然如果你更熟悉正则表达式，会更方便。</p>
<h4 id="3-检索字符串是否包含特定序列"><a href="#3-检索字符串是否包含特定序列" class="headerlink" title="3. 检索字符串是否包含特定序列"></a>3. 检索字符串是否包含特定序列</h4><p>这 5 个方法都可以用来检索一个字符串中是否包含特定的序列。其中前两个方法得到的指定元素的索引值，并且只会返回第一次匹配到的值的位置。后三个方法返回的是布尔值，表示是否匹配到指定的值。</p>
<p>注意：这 5 个方法都对大小写敏感！</p>
<p><strong>（1）indexOf()</strong></p>
<p><code>indexOf()</code>：查找某个字符，<strong>有则返回第一次匹配到的位置</strong>，否则返回-1，其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">indexOf</span>(searchvalue, fromindex);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>searchvalue：必需，规定需检索的字符串值；</li>
<li>fromindex：可选的整数参数，规定在字符串中开始检索的位置。它的合法取值是 0 到 string.length - 1。如省略该，则从字符串的首字符开始检索。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefgabc&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// 输出结果：0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;z&quot;</span>)); <span class="comment">// 输出结果：-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;c&quot;</span>, <span class="number">4</span>)); <span class="comment">// 输出结果：9</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）lastIndexOf()</strong></p>
<p><code>lastIndexOf()</code>：查找某个字符，有则返回最后一次匹配到的位置，否则返回-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcabc&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// 输出结果：3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;z&quot;</span>)); <span class="comment">// 输出结果：-1</span></span><br></pre></td></tr></table></figure>

<p>该方法和 indexOf()类似，只是查找的顺序不一样，indexOf()是正序查找，lastIndexOf()是逆序查找。</p>
<p><strong>（3）includes()</strong></p>
<p><code>includes()</code>：该方法用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 true，否则返回 false。该方法的语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">includes</span>(searchvalue, start);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>searchvalue：必需，要查找的字符串；</li>
<li>start：可选，设置从那个位置开始查找，默认为 0。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;o&quot;</span>); <span class="comment">// 输出结果：true</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;z&quot;</span>); <span class="comment">// 输出结果：false</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;e&quot;</span>, <span class="number">2</span>); <span class="comment">// 输出结果：false</span></span><br></pre></td></tr></table></figure>

<p><strong>（4）startsWith()</strong></p>
<p><code>startsWith()</code>：该方法用于检测字符串<strong>是否以指定的子字符串开始</strong>。如果是以指定的子字符串开头返回 true，否则 false。其语法和上面的 includes()方法一样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 输出结果：true</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;Helle&quot;</span>); <span class="comment">// 输出结果：false</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;wo&quot;</span>, <span class="number">6</span>); <span class="comment">// 输出结果：true</span></span><br></pre></td></tr></table></figure>

<p><strong>（5）endsWith()</strong></p>
<p><code>endsWith()</code>：该方法用来判断当前字符串<strong>是否是以指定的子字符串结尾</strong>。如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">endsWith</span>(searchvalue, length);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>searchvalue：必需，要搜索的子字符串；</li>
<li>length： 设置字符串的长度，默认值为原始字符串长度 string.length。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;!&quot;</span>); <span class="comment">// 输出结果：true</span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;llo&quot;</span>); <span class="comment">// 输出结果：false</span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;llo&quot;</span>, <span class="number">5</span>); <span class="comment">// 输出结果：true</span></span><br></pre></td></tr></table></figure>

<p>可以看到，当第二个参数设置为 5 时，就会从字符串的前 5 个字符中进行检索，所以会返回 true。</p>
<h4 id="4-连接多个字符串"><a href="#4-连接多个字符串" class="headerlink" title="4. 连接多个字符串"></a>4. 连接多个字符串</h4><p>concat() 方法用于连接两个或多个字符串。该方法不会改变原有字符串，会返回连接两个或多个字符串的新字符串。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">concat</span>(string1, string2, ..., stringX)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中参数 string1, string2, …, stringX 是必须的，他们将被连接为一个字符串的一个或多个字符串对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&quot;efg&quot;</span>)); <span class="comment">//输出结果：&quot;abcefg&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&quot;efg&quot;</span>, <span class="string">&quot;hijk&quot;</span>)); <span class="comment">//输出结果：&quot;abcefghijk&quot;</span></span><br></pre></td></tr></table></figure>

<p>虽然 concat()方法是专门用来拼接字符串的，但是在开发中使用最多的还是加操作符+，因为其更加简单。</p>
<h4 id="5-字符串分割成数组"><a href="#5-字符串分割成数组" class="headerlink" title="5. 字符串分割成数组"></a>5. 字符串分割成数组</h4><p>split() 方法用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">split</span>(separator, limit);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>separator：必需。字符串或正则表达式，从该参数指定的地方分割 string。</li>
<li>limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;c&quot;</span>); <span class="comment">// 输出结果：[&quot;ab&quot;, &quot;def&quot;]</span></span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>, <span class="number">4</span>); <span class="comment">// 输出结果：[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>如果把空字符串用作 separator，那么字符串中的每个字符之间都会被分割。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 输出结果：[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br></pre></td></tr></table></figure>

<p>其实在将字符串分割成数组时，可以同时拆分多个分割符，使用正则表达式即可实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="string">&quot;apples,bananas;cherries&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> fruits = list.<span class="title function_">split</span>(<span class="regexp">/[,;]/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 输出结果：[&quot;apples&quot;, &quot;bananas&quot;, &quot;cherries&quot;]</span></span><br></pre></td></tr></table></figure>

<h4 id="6-截取字符串"><a href="#6-截取字符串" class="headerlink" title="6. 截取字符串"></a>6. 截取字符串</h4><p>substr()、substring()和 slice() 方法都可以用来截取字符串。</p>
<p><strong>（1） slice()</strong></p>
<p>slice() 方法用于提取字符串的某个部分，并以新的字符串返回被提取的部分。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">slice</span>(start, end);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>start：必须。 要截取的片断的起始下标，第一个字符位置为 0。如果为负数，则从尾部开始截取。</li>
<li>end：可选。 要截取的片段结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</li>
</ul>
<p>上面说了，如果 start 是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">str.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">6</span>); <span class="comment">// 输出结果：&quot;bcdef&quot;</span></span><br><span class="line">str.<span class="title function_">slice</span>(<span class="number">1</span>); <span class="comment">// 输出结果：&quot;bcdefg&quot;</span></span><br><span class="line">str.<span class="title function_">slice</span>(); <span class="comment">// 输出结果：&quot;abcdefg&quot;</span></span><br><span class="line">str.<span class="title function_">slice</span>(-<span class="number">2</span>); <span class="comment">// 输出结果：&quot;fg&quot;</span></span><br><span class="line">str.<span class="title function_">slice</span>(<span class="number">6</span>, <span class="number">1</span>); <span class="comment">// 输出结果：&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，该方法返回的子串<strong>包括开始处的字符</strong>，但<strong>不包括结束处的字符</strong>。</p>
<p><strong>（2） substr()</strong></p>
<p>substr() 方法用于在字符串中抽取从开始下标开始的指定数目的字符。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">substr</span>(start, length);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>start 必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</li>
<li>length：可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">str.<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">6</span>); <span class="comment">// 输出结果：&quot;bcdefg&quot;</span></span><br><span class="line">str.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">// 输出结果：&quot;bcdefg&quot; 相当于截取[1,str.length-1]</span></span><br><span class="line">str.<span class="title function_">substr</span>(); <span class="comment">// 输出结果：&quot;abcdefg&quot; 相当于截取[0,str.length-1]</span></span><br><span class="line">str.<span class="title function_">substr</span>(-<span class="number">1</span>); <span class="comment">// 输出结果：&quot;g&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（3） substring()</strong></p>
<p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">substring</span>(<span class="keyword">from</span>, to);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>from：必需。一个非负的整数，规定要提取的子串的第一个字符在 string 中的位置。</li>
<li>to：可选。一个非负的整数，比要提取的子串的最后一个字符在 string 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。</li>
</ul>
<p><strong>注意：</strong> 如果参数 from 和 to 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 from 比 to 大，那么该方法在提取子串之前会先交换这两个参数。并且该方法不接受负的参数，如果参数是个负数，就会返回这个字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">6</span>); <span class="comment">// 输出结果：&quot;bcdef&quot; [1,6)</span></span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">1</span>); <span class="comment">// 输出结果：&quot;bcdefg&quot; [1,str.length-1]</span></span><br><span class="line">str.<span class="title function_">substring</span>(); <span class="comment">// 输出结果：&quot;abcdefg&quot; [0,str.length-1]</span></span><br><span class="line">str.<span class="title function_">substring</span>(<span class="number">6</span>, <span class="number">1</span>); <span class="comment">// 输出结果 &quot;bcdef&quot; [1,6)</span></span><br><span class="line">str.<span class="title function_">substring</span>(-<span class="number">1</span>); <span class="comment">// 输出结果：&quot;abcdefg&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，该方法返回的子串<strong>包括开始处的字符</strong>，但<strong>不包括结束处的字符</strong>。</p>
<h4 id="7-字符串大小写转换"><a href="#7-字符串大小写转换" class="headerlink" title="7. 字符串大小写转换"></a>7. 字符串大小写转换</h4><p>toLowerCase() 和 toUpperCase()方法可以用于字符串的大小写转换。</p>
<p><strong>（1）toLowerCase()</strong></p>
<p><code>toLowerCase()</code>：该方法用于把字符串转换为小写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;adABDndj&quot;</span>;</span><br><span class="line">str.<span class="title function_">toLowerCase</span>(); <span class="comment">// 输出结果：&quot;adabdndj&quot;</span></span><br></pre></td></tr></table></figure>

<p>**（2）toUpperCase()</p>
<p><code>toUpperCase()</code>：该方法用于把字符串转换为大写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;adABDndj&quot;</span>;</span><br><span class="line">str.<span class="title function_">toUpperCase</span>(); <span class="comment">// 输出结果：&quot;ADABDNDJ&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们可以用这个方法来将字符串中第一个字母变成大写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">word = word[<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + word.<span class="title function_">substr</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word); <span class="comment">// 输出结果：&quot;Apple&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-字符串模式匹配"><a href="#8-字符串模式匹配" class="headerlink" title="8. 字符串模式匹配"></a>8. 字符串模式匹配</h4><p>replace()、match()和 search()方法可以用来匹配或者替换字符。</p>
<p><strong>（1）replace()**</strong></p>
<p><code>replace()</code>：该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">replace</span>(searchvalue, newvalue);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>searchvalue：必需。规定子字符串或要替换的模式的 RegExp 对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</li>
<li>newvalue：必需。一个字符串值。规定了替换文本或生成替换文本的函数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">str.<span class="title function_">replace</span>(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;z&quot;</span>); <span class="comment">// 输出结果：abzdef</span></span><br></pre></td></tr></table></figure>

<p>执行一个全局替换, 忽略大小写:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Mr Blue has a blue house and a blue car&quot;</span>;</span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/blue/gi</span>, <span class="string">&quot;red&quot;</span>); <span class="comment">// 输出结果：&#x27;Mr red has a red house and a red car&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。</p>
<p><strong>（2）match()**</strong></p>
<p><code>match()</code>：该方法用于在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">match</span>(regexp);</span><br></pre></td></tr></table></figure>

<p>该方法的参数 regexp 是必需的，规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>
<p><strong>注意：</strong> 该方法返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="string">&quot;c&quot;</span>)); <span class="comment">// [&quot;c&quot;, index: 2, input: &quot;abcdef&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）search()**</strong></p>
<p><code>search()</code>方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.<span class="title function_">search</span>(searchvalue);</span><br></pre></td></tr></table></figure>

<p>该方法的参数 regex 可以是需要在 string 中检索的子串，也可以是需要检索的 RegExp 对象。</p>
<p><strong>注意：</strong> 要执行忽略大小写的检索，请追加标志 i。该方法不执行全局匹配，它将忽略标志 g，也就是只会返回第一次匹配成功的结果。如果没有找到任何匹配的子串，则返回 -1。</p>
<p><strong>返回值：</strong> 返回 str 中第一个与 regexp 相匹配的子串的起始位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">str.<span class="title function_">search</span>(<span class="regexp">/bcd/</span>); <span class="comment">// 输出结果：1</span></span><br></pre></td></tr></table></figure>

<h4 id="9-移除字符串收尾空白符"><a href="#9-移除字符串收尾空白符" class="headerlink" title="9. 移除字符串收尾空白符"></a>9. 移除字符串收尾空白符</h4><p>trim()、trimStart()和 trimEnd()这三个方法可以用于移除字符串首尾的头尾空白符，空白符包括：空格、制表符 tab、换行符等其他空白符等。</p>
<p><strong>（1）trim()</strong></p>
<p>trim() 方法用于移除字符串首尾空白符，该方法不会改变原始字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;  abcdef  &quot;</span>;</span><br><span class="line">str.<span class="title function_">trim</span>(); <span class="comment">// 输出结果：&quot;abcdef&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意，该方法不适用于 null、undefined、Number 类型。</p>
<p><strong>（2）trimStart()</strong></p>
<p>trimStart() 方法的的行为与<code>trim()</code>一致，不过会返回一个<strong>从原始字符串的开头删除了空白的新字符串</strong>，不会修改原始字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;  abc  &quot;</span>;</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">trimStart</span>(); <span class="comment">// &quot;abc  &quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）trimEnd()</strong></p>
<p>trimEnd() 方法的的行为与<code>trim()</code>一致，不过会返回一个<strong>从原始字符串的结尾删除了空白的新字符串</strong>，不会修改原始字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;  abc  &quot;</span>;</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">trimEnd</span>(); <span class="comment">// &quot;  abc&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-获取字符串本身"><a href="#10-获取字符串本身" class="headerlink" title="10. 获取字符串本身"></a>10. 获取字符串本身</h4><p>valueOf()和 toString()方法都会返回字符串本身的值，感觉用处不大。</p>
<p><strong>（1）valueOf()</strong></p>
<p><code>valueOf()</code>：返回某个字符串对象的原始值，该方法通常由 JavaScript 自动进行调用，而不是显式地处于代码中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">valueOf</span>()); <span class="comment">// &quot;abcdef&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）toString()</strong></p>
<p><code>toString()</code>：返回字符串对象本身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toString</span>()); <span class="comment">// &quot;abcdef&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="11-重复一个字符串"><a href="#11-重复一个字符串" class="headerlink" title="11. 重复一个字符串"></a>11. 重复一个字符串</h4><p>repeat() 方法返回一个新字符串，表示将原字符串重复 n 次：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>); <span class="comment">// 输出结果：&quot;xxx&quot;</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>); <span class="comment">// 输出结果：&quot;hellohello&quot;</span></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="number">0</span>); <span class="comment">// 输出结果：&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果参数是小数，会向下取整：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="number">2.9</span>); <span class="comment">// 输出结果：&quot;nana&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果参数是负数或者 Infinity，会报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="title class_">Infinity</span>); <span class="comment">// RangeError</span></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(-<span class="number">1</span>); <span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure>

<p>如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat 视同为 0。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(-<span class="number">0.9</span>); <span class="comment">// 输出结果：&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果参数是 NaN，就等同于 0：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="title class_">NaN</span>); <span class="comment">// 输出结果：&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果 repeat 的参数是字符串，则会先转换成数字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="string">&quot;na&quot;</span>); <span class="comment">// 输出结果：&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="string">&quot;3&quot;</span>); <span class="comment">// 输出结果：&quot;nanana&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="12-补齐字符串长度"><a href="#12-补齐字符串长度" class="headerlink" title="12. 补齐字符串长度"></a>12. 补齐字符串长度</h4><p>padStart()和 padEnd()方法用于补齐字符串的长度。如果某个字符串不够指定长度，会在头部或尾部补全。</p>
<p><strong>（1）padStart()**</strong></p>
<p><code>padStart()</code>用于头部补全。该方法有两个参数，其中第一个参数是一个数字，表示字符串补齐之后的长度；第二个参数是用来补全的字符串。 ​</p>
<p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padStart</span>(<span class="number">1</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padStart</span>(<span class="number">5</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padStart</span>(<span class="number">4</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;abax&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果省略第二个参数，默认使用空格补全长度：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padStart</span>(<span class="number">4</span>); <span class="comment">// &#x27;   x&#x27;</span></span><br></pre></td></tr></table></figure>

<p>padStart()的常见用途是为数值补全指定位数，笔者最近做的一个需求就是将返回的页数补齐为三位，比如第 1 页就显示为 001，就可以使用该方法来操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1&quot;</span>.<span class="title function_">padStart</span>(<span class="number">3</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">// 输出结果： &#x27;001&#x27;</span></span><br><span class="line"><span class="string">&quot;15&quot;</span>.<span class="title function_">padStart</span>(<span class="number">3</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">// 输出结果： &#x27;015&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）padEnd()**</strong></p>
<p><code>padEnd()</code>用于尾部补全。该方法也是接收两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">4</span>, <span class="string">&quot;ab&quot;</span>); <span class="comment">// &#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="13-字符串转为数字"><a href="#13-字符串转为数字" class="headerlink" title="13. 字符串转为数字"></a>13. 字符串转为数字</h4><p>parseInt()和 parseFloat()方法都用于将字符串转为数字。</p>
<p><strong>（1）parseInt()**</strong></p>
<p>parseInt() 方法用于可解析一个字符串，并返回一个整数。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(string, radix);</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>string：必需。要被解析的字符串。</li>
<li>radix：可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。</li>
</ul>
<p>​</p>
<p>当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>); <span class="comment">// 输出结果：10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;17&quot;</span>, <span class="number">8</span>); <span class="comment">// 输出结果：15 (8+7)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;010&quot;</span>); <span class="comment">// 输出结果：10 或 8</span></span><br></pre></td></tr></table></figure>

<p>当参数 radix 的值以 “0x” 或 “0X” 开头，将以 16 为基数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;0x10&quot;</span>); <span class="comment">// 输出结果：16</span></span><br></pre></td></tr></table></figure>

<p>如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;50&quot;</span>, <span class="number">1</span>); <span class="comment">// 输出结果：NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;50&quot;</span>, <span class="number">40</span>); <span class="comment">// 输出结果：NaN</span></span><br></pre></td></tr></table></figure>

<p>只有字符串中的第一个数字会被返回，当遇到第一个不是数字的字符为止:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;40 4years&quot;</span>); <span class="comment">// 输出结果：40</span></span><br></pre></td></tr></table></figure>

<p>如果字符串的第一个字符不能被转换为数字，就会返回 NaN：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;new100&quot;</span>); <span class="comment">// 输出结果：NaN</span></span><br></pre></td></tr></table></figure>

<p>字符串开头和结尾的空格是允许的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;  60  &quot;</span>); <span class="comment">// 输出结果： 60</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）parseFloat()**</strong></p>
<p>parseFloat() 方法可解析一个字符串，并返回一个浮点数。该方法指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。其语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(string);</span><br></pre></td></tr></table></figure>

<p>parseFloat 将它的字符串参数解析成为浮点数并返回。如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。同时参数字符串首位的空白符会被忽略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;10.00&quot;</span>); <span class="comment">// 输出结果：10.00</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;10.01&quot;</span>); <span class="comment">// 输出结果：10.01</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;-10.01&quot;</span>); <span class="comment">// 输出结果：-10.01</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;40.5 years&quot;</span>); <span class="comment">// 输出结果：40.5</span></span><br></pre></td></tr></table></figure>

<p>如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;new40.5&quot;</span>); <span class="comment">// 输出结果：NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><p><a href="https://blog.csdn.net/weixin_44247511/article/details/120881680"></a>对象操作方法</p>
<p><strong>1.Object.create() 创建对象 和 继承对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;    a.<span class="property">__proto__</span>  <span class="comment">// 出来一大堆对象自带的方法和属性</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)  创建一个以<span class="literal">null</span>为原型 的对象   b.<span class="property">__proto__</span> <span class="comment">// undefined</span></span><br><span class="line">一般当你不想继承任何<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>，想要得到一个纯净对象时可以用<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">aaa</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(A.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="comment">// 继承，B 继承了 Alet b = new B()b.aaa()  // 111</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2.Object.entries()将对象转化为数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">name</span>:<span class="string">&#x27;amz&#x27;</span>,<span class="attr">age</span>:<span class="number">23</span>&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title class_">Object</span>,<span class="title function_">entres</span>(obj) )  <span class="comment">//  [ [&#x27;name&#x27;,&#x27;amz&#x27;], [&#x27;age&#x27;, 23] ]目前就火狐和谷歌实现，别的浏览器都不兼容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3.Object.getOwnPropertyNames() 返回由对象所有的自身属性名组成的数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnpropertyNames</span>(obj); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>**4.Object.getPrototypeOf() 返回指定对象的原型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proto);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getprototypeOf</span>(obj) === proto;</span><br></pre></td></tr></table></figure>

<p><strong>5.Object.preventExtensions() 让一个对象不可扩展，永远不能添加新属性 但是可以删除已有属性</strong></p>
<p><strong>6.Object.isExtensble()判断一个对象是否可扩展，也就是是否可以添加新属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;    <span class="title class_">Object</span>.<span class="title function_">isExtensble</span>(obj) <span class="comment">//true   可以添加新属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>7.Object.freeze() 冻结对象 使对象永远不变，不可修改不可删除</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>); <span class="comment">// 2   不可以修改的</span></span><br></pre></td></tr></table></figure>

<p><strong>8.Object.isFrozen() 判断一个对象是否被冻结</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;   <span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(obj)  <span class="comment">//false   未冻结</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>9.defineProperty</strong></p>
<p>:::details 详情</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&#x27;zh-CN&#x27;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&#x27;UTF-8&#x27;&gt;</span><br><span class="line">    &lt;meta name=&#x27;viewport&#x27; content=&#x27;width=device-width, initial-scale=1.0&#x27;&gt;</span><br><span class="line">    &lt;meta http-equiv=&#x27;X-UA-Compatible&#x27; content=&#x27;ie=edge&#x27;&gt;</span><br><span class="line">    &lt;title&gt;开局一把刀&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //定义对象的方法</span><br><span class="line">    const obj = new Object();</span><br><span class="line">    obj.name = &#x27;lili&#x27;;</span><br><span class="line">    obj.age = 13;</span><br><span class="line">    console.log(obj);</span><br><span class="line">    //字面量</span><br><span class="line">    var person = &#123;</span><br><span class="line">        name:&#x27;sss&#x27;,</span><br><span class="line">        job:&#x27;srudent&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    /*通过Object.defineProperty(),这个方法可以去修改已有的对象属性或者添加属性</span><br><span class="line">    三个参数：</span><br><span class="line">        obj:要定义或者修改的对象</span><br><span class="line">        prop：要添加或者修改的属性</span><br><span class="line">        descriptor：描述符 是个对象</span><br><span class="line">           1、属性描述</span><br><span class="line">            a、value 描述值</span><br><span class="line">            b、writable 描述属性是否可以修改，布尔值为true可以修改,false不可修改，默认为false</span><br><span class="line">            c、enumerable 描述属性是否可以被枚举，布尔值,默认为false</span><br><span class="line">            true：可以枚举</span><br><span class="line">            false：不可枚举</span><br><span class="line">            for...in是否可以遍历属性</span><br><span class="line">            d、configurable 描述属性是否可以被删除，布尔值,默认为false</span><br><span class="line">            true：可以被删除</span><br><span class="line">            false：不可以被删除</span><br><span class="line">           2、存取器描述</span><br><span class="line">            getter/setter</span><br><span class="line">              get()&#123;</span><br><span class="line">                当读取属性值的时候执行</span><br><span class="line">            &#125;</span><br><span class="line">              set()&#123;</span><br><span class="line">                当属性值发生改变时执行</span><br><span class="line">            &#125;</span><br><span class="line">            当使用了getter或setter方法，不允许使用writable和value这两个属性,可以和enumerable、configurable同时使用</span><br><span class="line">            get或set不是必须成对出现，任写其一就可以。如果不设置方法，则get和set的默认值为undefined</span><br><span class="line">    */</span><br><span class="line">    var one = &#123;</span><br><span class="line">        color:&#x27;yellow&#x27;,</span><br><span class="line">        num:4,</span><br><span class="line">        type:&#x27;auto&#x27;,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //修改已有属性</span><br><span class="line">    Object.defineProperty(one,&#x27;color&#x27;,&#123;</span><br><span class="line">        value: &#x27;green&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(one.color);</span><br><span class="line">    //添加新的属性</span><br><span class="line">    Object.defineProperty(one,&#x27;price&#x27;,&#123;</span><br><span class="line">        value: &#x27;一万元&#x27;,</span><br><span class="line">        writable: true, //不可以被修改  /&#x27;raɪtəbl/</span><br><span class="line">        enumerable:false, //不可以被枚举  /ɪ&#x27;njʊmərəbl/</span><br><span class="line">        configurable:false//不可以删除  /kən&#x27;fɪgjərəbl/</span><br><span class="line">    &#125;)</span><br><span class="line">    one.price=&#x27;一块钱&#x27;;</span><br><span class="line">    console.log(one);</span><br><span class="line">    for (let attr in one) &#123;</span><br><span class="line">        console.log(attr);</span><br><span class="line">    &#125;</span><br><span class="line">    delete one.price;</span><br><span class="line">    console.log(one);</span><br><span class="line">    Object.defineProperty(one,&#x27;color&#x27;,&#123;</span><br><span class="line">        get()&#123;</span><br><span class="line">            console.log(&#x27;我被读取了&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        set()&#123;</span><br><span class="line">            console.log(&#x27;我被执行了&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    one.color = &#x27;red&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>:::</p>
<p><strong>10.defineProperties Object.defineProperties(object, {prop1 : descriptor1, prop2 : descriptor2, …)</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj, &#123;</span><br><span class="line">  <span class="attr">property1</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">property2</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// etc. etc.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>11.keys 遍历可枚举的属性，只包含对象本身可枚举属性，不包含原型链可枚举属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ArrayLike</span> = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="number">2</span>: <span class="string">&quot;c&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(arr); <span class="comment">// [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj); <span class="comment">// [&quot;foo&quot;,&quot;baz&quot;]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">ArrayLike</span>); <span class="comment">// [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>12.values 遍历可枚举的属性值，只包含对象本身可枚举属性值，不包含原型链可枚举属性值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ArrayLike</span> = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="number">2</span>: <span class="string">&quot;c&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(arr); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj); <span class="comment">// [&quot;bar&quot;,42]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="title class_">ArrayLike</span>); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure>

<p><strong>13.assign Object.assign( target, source, source1 ) 方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2); target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class="line"></span><br><span class="line">特殊情况：</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, <span class="literal">undefined</span>) === obj  <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, <span class="literal">null</span>) === obj       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])        <span class="comment">// [4, 5, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">assign</span>方法实行的是浅拷贝，而不是深拷贝。</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj1.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>.<span class="property">b</span>) <span class="comment">//2</span></span><br><span class="line">obj2.<span class="property">a</span>.<span class="property">b</span> = <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>.<span class="property">b</span>) <span class="comment">//3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>14.getPrototypeOf 获取指定对象的原型（内部[[Prototype]]属性的值）</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prototype1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> object1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(prototype1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(object1) === prototype1);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">注意：<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">Object</span>) 不是 <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>( <span class="title class_">Object</span> ) === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>;  <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>15.setPrototypeOf 设置一个指定的对象的原型</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, proto = &#123;<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto)</span><br><span class="line">obj.<span class="property">__proto__</span> === proto    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">getOwnPropertyNames 与keys相似，但包含遍历包含不可枚举属性</span><br><span class="line"><span class="keyword">var</span> my_obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">getFoo</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span>; &#125;,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">my_obj.<span class="property">foo</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(my_obj).<span class="title function_">sort</span>()   <span class="comment">// [&quot;foo&quot;, &quot;getFoo&quot;]</span></span><br><span class="line">getOwnPropertyDescriptor 获取该属性的描述对象</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  &#123; value: 123, writable: true, enumerable: true, configurable: true &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>16.getOwnPropertyDescriptors 返回指定对象所有自身属性（非继承属性）的描述对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">getOwnPropertyDescriptors</span> 方法，返回指定对象所有自身属性（非继承属性）的描述对象。</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">bar</span>() &#123; <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj))</span><br><span class="line"><span class="comment">//   &#123; foo:&#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//       bar:&#123; get: [Function: bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">使用场景：</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>() 方法只能拷贝源对象的可枚举的自身属性，同时拷贝时无法拷贝属性的特性，而且访问器属性会被转换成数据属性，也无法拷贝源对象的原型</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>() 方法可以实现上面说的这些，配合getPrototypeOf，以及getOwnPropertyDescriptors实现全面浅拷贝</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj),</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>17.entries 分割对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)); <span class="comment">// [ [&#x27;foo&#x27;, &#x27;bar&#x27;], [&#x27;baz&#x27;, 42] ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array like object</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="number">2</span>: <span class="string">&quot;c&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)); <span class="comment">// [ [&#x27;0&#x27;, &#x27;a&#x27;], [&#x27;1&#x27;, &#x27;b&#x27;], [&#x27;2&#x27;, &#x27;c&#x27;] ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  string</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="string">&quot;abc&quot;</span>); <span class="comment">// [[&#x27;0&#x27;, &#x27;a&#x27;], [&#x27;1&#x27;, &#x27;b&#x27;], [&#x27;2&#x27;, &#x27;c&#x27;]]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="number">100</span>); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<ul>
<li>is 它用来比较两个值是否严格相等，与严格比较运算符（&#x3D;&#x3D;&#x3D;）的行为基本一致</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;foo&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;&#125;, &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">(不同于 === 之处 + <span class="number">0</span>) === -<span class="number">0</span>; <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>18.preventExtensions 让一个对象变的不可扩展，也就是永远不能再添加新的属性&amp;isExtensible 判断一个对象是否可扩展</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> empty = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(empty)    <span class="comment">//true</span></span><br><span class="line">empty.<span class="property">a</span> = <span class="number">1</span>             <span class="comment">//添加成功</span></span><br><span class="line"><span class="comment">//将对象变为不可拓展</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(empty)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(empty)    <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">empty.<span class="property">b</span> = <span class="number">2</span>         <span class="comment">//静默失败,不抛出错误</span></span><br><span class="line"></span><br><span class="line">empty.<span class="property">a</span> = <span class="number">5</span>         <span class="comment">//修改a属性值为5  修改成功</span></span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">     <span class="number">1.</span>preventExtensions 可以让这个对象变的不可扩展，也就是不能再有新的属性。</span><br><span class="line">    <span class="number">2.</span>需要注意的是不可扩展的对象的属性通常仍然可以被删除。</span><br><span class="line">    <span class="number">3.</span>尝试给一个不可扩展对象添加新属性的操作将会失败，不过可能是静默失败，也可能会抛出 <span class="title class_">TypeError</span> 异常（严格模式）。</span><br><span class="line">    <span class="number">4.</span><span class="title class_">Object</span>.<span class="property">preventExtensions</span> 只能阻止一个对象不能再添加新的自身属性，仍然可以为该对象的原型添加属性。</span><br><span class="line">seal将一个对象密封 isSealed 判断一个对象是否为密封的</span><br><span class="line">密封对象是指那些不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可能可以修改已有属性的值的对象。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 先讲seal 方法：</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;</span><br><span class="line">o2.<span class="property">d</span> = <span class="number">2</span>    <span class="comment">//添加成功</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">seal</span>(o2);</span><br><span class="line">obj2 === o2         <span class="comment">//true  方法返回原对象，栈指针指向同一块内存</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isSealed</span>(o2)   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">o2.<span class="property">b</span> = <span class="number">111</span>       <span class="comment">//修改b属性值成功</span></span><br><span class="line"></span><br><span class="line">o2.<span class="property">f</span> = <span class="number">222</span>       <span class="comment">//静默失败,属性f没有成功添加</span></span><br><span class="line"><span class="keyword">delete</span> o2.<span class="property">b</span>      <span class="comment">//静默失败,属性b没有成功删除</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 讲isSealed 方法：</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isSealed</span>(o)    <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后通过Object.preventExtensions方法将空对象设置为不可扩展。</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(o);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isSealed</span>(o)    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">但是如果为非空对象呢？</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(o2);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isSealed</span>(o2)    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">因为属性 a 是可配置的（configurable为<span class="literal">true</span>），所以不是密封的对象，修改方法如下：</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(o2);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(o2, <span class="string">&quot;a&quot;</span>, &#123; <span class="attr">configurable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isSealed</span>(o2)    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">总结： <span class="number">1.</span>密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。</span><br><span class="line">      <span class="number">2.</span>属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。</span><br><span class="line">      <span class="number">3.</span>但属性的值仍然可以修改。</span><br><span class="line">      <span class="number">4.</span>尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出<span class="title class_">TypeError</span> 异常（严格模式）。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>19.freeze 冻结一个对象&amp;isFrozen 判断一个对象是否已经被冻结</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">冻结对象是指那些不能添加新的属性，不能修改已有属性的值，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性的对象。也就是说，这个对象永远是不可变的。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>先讲freeze 方法：</span><br><span class="line"><span class="keyword">let</span> o3 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">o3.<span class="property">b</span> = <span class="number">2</span>      <span class="comment">//添加属性b成功</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(o3)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(o3)    <span class="comment">//true 对象已被冻结</span></span><br><span class="line"></span><br><span class="line">o3.<span class="property">a</span> = <span class="number">2</span>       <span class="comment">//修改属性a值失败</span></span><br><span class="line">o3.<span class="property">c</span> = <span class="number">5</span>       <span class="comment">//添加属性c失败</span></span><br><span class="line"><span class="keyword">delete</span> o3.<span class="property">b</span>   <span class="comment">//删除属性b失败</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>再讲isfrozen 方法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o4 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">o4.<span class="property">b</span> = <span class="number">2</span>     <span class="comment">// 添加属性b成功</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">priventExtensions</span>(o4)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(o4, &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;<span class="attr">configurable</span>: <span class="literal">false</span>, <span class="attr">writable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    <span class="attr">b</span>: &#123;<span class="attr">configurable</span>: <span class="literal">false</span>, <span class="attr">writable</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(o4)    <span class="comment">//true o4 已经被冻结</span></span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">    <span class="number">1.</span>冻结对象的所有自身属性都不可能以任何方式被修改。</span><br><span class="line">    <span class="number">2.</span>任何尝试修改该对象的操作都会失败，可能是静默失败，也可能会抛出异常（严格模式中）。</span><br><span class="line">    <span class="number">3.</span>数据属性的值不可更改，访问器属性（有getter和setter）也同样（但由于是函数调用，给人的错觉是还是可以修改这个属性）。</span><br><span class="line">    <span class="number">4.</span>如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象。</span><br><span class="line"></span><br><span class="line">浅冻结与深冻结：</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    obj = &#123;</span><br><span class="line">        internal :&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);<span class="comment">//浅冻结</span></span><br><span class="line">    obj.<span class="property">internal</span>.<span class="property">a</span> = <span class="string">&quot;aValue&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">internal</span>.<span class="property">a</span>);<span class="comment">//&quot;aValue&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//想让一个对象变得完全冻结,冻结所有对象中的对象,可以使用下面的函数.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deepFreeze</span>(<span class="params">o</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> prop,propKey;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">freeze</span>(o);<span class="comment">//首先冻结第一层对象</span></span><br><span class="line">        <span class="keyword">for</span>(propKey <span class="keyword">in</span> o)&#123;</span><br><span class="line">            prop = o[propKey];</span><br><span class="line">            <span class="keyword">if</span>(!o.<span class="title function_">hasOwnProperty</span>(propKey) || !(<span class="keyword">typeof</span> prop === <span class="string">&quot;object&quot;</span>) || <span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(prop))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">deepFreeze</span>(prop);<span class="comment">//递归</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">deepFreeze</span>(obj);</span><br><span class="line">    obj.<span class="property">internal</span>.<span class="property">b</span> = <span class="string">&quot;bValue&quot;</span>;<span class="comment">//静默失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">internal</span>.<span class="property">b</span>);<span class="comment">//undefined</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>20.hasOwnProperty</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;a&#x27;</span>)   <span class="comment">//true</span></span><br><span class="line">o.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;b&#x27;</span>)   <span class="comment">//false   对象自身没有属性b</span></span><br><span class="line">o.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>);  <span class="comment">//false  不能检测对象原型链上的属性</span></span><br><span class="line"></span><br><span class="line">如何遍历一个对象的所有自身属性，例子：</span><br><span class="line"><span class="keyword">var</span> buz = &#123;</span><br><span class="line">    <span class="attr">fog</span>: <span class="string">&#x27;stack&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> buz) &#123;</span><br><span class="line">    <span class="keyword">if</span> (buz.<span class="title function_">hasOwnProperty</span>(name)) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is fog (&quot;</span> + name + <span class="string">&quot;) for sure. Value: &quot;</span> + buz[name]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// toString or something else</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">isPrototypeOf;</span><br><span class="line">isPrototypeOf方法用于测试一个对象是否存在于另一个对象的原型链上;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bar</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Baz</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Baz</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="title class_">Baz</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Baz</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(baz)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(baz)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(baz)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(baz)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>21.propertyIsEnumerable 指定的属性是否可枚举</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="title function_">propertyIsEnumerable</span>(prop)   prop为被测试的属性名</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 一般情况下</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">o.<span class="property">prop</span> = <span class="string">&#x27;is enumerable&#x27;</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;is enumerable&#x27;</span>;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;prop&#x27;</span>);   <span class="comment">//  返回 true</span></span><br><span class="line">a.<span class="title function_">propertyIsEnumerable</span>(<span class="number">0</span>);        <span class="comment">// 返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 浏览器内置对象</span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;is enumerable&#x27;</span>];</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">propertyIsEnumerable</span>(<span class="number">0</span>);          <span class="comment">// 返回 true</span></span><br><span class="line">a.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;length&#x27;</span>);   <span class="comment">// 返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;random&#x27;</span>);   <span class="comment">// 返回 false</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;Math&#x27;</span>);     <span class="comment">// 返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 自身属性和继承属性</span><br><span class="line">（原型链上propertyIsEnumerable不被考虑）</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prop</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.<span class="property"><span class="keyword">prototype</span></span> = &#123; <span class="attr">prototypeProp</span>: <span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;prop&#x27;</span>)               <span class="comment">// true</span></span><br><span class="line">o.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;prototypeProp&#x27;</span>)   <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>22.caller 返回当前函数的调用者</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (test.<span class="property">caller</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;JavaScript顶层作用域调用了test()函数&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(test.<span class="property">caller</span> + <span class="string">&quot;函数调用了test()函数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">// JavaScript顶层作用域调用了test()函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callTest</span>(); <span class="comment">// function callTest()&#123; test(); &#125;函数调用了test()函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callTest2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// setTimeout()或setInterval()中定时执行的函数也属于顶层作用域调用</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(test, <span class="number">5000</span>); <span class="comment">// JavaScript顶层作用域调用了test()函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callTest2</span>();</span><br></pre></td></tr></table></figure>

<p><strong>23.valueOf 需要返回对象的原始值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">备注：js对象中的<span class="title function_">valueOf</span>()方法和<span class="title function_">toString</span>()方法非常类似，但是，当需要返回对象的原始值而非字符串的时候才调用它，尤其是转换为数字的时候。如果在需要使用原始值的上下文中使用了对象，<span class="title class_">JavaScript</span>就会自动调用<span class="title function_">valueOf</span>()方法。</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">valueOf</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> <span class="number">123123</span> &#125; &#125;</span><br><span class="line"><span class="title class_">Number</span>(o)    <span class="comment">//123123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给大家出一个题</span></span><br><span class="line"><span class="keyword">const</span> o2 = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(o2 == <span class="number">1</span> &amp;&amp; o2 == <span class="number">2</span> &amp;&amp; o2 == <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o2.<span class="property">x</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;faild&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array：返回数组对象本身</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&quot;CodePlayer&quot;</span>, <span class="literal">true</span>, <span class="number">12</span>, -<span class="number">5</span>];</span><br><span class="line">array.<span class="title function_">valueOf</span>() === array;   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Date：当前时间距1970年1月1日午夜的毫秒数</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2013</span>, <span class="number">7</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">59</span>, <span class="number">230</span>);</span><br><span class="line">date.<span class="title function_">valueOf</span>()     <span class="comment">// 1376838719230</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number：返回数字值</span></span><br><span class="line"><span class="keyword">var</span> num =  <span class="number">15.26540</span>;</span><br><span class="line">num.<span class="title function_">valueOf</span>()     <span class="comment">// 15.2654</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔：返回布尔值true或false</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line">bool.<span class="title function_">valueOf</span>() === bool    <span class="comment">// true</span></span><br><span class="line"><span class="comment">// new一个Boolean对象</span></span><br><span class="line"><span class="keyword">var</span> newBool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// valueOf()返回的是true，两者的值相等</span></span><br><span class="line">newBool.<span class="title function_">valueOf</span>() == newBool     <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 但是不全等，两者类型不相等，前者是boolean类型，后者是object类型</span></span><br><span class="line">newBool.<span class="title function_">valueOf</span>() === newBool     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function：返回函数本身</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line">foo.<span class="title function_">valueOf</span>() === foo      <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> foo2 =  <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;return x + y;&quot;</span>);</span><br><span class="line">foo2.<span class="title function_">valueOf</span>() === foo2    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object：返回对象本身</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line">obj.<span class="title function_">valueOf</span>() === obj        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String：返回字符串值</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;http://www.365mini.com&quot;</span>;</span><br><span class="line">str.<span class="title function_">valueOf</span>() === str       <span class="comment">// true</span></span><br><span class="line"><span class="comment">// new一个字符串对象</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;http://www.365mini.com&quot;</span>);</span><br><span class="line"><span class="comment">// 两者的值相等，但不全等，因为类型不同，前者为string类型，后者为object类型</span></span><br><span class="line">str2.<span class="title function_">valueOf</span>() === str2      <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>24.getOwnPropertySymbols 在给定对象自身上找到的所有 Symbol 属性的数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">Symbol</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">&quot;localSymbol&quot;</span>;</span><br><span class="line">obj[b] = <span class="string">&quot;globalSymbol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objectSymbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectSymbols.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectSymbols); <span class="comment">// [Symbol(a), Symbol(b)]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectSymbols[<span class="number">0</span>]); <span class="comment">// Symbol(a)</span></span><br></pre></td></tr></table></figure>

<p><strong>25.toString toLocalString</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toString 方法不做过多介绍</span><br><span class="line">区别：</span><br><span class="line">当被转化的值是个时间对象时，toLocaleString会将转化的结果以本地表示。</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">toString</span>(); <span class="comment">//&quot;Mon Nov 06 2017 13:02:46 GMT+0800 (China Standard Time)&quot;</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Date</span>).<span class="title function_">toLocaleString</span>();  <span class="comment">//&quot;2017/11/6 下午1:03:12&quot;</span></span><br><span class="line"></span><br><span class="line">另外当被转化的值是个时间戳时，toLocaleString会把时间戳每三位添加一个逗号，代码如下。</span><br><span class="line"></span><br><span class="line">(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())).<span class="title function_">toLocaleString</span>() <span class="comment">//&quot;1,509,944,637,000&quot;</span></span><br><span class="line"></span><br><span class="line">(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())).<span class="title function_">toString</span>() <span class="comment">//&quot;1509944643000&quot;</span></span><br><span class="line"></span><br><span class="line">call  apply bind  待定</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>26.length</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">length</span>; <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p><strong>27.name</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">name</span>; <span class="comment">//&quot;Object&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="JS-三坐大山"><a href="#JS-三坐大山" class="headerlink" title="JS 三坐大山"></a>JS 三坐大山</h3><p><img src="/../assets/js_img/sanzuo.png" alt="JS 三坐大山"></p>
<blockquote>
<h4 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h4></blockquote>
<p><strong>作用域：</strong>就是变量或者是函数能作用的范围</p>
<ul>
<li><code>全局作用域：</code>除了函数中定义的变量之外，都是全局作用域。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> greeting = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 &#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>函数作用域：</code>创建函数后在花括号中声明的一些语句或变量只在当前函数中起作用的叫函数作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 &#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="title function_">greet</span>();</span><br><span class="line"><span class="comment">// 报错： Uncaught ReferenceError: greeting is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>块级作用域：</code>块级作用域指的就是使用 if () { }; while ( ) { } …这些语句所形成的语句块 , 并且其中变量必须使用 let 或 const 声明,保证了外部不可以访问语句块中的变量。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 块级作用域中的变量</span></span><br><span class="line">  <span class="keyword">let</span> greeting = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> lang = <span class="string">&quot;English&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// Prints &#x27;Hello World!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量 &#x27;English&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang);</span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: greeting is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>作用域嵌套：</code>像 Javascript 中函数可以在一个函数内部声明另一个函数一样，作用域也可以嵌套在另一个作用域中。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Peter&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> lang = <span class="string">&quot;English&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;lang&#125;</span>: <span class="subst">$&#123;greeting&#125;</span> <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>(); <span class="comment">// English: Hello Peter</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>作用域链：</code>当查找变量的时候，会先从当前作用域的变量对象中查找，如果没有找到，就会从父级作用域的变量对象中查找，一直找到全局作用域的变量对象，这样由多个作用域的变量对象构成的链表就叫做作用域链。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作用域链</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> baz = <span class="string">&quot;baz&quot;</span>;</span><br><span class="line">  <span class="comment">// 打印 &#x27;baz&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(baz);</span><br><span class="line">  <span class="comment">// 打印 &#x27;foo&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">  number = <span class="number">42</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(number); <span class="comment">// 打印 42</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure>

<p><strong>闭包</strong></p>
<ul>
<li><p><code>什么是闭包：</code>闭包就是一个能够读取外层函数内部变量的函数(可以在内部函数访问到外部函数作用域。)</p>
</li>
<li><p><code>为什么要使用闭包：</code>使用闭包，可以读取函数中的变量，也可以将函数中的变量存储在内存中，保护变量不被污染。</p>
</li>
<li><p><code>闭包3个特性：</code></p>
<ul>
<li>函数嵌套函数</li>
<li>函数内部可以引用函数外部的参数和变量</li>
<li>参数和变量不会被垃圾回收机制回收</li>
</ul>
</li>
<li><p><code>闭包的两种形式：</code></p>
<ul>
<li>函数作为返回值的形式</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数作为返回值的形式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">a</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">b</span>()); <span class="comment">// name</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数作为参数的形式</li>
</ul>
<h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…."></a>未完待续….</h2>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>JS学习</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/posts/5/</url>
    <content><![CDATA[<h1 id="学习-React"><a href="#学习-React" class="headerlink" title="学习 React"></a>学习 React</h1><ul>
<li>什么是 React?<br>用于构建用户界面的 JS 库<br>react 只关注视图（也就是页面）<br>AIA：是一个将数据渲染为 HTML 视图的开源 JS 库,感觉像是程序员和 DOM 之间的代理</li>
<li>步骤</li>
</ul>
<ol>
<li>发送请求获取数据</li>
<li>处理数据(过滤、整理格式)</li>
<li>操作 DOM 呈现页面</li>
</ol>
<ul>
<li>谁开发的？<br>由 Facebook 开发，且开源<br>软件工程师 Jorda Walke 创建</li>
<li>为什么用 react</li>
</ul>
<ol>
<li>原生 js 操作 DOM 繁琐、效率低</li>
<li>使用 JS 直接操作 DOM， 浏览器会进行大量的重绘重排</li>
<li>原生没有组件化编码方案，代码复用率低</li>
</ol>
<ul>
<li>React 特点</li>
</ul>
<ol>
<li>采用组件化模式、声明式编码，提高开发效率及组件复用率</li>
<li>在 React Native 中可以使用 React 语法进行移动端开发</li>
<li>使用虚拟 DOM+Diffing 算法，减少与真实 DOM 交互</li>
</ol>
<ul>
<li>依赖包</li>
</ul>
<ol>
<li>babel.min.js (es6-&gt;es5 jsx-&gt;js)</li>
<li>react.development.js(react 核心库)</li>
<li>react-dom.development(react 扩展库)</li>
</ol>
<h2 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h2><h3 id="虚拟-DOM-的两种创建方式"><a href="#虚拟-DOM-的两种创建方式" class="headerlink" title="虚拟 DOM 的两种创建方式"></a>虚拟 DOM 的两种创建方式</h3><ol>
<li>使用 jsx 创建虚拟虚拟 DOM</li>
</ol>
<ul>
<li>格式<br>引入 react 核心库<br>引入 react-dom,用于支持 react 操作 DOM<br>引入 babel</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 表示里面写jsx</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>; <span class="comment">// 此处不要写引号 因为不是字符串</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 js 创建虚拟 DOM</li>
</ol>
<ul>
<li>格式<br>引入 react 核心库<br>引入 react-dom,用于支持 react 操作 DOM</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 表示里面写jsx</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createlement</span>(标签名, 标签属性, 标签内容);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createlement</span>(<span class="string">&quot;h1&quot;</span>, &#123; <span class="attr">id</span>: <span class="string">&quot;title&quot;</span> &#125;, <span class="string">&quot;Hello React&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="关于虚拟-DOM"><a href="#关于虚拟-DOM" class="headerlink" title="关于虚拟 DOM"></a>关于虚拟 DOM</h3><ol>
<li>console.log(VDOM instanceof Object) 本质是 Object 类型的对象</li>
<li>虚拟 DOM 比较”轻”，属性少。因为虚拟 DOM 是 react 内部在用，无需真实 DOM 那么多的属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;虚拟DOM&quot;</span>, <span class="variable constant_">VDOM</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;真实DOM&quot;</span>, <span class="variable constant_">TDOM</span>); <span class="comment">// 输出&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;，没法看属性</span></span><br><span class="line"><span class="keyword">debugger</span>; <span class="comment">// 借助断点来看有多少属性</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>虚拟 DOM 最终会被 React 转化为真实 DOM，呈现在页面上</li>
</ol>
<h2 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h2><p>全称:javascript XML<br>是一个 JavaScript 的语法扩展。在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。</p>
<h3 id="为什么使用-JSX？"><a href="#为什么使用-JSX？" class="headerlink" title="为什么使用 JSX？"></a>为什么使用 JSX？</h3><p>React 认为渲染逻辑本质上与其他 UI 逻辑内在耦合，比如<br>上述例子若是在 h1 标签中再加一个 span 标签：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jsx:</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js:</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createlement</span>(</span><br><span class="line">  <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;title&quot;</span> &#125;,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>, &#123;&#125;, <span class="string">&quot;Hello React&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="BTW——XML"><a href="#BTW——XML" class="headerlink" title="BTW——XML"></a>BTW——XML</h4><p>早期用于存储和传输数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用json存储  json&#123;&#125;存储对象 js对象存储为json字符串--&gt;</span></span><br><span class="line">&#123;&quot;name&quot;:&#x27;Tom&#x27;,&quot;age&quot;:19&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BTW——json"><a href="#BTW——json" class="headerlink" title="BTW——json"></a>BTW——json</h4><ol>
<li>parse 方法</li>
<li>stringify 方法</li>
</ol>
<h3 id="jsx-语法规则"><a href="#jsx-语法规则" class="headerlink" title="jsx 语法规则"></a>jsx 语法规则</h3><ol>
<li>定义虚拟 DOM 时不要写引号</li>
<li>标签中混入 js 表达式时用{}，myId，myData<br>[注意]区分 js 表达式 和 js 语句（代码）</li>
</ol>
<ul>
<li>表达式一定会产生一个值，可以放在任何一个需要值的地方<br>下面这些都是表达式 :<br>.a,<br>.a+b<br>.demo(1)<br>arr.map(() &#x3D;&gt; {return})<br>function test() {}</li>
<li>语句(代码)<br>下面这些都是语句(代码)<br>.if()<br>.for()<br>.switch() {case:xxx}</li>
</ul>
<ol start="3">
<li>样式的类名指定不要用 class，要用 className</li>
<li>内联样式要用,style&#x3D;两个大括号，里面写 key:value 的形式 去写<br>比如两个大括号，中间写 color:’white’</li>
<li>虚拟 DOM，只有一个根标签 在这个例子中所有东西都放 h2 里</li>
<li>标签必须闭合</li>
<li>标签首字母<br>（1）若小写字母开头，则将该标签转为 html 同名元素，若 html 中无该标签对应同名元素，则报错<br>（2）若大写字母开头，react 就去渲染对应组件，若组件没有定义，则报错</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> myId = <span class="string">&quot;ALin&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> myData = <span class="string">&quot;suibian&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&#123;myId.toLowerCase()&#125;</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例子：渲染数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> data = [<span class="string">&quot;Angular&quot;</span>, <span class="string">&quot;React&quot;</span>, <span class="string">&quot;Vue&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        &#123;data.map((item, index) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          // 这样写少了key值，可以暂时用index来代替，但最好还是用id，因为index会变化</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        &#125;)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="模块与组件、模块化与组件化的理解"><a href="#模块与组件、模块化与组件化的理解" class="headerlink" title="模块与组件、模块化与组件化的理解"></a>模块与组件、模块化与组件化的理解</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li>向外提供特定的 js 程序，一般就是一个 js 文件</li>
<li>为什么要拆成模块？<br>随着业务逻辑增加，代码越来越多越来越复杂</li>
<li>作用：复用 js，提高 js 运行效率</li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li>用来实现局部功能效果的代码和资源集合(html&#x2F;css&#x2F;image&#x2F;js)</li>
<li>为什么要拆成组件？<br>一个界面功能更复杂</li>
<li>作用：复用代码，简化项目编码，提高运行效率</li>
</ul>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>当应用的 js 都以模块来编写的，这个应用就是一个模块化应用</p>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</p>
<h2 id="react-面向组件编程"><a href="#react-面向组件编程" class="headerlink" title="react 面向组件编程"></a>react 面向组件编程</h2><h3 id="两种定义组件方式"><a href="#两种定义组件方式" class="headerlink" title="两种定义组件方式"></a>两种定义组件方式</h3><ol>
<li>函数式组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建组函数式件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 结果为undefined 因为函数要经过babel翻译，翻译后开启严格模式，禁止自定义函数里的this指向window</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// ReactDOM.render(demo,document.getElementById(&#x27;test&#x27;)) 这样写会报错，不能直接写demo</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>)) 这样写会报错，不能直接写demo</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// D 大写因为是组件，闭合标签，以标签形式写出</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  执行了ReactDOM.render(&lt;Demo/&gt;）......之后发生了什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1. react 解析组件标签，找到Demo组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2. 发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实的DOM，随后呈现在页面中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>类式组件</li>
</ol>
<h4 id="回顾一下-es6"><a href="#回顾一下-es6" class="headerlink" title="回顾一下 es6"></a>回顾一下 es6</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 接收new 传递过来的参数，用构造器方法</span></span><br><span class="line">    <span class="title function_">constructotr</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">        <span class="comment">// 构造器中的this指什么？类的实例对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 除了构造器方法，还有一般方法</span></span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        speak方法放在哪里了？ 类的原型对象上</span><br><span class="line">        speak方法给谁用的？给实例用</span><br><span class="line">        speak中<span class="variable language_">this</span>是谁？p1/p2 通过<span class="title class_">Person</span>实例调用speak时，speak中的<span class="variable language_">this</span>就是<span class="title class_">Person</span>实例</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用类创建一个Person实例对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="number">19</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jerry&#x27;</span>,<span class="number">17</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br><span class="line">p1.<span class="title function_">spaek</span>()</span><br><span class="line">p2.<span class="title function_">speak</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Student类，继承于Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,grade</span>) &#123; <span class="comment">// 自己写构造器，有想添加的东西在这儿写</span></span><br><span class="line">        <span class="comment">// 必须使用super,且在最前面</span></span><br><span class="line">        <span class="variable language_">super</span>(name,age)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span> = grade</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写从父类继承过来的方法</span></span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>,我是<span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>年级`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// study方法放在哪儿？ 类的原型上，供实例使用</span></span><br><span class="line">        <span class="comment">// 通过Student实例调用study时候,study中的this就是Student的实例</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我很努力的学习&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小张&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;高一&#x27;</span>) <span class="comment">// 若想再添加一个年级，但是继承的Person中没有</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</span><br><span class="line"><span class="comment">// 静态方法就是构造函数本身属性，不在类的原型对象上，所以实例无法调用</span></span><br></pre></td></tr></table></figure>

<p>【AIA】</p>
<ol>
<li>类中的构造器不是必须写，要对实例进行一些初始化操作，如指定添加属性时才写（比如 grade）</li>
<li>如果 A 类继承 B 类，且 A 类中写了构造器，那么 A 类构造器中的 super 是必须要调用的</li>
<li>类中所定义的方法，都是放在类的原型对象上，供实例使用</li>
</ol>
<h3 id="创建类式组件"><a href="#创建类式组件" class="headerlink" title="创建类式组件"></a>创建类式组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// render是放在哪里的？ 类（MyComponent）的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// render中的this是谁？MyComponent的组件实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        执行了ReactDOM.render(&lt;MyComponent/&gt;）......之后发生了什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. react 解析组件标签，找到MyComponent组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 将render返回的虚拟DOM转为真实DOM，随后呈现在页面中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="组件三大属性"><a href="#组件三大属性" class="headerlink" title="组件三大属性"></a>组件三大属性</h2><h3 id="第一————组件的状态"><a href="#第一————组件的状态" class="headerlink" title="第一————组件的状态"></a>第一————组件的状态</h3><ul>
<li>像 es6 一样，我需要用到实例中的 state，但天默认是空值,就是空对象。需要自己添加，所以用到 constructor 和 super</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>(props);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;; <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return &lt;h1&gt;今天天气&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;  有const声明就不需要写的那么麻烦了</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气&#123;isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        执行了ReactDOM.render(&lt;MyComponent/&gt;）......之后发生了什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. react 解析组件标签，找到MyComponent组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 将render返回的虚拟DOM转为真实DOM，随后呈现在页面中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>事件绑定</li>
</ol>
<h4 id="回顾一下原生事件绑定"><a href="#回顾一下原生事件绑定" class="headerlink" title="回顾一下原生事件绑定"></a>回顾一下原生事件绑定</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;demo()&quot;</span>&gt;</span>btn3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法一</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;按钮1被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法二</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn2.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;按钮1被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法三</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;按钮3被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>react 事件绑定</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> that;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>(props);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;; <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">      that = <span class="variable language_">this</span>; <span class="comment">// 声明一个that，让下面的也可以用这个this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 解决this指向undefined问题</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>); <span class="comment">// bind返回一个新函数，手动执行；新函数里的this变为Weather的实例对象，然后把函数放在实例自身，给函数起了个名字叫changeWeather，因此实例对象自身Weather，就多了一个方法叫changeWeather</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return &lt;h1&gt;今天天气&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;  有const声明就不需要写的那么麻烦了</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return &lt;h1 id=&quot;title&quot;&gt;今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return &lt;h1 onClick=&#123;demo()&#125; &gt;今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt; //直接在里面写onclick,demo不能用字符串形式，demo用函数的形式写出</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          今天天气&#123;isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;！</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      ); <span class="comment">// 但是加了括号表示立即执行，所以要去掉</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// changeWeather放在哪儿？放在weather的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过weather实例调用changeWeather时，changeWeather中的this就是Weather的实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所以不需要that</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发现this，undefined，为什么this会丢失? 举一个原生例子 看下一个js</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所以这里相当于直接调用，changeWeather是作为onClick的回调，不是通过实例调用又因为类中方法默认开启局部的严格模式</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">render</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 第一种 不建议要先document.getElementById(&#x27;title&#x27;)*/</span></span></span><br><span class="line"><span class="language-javascript">  title.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;标题被点击&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*第二种 不建议要先document.getElementById(&#x27;title&#x27;)*/</span></span></span><br><span class="line"><span class="language-javascript">  title.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;标题被点击&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*第三种 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 又需要将这个定义在类中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处修改isHot的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(isHot); <span class="comment">// 这样会报错，因为state undefined，demo函数不在weather类中，根本没有关系的两个东西</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所以</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">state</span>.<span class="property">isHot</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// study方法放在原型对象上，供实例对象使用</span></span><br><span class="line">    <span class="comment">// 通过Person实例调用study时，study中的this就是Person实例</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">19</span>);</span><br><span class="line">p1.<span class="title function_">study</span>(); <span class="comment">// 通过实例调用study对象</span></span><br><span class="line"><span class="keyword">const</span> x = p1.<span class="property">study</span>;</span><br><span class="line"><span class="title function_">x</span>(); <span class="comment">/* 这个时候study中的this打印为undefined，因为这个属于直接调用，上面p1.study() 是实例调用；</span></span><br><span class="line"><span class="comment">        类中的定义的方法，全部局部自动开启严格模式</span></span><br><span class="line"><span class="comment">        比如:</span></span><br><span class="line"><span class="comment">        function demo() &#123;</span></span><br><span class="line"><span class="comment">            console.log(this) // window</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        demo()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        function demo() &#123;</span></span><br><span class="line"><span class="comment">            &#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">            console.log(this) // undefined</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        demo</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>setState 应用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 构造器调用几次————1 次</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(constructor)</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">state</span>=&#123;<span class="attr">isHot</span>:<span class="literal">true</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 解决this指向undefined问题</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>) <span class="comment">// bind返回一个新函数，手动执行；新函数里的this变为Weather的实例对象，然后把函数放在实例自身，给函数起了个名字叫changeWeather，因此实例对象自身Weather，就多了一个方法叫changeWeather</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// render 调用几次———— 1+n次 1是初始化那次，n是状态更新的次数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(render)</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span> &gt;</span>今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！,&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">// 但是加了括号表示立即执行，所以要去掉</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// changeWeather 调用几次———— 点几次调用几次</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(render)</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 获取原来的isHot值</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 严重注意状态必须通过setState进行更新,且合并（更改isHot,后面的wind不会变）</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 严重注意，状态不可直接更改，要借助内置API直接更改</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// this.state.isHot = !isHot</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>) <span class="comment">// 这样两行改了，控制台点击true，false进行切换，但是react不认可，是单向数据流</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>上述代码精简方式<br>类中可以直接写赋值语句不需要 let 什么的声明，直接 a&#x3D;1<br>所以</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以不写构造器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 想给Weather实例对象身上都添加一个state属性，那就拿出来直接赋值</span></span></span><br><span class="line"><span class="language-javascript">    state = &#123; <span class="attr">isHot</span>: <span class="literal">true</span>, <span class="attr">wind</span>: <span class="string">&quot;微风&quot;</span> &#125;; <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 下面这行代码，可以把changeWeather变成赋值语句</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this.changeWeather = this.changeWeather.bind(this)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// changeWeather = function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     // 这样changeWeather就放实例自身上了，但是这样仅仅只是换了个地方，之前在原型对象，现在在实例自身，所以换成箭头函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     const isHot = this.state.isHot</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     this.setState(&#123;isHot:!isHot&#125;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          今天天气&#123;isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;！,&#123;wind&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      ); <span class="comment">// 但是加了括号表示立即执行，所以要去掉</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 自定义方法（赋值语句+箭头函数）</span></span></span><br><span class="line"><span class="language-javascript">    changeWeather = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 箭头函数没有自己的this，找外层函数的this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isHot</span>: !isHot &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Weather的实例对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>【AIA】</p>
<ul>
<li>state 是组件对象最重要的属性，值是对象（可以包含多个 key-value 的组合）</li>
<li>组件被称为“状态机”，像生活中的红绿灯，通过更新组件的 state 来更新对应的页面显示（重新渲染组件）<br>[注意]</li>
</ul>
<ol>
<li>组件中 render 方法中的 this 为组件的实例对象</li>
<li>组件自定义方法中的 this 都是 undefined，如何解决？<br>a. 强制绑定 this:通过函数对象的 bind()<br>b. 箭头函数</li>
<li>状态数据不能直接修改或更新</li>
</ol>
<h3 id="组件的第二个属性————props"><a href="#组件的第二个属性————props" class="headerlink" title="组件的第二个属性————props"></a>组件的第二个属性————props</h3><p>类里面的 this 指向组件的实例对象，里面有一个 props 空对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// &lt;ul&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//     &lt;li&gt;姓名:&#123;this.props.name&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//     &lt;li&gt;性别:&#123;this.props.sex&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//     &lt;li&gt;年龄:&#123;this.props.age&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// &lt;/ul&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 上面声明后可不需要写this.props</span></span></span><br><span class="line"><span class="language-javascript">              <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">          )</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>)) <span class="comment">// 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 但是上述写法太麻烦了，所以</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> p = &#123;name=<span class="string">&quot;tom&quot;</span> sex=<span class="string">&quot;男&quot;</span> age=<span class="string">&quot;18&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#123;p.name&#125;</span> <span class="attr">sex</span>=<span class="string">&#123;p.sex&#125;</span> <span class="attr">age</span>=<span class="string">&#123;p.age&#125;</span> /&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 这样还是太麻烦</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...p) <span class="comment">// 报错，仅仅适用于标签属性的传递，别的地方都不行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="回顾一下扩展运算符"><a href="#回顾一下扩展运算符" class="headerlink" title="回顾一下扩展运算符"></a>回顾一下扩展运算符</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr1) <span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"><span class="comment">// 连接数组</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3) <span class="comment">// [1,2,3,4,5,2,4,6,8,10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a+b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">// 若有很多数字或者数字不固定</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(numbers) <span class="comment">// [1,2] 是个数组，...可以批量都接收到</span></span><br><span class="line">    <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">preValue,currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 函数体</span></span><br><span class="line">        <span class="keyword">return</span> preValue + currentValue <span class="comment">// 结果为3，1+2</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 原生中与react不同，react中babel和引入的react，可以直接用根本没有触发什么赋值对象</span></span><br><span class="line"> <span class="comment">// 构造字面量对象时使用展开语法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...person) <span class="comment">// Found non-callable @@iterator at 展开运算符 意思是 对象类型没有接口 就是说展开运算符不能展开一个对象</span></span><br><span class="line"><span class="comment">// 但如果</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;...person&#125; <span class="comment">// 表示赋值一个对象</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;jerry&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2) <span class="comment">// &#123;name:&#x27;tom&#x27;,age:&#x27;18&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person) <span class="comment">// &#123;name:&#x27;jerry&#x27;,age:&#x27;18&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 合并</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;...person,<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">address</span>:<span class="string">&#x27;地球&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person3) <span class="comment">// &#123;name:&#x27;jerry&#x27;,age:&#x27;18&#x27;,address:&#x27;地球&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="props-有一些限制"><a href="#props-有一些限制" class="headerlink" title="props 有一些限制"></a>props 有一些限制</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; name, age, sex &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">propsTypes</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// props属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// name:&#x27;必传，字符串&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// name:React.propTypes.string // React.propTypes 这是react内置对象，react15用，但react16被弃用了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所以引入依赖包prop-types .js ,引入后多了一个对象PropType</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">// 加了isRequired表示名字必须传</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">// 限制性别为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>, <span class="comment">// 限制年龄为数值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">speak</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>, <span class="comment">// 不能写function，会报错必须是一个function但得到了undefined，所以写func,function是个关键字</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 指定默认标签属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>, <span class="comment">// sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 年龄默认值为18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 需求希望年龄+1, 又不改真实年龄结果变成年龄：191，需要改变基本数据类型，把字符串变成number</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  ReactDOM.render(&lt;Person name=&quot;tom&quot; sex=&quot;男&quot; age=&quot;18&quot; /&gt;,document.getELementById(&#x27;test&#x27;)) // 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 变为</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;</span> /&gt;</span></span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我在讲话&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>姓名必须指定，且为字符串类型</li>
<li>性别为字符串类型，如果性别没有指定，默认为男</li>
<li>年龄为字符串类型，且为数字类型，默认值为 18</li>
</ul>
<h4 id="props-的简写方式"><a href="#props-的简写方式" class="headerlink" title="props 的简写方式"></a>props 的简写方式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">static</span> propsTypes = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">speak</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 指定默认标签属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">static</span> defaultProps = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>, <span class="comment">// sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 年龄默认值为18</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; name, age, sex &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 需求希望年龄+1, 又不改真实年龄结果变成年龄：191，需要改变基本数据类型，把字符串变成number</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  ReactDOM.render(&lt;Person name=&quot;tom&quot; sex=&quot;男&quot; age=&quot;18&quot; /&gt;,document.getELementById(&#x27;test&#x27;)) // 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 变为</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;</span> /&gt;</span></span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我在讲话&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">super</span>(props) <span class="comment">// 这个不用super接props也可以获取到，加了super与不加的区别在于this.props</span></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>) <span class="comment">// 打印实例自身的props，可以拿到；若没有super，undefined</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 总结：若不省略构造器，构造器是否接受props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">static</span> propsTypes = &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">speak</span>:<span class="title class_">PropTypes</span>.<span class="property">func</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 指定默认标签属性</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">static</span> defaultProps = &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>, <span class="comment">// sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">age</span>:<span class="number">18</span> <span class="comment">// 年龄默认值为18</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">               <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">               <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">           )</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="函数组件使用-props"><a href="#函数组件使用-props" class="headerlink" title="函数组件使用 props"></a>函数组件使用 props</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; name, age, sex &#125; = props;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 限制写在外面，它不像类式组件有static属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">propsTypes</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// props属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">// 加了isRequired表示名字必须传</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">// 限制性别为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>, <span class="comment">// 限制年龄为数值</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 指定默认标签属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>, <span class="comment">// sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 年龄默认值为18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 渲染到组件页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> /&gt;</span></span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="组件的第三个属性————ref"><a href="#组件的第三个属性————ref" class="headerlink" title="组件的第三个属性————ref"></a>组件的第三个属性————ref</h3><ul>
<li>ref 字符串形式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示左侧输入框数据——字符串方法</span></span></span><br><span class="line"><span class="language-javascript">    showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 不需要写的这么麻烦</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const input = document.getElementById(&#x27;input1&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(input.value)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">input1</span>); <span class="comment">// 这个是真实DOM了，所以可以</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input1 &#125; = <span class="variable language_">this</span>.<span class="property">refs</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input1.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input2 &#125; = <span class="variable language_">this</span>.<span class="property">refs</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input2.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ref回调方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示左侧输入框数据</span></span></span><br><span class="line"><span class="language-javascript">    showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 不需要写的这么麻烦</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const input = document.getElementById(&#x27;input1&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(input.value)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">input1</span>); <span class="comment">// 这个是真实DOM了，所以可以</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input1 &#125; = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input1.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input2 &#125; = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input2.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符串类型的ref不太推荐，存在效率问题，写多了效率不高</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;div&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#123;/* &lt;input type=&quot;text&quot; id=&quot;input1&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt; 可以不用写id，换成ref */&#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &lt;input type=&quot;text&quot; ref=&quot;input1&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧数据&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &lt;input type=&quot;text&quot; onBlur=&#123;this.showData2&#125; ref=&quot;input2&quot; placeholder=&quot;诗句焦点提示数据&quot;/&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#123;/* 只要写ref,就会放到Demo实例对象refs中 */&#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;(a)</span>=&gt;</span> &#123;console.log(a)&#125; &#125;placeholder=&quot;点击按钮提示数据&quot;/&gt; */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* 这个a,打印出来后是 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            ref属性当前所在的节点 */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;(a)</span>=&gt;</span> &#123;this.input1 = a&#125; &#125;placeholder=&quot;点击按钮提示数据&quot;/&gt; */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* 把a这个节点放在组件实例自身上 */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">ref</span>=<span class="string">&#123;(currentNode)</span> =&gt;</span> (this.input1 = currentNode)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            placeholder=&quot;点击按钮提示数据&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> (this.input2 = c)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            placeholder=&quot;失去焦点提示数据&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>回调 ref 中执行次数问题，回调函数形式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    showInfo = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input1 &#125; = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input1.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    changeWeather = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取原来的状态</span></span></span><br><span class="line"><span class="language-javascript">      state = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 更新状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isHot</span>: !isHot &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    saveInput = <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">input1</span> = c;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@&quot;</span>, c);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input1 = c;console.log(&#x27;@&#x27;,c)&#125;/&gt; */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* 解决第一次传入参数null，第二次会传入参数DOM元素 通过ref回调函数定义成class的绑定函数方式*/&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showInfo&#125;</span>&gt;</span>点我提示输入的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>点我切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            如果ref回调函数是以内联函数的方式定义的，在更新的过程中会被执行两次，第一次传入参数null，第二次会传入参数DOM元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            这是因为在每次渲染时会创建一个新的函数实例，所以react清空旧的ref并且设置新的</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            通过ref回调函数定义成class的绑定函数的方式可以避免上述问题</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>createRef 形式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点，但是该容器是专人专用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">    myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span></span><br><span class="line"><span class="language-javascript">    myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示左侧输入框数据</span></span></span><br><span class="line"><span class="language-javascript">    showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>); <span class="comment">// &#123;currrent:input&#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>); <span class="comment">// 拿的是这个input节点 &lt;input type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>); <span class="comment">// input框输入什么，这里显示什么</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示右侧输入框数据</span></span></span><br><span class="line"><span class="language-javascript">    showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>); <span class="comment">// input框输入什么，这里显示什么</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* input被存在this.myRef中 */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">ref</span>=<span class="string">&#123;this.myRef2&#125;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">          /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="react-中的事件处理"><a href="#react-中的事件处理" class="headerlink" title="react 中的事件处理"></a>react 中的事件处理</h2><ol>
<li>通过 onXXX 属性指定事件处理函数（注意大小写）</li>
</ol>
<ul>
<li>react 使用的是自定义（合成）事件，而不是使用的原生 DOM 事件————为了更好的兼容</li>
<li>react 中事件是通过事件委托方式处理的（委托给组件最外层元素）————为了高效</li>
</ul>
<ol start="2">
<li>通过 event.target 得到发生事件的 DOM 元素（不要过度使用 Refs,可以用这个代替）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">&#125;;</span><br><span class="line">showData = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 但像myref,在上述代码input中无法省略，因为这个</span></span><br></pre></td></tr></table></figure>

<h3 id="受控组件，非受控组件"><a href="#受控组件，非受控组件" class="headerlink" title="受控组件，非受控组件"></a>受控组件，非受控组件</h3><ul>
<li>非受控组件<br>通过手动操作 dom 方式获取文本框的值，文本框状态不受 react 组件的 state 中状态控制，直接通过原生 dom 获取输入框的值</li>
</ul>
<h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol>
<li>导入 createRef 函数</li>
<li>调用 createRef 函数，创建一个 ref 对象，存储到名为 msgRef 的实例属性中</li>
<li>为 input 添加 ref 属性，只为 msgRef</li>
<li>在按钮的事件处理程序中，通过 msgRef.current 即可拿到 input 对应的 dom 元素，而其中 msg.current.value 拿到的就是文本框的值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 这个实例属性可以自定义</span></span><br><span class="line">  msgRef = <span class="title function_">createyRef</span>();</span><br><span class="line">  getValue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过msgRef获取input value值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msgRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.msgRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getValue&#125;</span>&gt;</span>点击获取输入框的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这并不是 react 特有的行为，这其实与 javascript 函数工作原理有关。通常情况下，如果你没有在方法后面添加(),例如 onClick&#x3D;{this.handleClick},你应为这个方法绑定 this</p>
<ul>
<li>受控组件<br>input 框自己的状态被 react 组件控制<br>受控组件就是说可以被 react 动态控制的组件</li>
</ul>
<h4 id="实现步骤：-1"><a href="#实现步骤：-1" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol>
<li>在组件的 state 中声明一个组件的状态数据</li>
<li>将状态数据设置为 input 标签元素的 value 属性的值</li>
<li>为 input 添加 onchange 事件</li>
<li>在事件处理程序中，通过事件对象 e 获取到当前文本框的值（即用户当前输入的值）</li>
<li>调用 setState 方法，将文本框的值作为 state 状态的最新值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 声明一个用来控制input value属性的react组件自己的状态</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;this is a message&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 回调函数</span></span><br><span class="line">  inputChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;change事件触发了&quot;</span>, e);</span><br><span class="line">    <span class="comment">// 4. 需要在这里拿到输入框最新的值 交给state中的message</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// 2. 给input框的value属性绑定 react state</span></span><br><span class="line">      <span class="comment">// 3. 给input框绑定一个change事件 为了拿到当前输入框中的数据 （onchange指定事件回调）</span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;this.state.message&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;this.inputChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优化上述代码"><a href="#优化上述代码" class="headerlink" title="优化上述代码"></a>优化上述代码</h4><p>若有很多个 input，比如用户名，密码等等，总不能绑定一个又一个 onchange 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 声明一个用来控制input value属性的react组件自己的状态</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调函数</span></span><br><span class="line">    saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(dataType)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="comment">// 把saveFormData返回值返回的函数交给onchange作为回调</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="comment">// dataType:e.target.value // 这样写是往state中放了一个新的Key,在用户名输入的内容，会出现在dataType这个key后面；压根就没有读取</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 需要读取变量,变量用[]</span></span><br><span class="line">                [dataType]:e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表单提交的回调</span></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>() <span class="comment">// 阻止表单默认提交</span></span><br><span class="line">        <span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">`用户名是<span class="subst">$&#123;username&#125;</span>`</span>,密码是$&#123;password&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span></span><br><span class="line"><span class="language-xml">            密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="高阶函数和函数柯里化"><a href="#高阶函数和函数柯里化" class="headerlink" title="高阶函数和函数柯里化"></a>高阶函数和函数柯里化</h4><ol>
<li>上述 saveFormData 这就是高阶函数<br>高阶函数：<br>如果一个函数符合下面两个规范中的任何一个，那该函数就是高阶函数 1. 若 A 函数接收的参数是一个函数，那么 A 就可以称之为高阶函数 2. 若 A 函数调用的返回值依然是一个函数，那么 A 就可以称之为高阶函数<br>常见的高阶函数：<br>promise、setTimeout、arr.map()等等</li>
<li>函数柯里化<br>通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>

<h4 id="不用柯里化实现"><a href="#不用柯里化实现" class="headerlink" title="不用柯里化实现"></a>不用柯里化实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  saveFormData = (dataType,value) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     this.setState(&#123;[dataType]:value&#125;)</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// 精简代码</span></span><br><span class="line"> saveFormData = <span class="function">(<span class="params">dataType,e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:e.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">//    &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span></span><br><span class="line">    <span class="comment">//         用户名&lt;input type=&quot;text&quot;  onChange=&#123;(e) =&gt; &#123;this.saveFormData(&#x27;username&#x27;,e.target.value)&#125;&#125;/&gt;</span></span><br><span class="line">    <span class="comment">//         &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span></span><br><span class="line">    <span class="comment">//         密码&lt;input type=&quot;text&quot;  onChange=&#123;(e) =&gt; &#123;this.saveFormData(&#x27;password&#x27;,e.target.value)&#125;&#125;/&gt;</span></span><br><span class="line">    <span class="comment">//     &lt;/form&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;this.saveFormData(&#x27;username&#x27;,e)&#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span></span><br><span class="line"><span class="language-xml">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;this.saveFormData(&#x27;password&#x27;,e)&#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="react-生命周期"><a href="#react-生命周期" class="headerlink" title="react 生命周期"></a>react 生命周期</h2><p>生命周期回调函数 又叫 生命周期钩子函数 生命周期钩子 生命周期函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 要求2秒完全可见到消失</span></span></span><br><span class="line"><span class="language-javascript">    state = &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">    death = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 卸载组件前要先清除定时器，拿到定时器的id</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 卸载组件回调</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// ReactDOM.unmountComponent() // 若有很多个容器不能用这个</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件挂载完毕 后调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这个不需要像death一样，写一个箭头函数，因为它与render是兄弟，后期是通过Life的实例对象 .调用的</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取原状态,这里不能用const，const声明变量不可修改</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123; opacity &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 减小0.1</span></span></span><br><span class="line"><span class="language-javascript">        opacity -= <span class="number">0.1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (opacity &lt;= <span class="number">0</span>) opacity = <span class="number">1</span>; <span class="comment">// 为什么是&lt;=0因为在js中0.1+0.2不一定等于0.3</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置新的透明度</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; opacity &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件将要卸载</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// componentWillUnmount() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     这样清楚定时器也可以</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     clearInterval(this.timer)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// render调用的时机：初始化渲染，状态更新之后</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这样写代码直接卡死了，cpu一路飙升；因为设置更新状态，一更新状态就调render， 引发无限递归，多次调用render</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// setInterval(() =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     // 1. 获取原状态,这里不能用const，const声明变量不可修改</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     let &#123;opacity&#125; = this.state</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     // 减小0.1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     opacity -= 0.1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     if(opacity &lt;=0) opacity = 1 // 为什么是&lt;=0因为在js中0.1+0.2不一定等于0.3</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     // 设置新的透明度</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     this.setState (&#123;opacity&#125;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;,200)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* h2中写style=&#123;&#123;opacity:this.state.opacity&#125;&#125; */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>只要学不死，就往死里学<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>不活了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Life</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>组件是否应该被更新 shouldComponentUpdate<br>true 可以更新<br>false 不可以更新<br>不写这个钩子，默认 true</li>
<li>forceUpdate 强制更新<br>可以绕过 shouldComponentUpdate，直接进行更新</li>
</ul>
<h3 id="父组件-render"><a href="#父组件-render" class="headerlink" title="父组件 render"></a>父组件 render</h3><p>componentWillReceiveProps 这个第一次传的不算，以后传的才算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123; <span class="attr">carName</span>: <span class="string">&quot;宝马&quot;</span> &#125;;</span><br><span class="line">  changeCar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">carName</span>: <span class="string">&quot;奔驰&quot;</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;this.state.carName&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentWillReceiveProps</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B---componentWillReceiveProps&quot;</span>, props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是B组件，接收的车是:&#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>[AIA]</p>
<ol>
<li>初始化阶段: 由 ReactDoM.render()触发—初次渲染<br>constructor()<br>componentWillMount()<br>render()</li>
<li>componentDidMount()更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发<br>shouldComponentUpdate()componentwillUpdate()<br>render()<br>componentDidUpdate()</li>
<li>卸载组件:由 ReactDOM.unmountComponentAtNode()触发 componentwillUnmount()<br>新生命周期<br>去掉三个钩子，加了两个钩子<br>componentWillMount() componentwillUpdate() componentwillUnmount()</li>
</ol>
<ul>
<li>getDerivedStateFromProps:若 state 的值任何时候都取决于 props，可以使用</li>
<li>getSnapShotBeforeUpdate(preProps,preState,snapValue) 在更新前获取快照<br>在页面调完时拿到数据在处理时使用，此生命周期的任何返回值将作为参数传递给 componentDidUpdate</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>React学习</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/posts/7/</url>
    <content><![CDATA[<blockquote>
<h2 id="初识-TypeScript"><a href="#初识-TypeScript" class="headerlink" title="初识 TypeScript"></a>初识 TypeScript</h2></blockquote>
<hr>
<p><img src="/../assets/ts_img/TS-JS.png" alt="TS与JS.png"></p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab"><a href="#tabs-1">TypeScript 的介绍</a></li><li class="tab"><a href="#tabs-2">TypeScript 的特点</a></li><li class="tab"><a href="#tabs-3">安装Ts</a></li><li class="tab active"><a href="#tabs-4">总结</a></li></ul><div class="tab-content"><div class="tab-pane" id="tabs-1"><p><strong><font size=5>TypeScript 的介绍</font></strong></p>
<ul>
<li>TypeScript 是一种由微软开发的开源、跨平台的编程语言。它是 JavaScript 的超集，最终会被编译为 JavaScript 代码。</li>
<li>2012 年 10 月，微软发布了首个公开版本的 TypeScript，2013 年 6 月 19 日，在经历了一个预览版之后微软正式发布了正式版 TypeScript</li>
<li>TypeScript 的作者是安德斯·海尔斯伯格，C#的首席架构师。它是开源和跨平台的编程语言。</li>
<li>TypeScript 扩展了 JavaScript 的语法，所以任何现有的 JavaScript 程序可以运行在 TypeScript 环境中。</li>
<li>TypeScript 是为大型应用的开发而设计，并且可以编译为 JavaScript。</li>
<li>TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6+ 的支持**，它由 Microsoft 开发，代码开源于 GitHub 上</li>
</ul>
<p><strong>TypeScript 是 JavaScript 的一个超集</strong>，主要提供了<strong>类型系统</strong>和<strong>对 ES6+ 的支持</strong>，它由 Microsoft 开发，代码<a href="https://github.com/Microsoft/TypeScript">开源于 GitHub (opens new window)</a> 上</p></div><div class="tab-pane" id="tabs-2"><p><strong><font size=5>TypeScript 的特点</font></strong></p>
<p>TypeScript 主要有 3 大特点：</p>
<ul>
<li><strong>始于 JavaScript，归于 JavaScript</strong></li>
</ul>
<p>TypeScript 可以编译出纯净、 简洁的 JavaScript 代码，并且可以运行在任何浏览器上、Node.js 环境中和任何支持 ECMAScript 3（或更高版本）的 JavaScript 引擎中。</p>
<ul>
<li><strong>强大的类型系统</strong></li>
</ul>
<p><strong>类型系统</strong>允许 JavaScript 开发者在开发 JavaScript 应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构。</p>
<ul>
<li><strong>先进的 JavaScript</strong></li>
</ul>
<p>TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。</p></div><div class="tab-pane" id="tabs-3"><p><strong><font size=5>安装 Ts</font></strong></p>
<ul>
<li>命令行运行如下命令，全局安装 TypeScript：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<ul>
<li>安装完成后，在控制台运行如下命令，检查安装是否成功(3.x)：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tsc -V</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="tabs-4"><p><strong><font size=5>总结</font></strong></p>
<p>TypeScript 在社区的流行度越来越高，它非常适用于一些大型项目，也非常适用于一些基础库，极大地帮助我们提升了开发效率和体验。</p></div></div></div>

<blockquote>
<h2 id="第一个-TypeScript-程序"><a href="#第一个-TypeScript-程序" class="headerlink" title="第一个 TypeScript 程序"></a>第一个 TypeScript 程序</h2></blockquote>
<hr>
<h3 id="编写-TS-程序"><a href="#编写-TS-程序" class="headerlink" title="编写 TS 程序"></a>编写 TS 程序</h3><p>src&#x2F;helloworld.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&quot;Yee&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greeter</span>(user));</span><br></pre></td></tr></table></figure>

<h3 id="手动编译代码"><a href="#手动编译代码" class="headerlink" title="手动编译代码"></a>手动编译代码</h3><p>我们使用了 <code>.ts</code> 扩展名，但是这段代码仅仅是 JavaScript 而已。</p>
<p>在命令行上，运行 TypeScript 编译器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tsc helloworld.ts</span><br></pre></td></tr></table></figure>

<p>输出结果为一个 <code>helloworld.js</code> 文件，它包含了和输入文件中相同的 JavsScript 代码。</p>
<p>在命令行上，通过 Node.js 运行这段代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node helloworld.js</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Hello, Yee</span><br></pre></td></tr></table></figure>

<h3 id="vscode-自动编译"><a href="#vscode-自动编译" class="headerlink" title="vscode 自动编译"></a>vscode 自动编译</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1). 生成配置文件tsconfig.json</span><br><span class="line">    tsc --init</span><br><span class="line">2). 修改tsconfig.json配置</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">3). 启动监视任务:</span><br><span class="line">    终端 -&gt; 运行任务 -&gt; 监视tsconfig.json</span><br></pre></td></tr></table></figure>

<h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><p>接下来让我们看看 TypeScript 工具带来的高级功能。 给 <code>person</code> 函数的参数添加 <code>: string</code> 类型注解，如下：</p>
<p><img src="/../assets/ts_img/lxzs.png" alt="TS与JS.png"></p>
<p>TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式。 在这个例子里，我们希望 <code>greeter</code> 函数接收一个字符串参数。 然后尝试把 <code>greeter</code> 的调用改成传入一个数组：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greeter</span>(user));</span><br></pre></td></tr></table></figure>

<p>重新编译，你会看到产生了一个错误：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">error TS2345: Argument of <span class="built_in">type</span> <span class="string">&#x27;number[]&#x27;</span> is not assignable to parameter of <span class="built_in">type</span> <span class="string">&#x27;string&#x27;</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>类似地，尝试删除 <code>greeter</code> 调用的所有参数。 TypeScript 会告诉你使用了非期望个数的参数调用了这个函数。 在这两种情况中，TypeScript 提供了静态的代码分析，它可以分析代码结构和提供的类型注解。</p>
<p>要注意的是尽管有错误，<code>greeter.js</code> 文件还是被创建了。 就算你的代码里有错误，你仍然可以使用 TypeScript。但在这种情况下，TypeScript 会警告你代码可能不会按预期执行。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>让我们继续扩展这个示例应用。这里我们使用接口来描述一个拥有 <code>firstName</code> 和 <code>lastName</code> 字段的对象。 在 <code>TypeScript</code> 里，只在两个类型内部的结构兼容，那么这两个类型就是兼容的。 这就允许我们在实现接口时候只要保证包含了接口要求的结构就可以，而不必明确地使用 <code>implements</code> 语句。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 定义一个接口</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="built_in">string</span>; <span class="comment">// 姓氏</span></span><br><span class="line">    <span class="attr">lastName</span>: <span class="built_in">string</span>; <span class="comment">// 名字</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 输出姓名</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person: Person</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&quot;-&quot;</span> + person.<span class="property">lastName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个对象</span></span><br><span class="line">  <span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;东方&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;不败&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greeter</span>(user));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="Ts-中的类"><a href="#Ts-中的类" class="headerlink" title="Ts 中的类"></a>Ts 中的类</h3><p>最后，让我们使用类来改写这个例子。 TypeScript 支持 JavaScript 的新特性，比如支持基于类的面向对象编程。</p>
<p>让我们创建一个 <code>User</code> 类，它带有一个构造函数和一些公共字段。因为类的字段包含了接口所需要的字段，所以他们能很好的兼容。</p>
<p>还要注意的是，我在类的声明上会注明所有的成员变量，这样比较一目了然。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 定义一个接口</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="built_in">string</span>; <span class="comment">// 姓氏</span></span><br><span class="line">    <span class="attr">lastName</span>: <span class="built_in">string</span>; <span class="comment">// 名字</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 定义公共的字段(属性)</span></span><br><span class="line">    <span class="attr">firstName</span>: <span class="built_in">string</span>; <span class="comment">// 姓氏</span></span><br><span class="line">    <span class="attr">lastName</span>: <span class="built_in">string</span>; <span class="comment">// 名字</span></span><br><span class="line">    <span class="attr">fullName</span>: <span class="built_in">string</span>; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="comment">// 更新属性数据</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">      <span class="comment">// 姓名</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot;_&quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">showFullName</span>(<span class="params">person: IPerson</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&quot;-&quot;</span> + person.<span class="property">lastName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;诸葛&quot;</span>, <span class="string">&quot;孔明&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">showFullName</span>(person));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>重新运行 <code>tsc greeter.ts</code>，你会看到 TypeScript 里的类只是一个语法糖，本质上还是 <code>JavaScript</code> 函数的实现。</p>
<h3 id="使用-webpack-打包-TS"><a href="#使用-webpack-打包-TS" class="headerlink" title="使用 webpack 打包 TS"></a>使用 webpack 打包 TS</h3><h4 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add -D typescript</span><br><span class="line">yarn add -D webpack webpack-cli</span><br><span class="line">yarn add -D webpack-dev-server</span><br><span class="line">yarn add -D html-webpack-plugin clean-webpack-plugin</span><br><span class="line">yarn add -D ts-loader</span><br><span class="line">yarn add -D cross-env</span><br></pre></td></tr></table></figure>

<h4 id="入口-JS-src-x2F-main-ts"><a href="#入口-JS-src-x2F-main-ts" class="headerlink" title="入口 JS: src&#x2F;main.ts"></a>入口 JS: src&#x2F;main.ts</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import &#x27;./01_helloworld&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello Webpack TS!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="index-页面-public-x2F-index-html"><a href="#index-页面-public-x2F-index-html" class="headerlink" title="index 页面: public&#x2F;index.html"></a>index 页面: public&#x2F;index.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack &amp; TS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="build-x2F-webpack-config-js"><a href="#build-x2F-webpack-config-js" class="headerlink" title="build&#x2F;webpack.config.js"></a>build&#x2F;webpack.config.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> isProd = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>; <span class="comment">// 是否生产环境</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;..&quot;</span>, dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: isProd ? <span class="string">&quot;production&quot;</span> : <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&quot;./src/main.ts&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(<span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].[contenthash:8].js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line">        <span class="attr">include</span>: [<span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>)],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(&#123;&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.tsx&quot;</span>, <span class="string">&quot;.js&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devtool</span>: isProd ? <span class="string">&quot;cheap-module-source-map&quot;</span> : <span class="string">&quot;cheap-module-eval-source-map&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 主机名</span></span><br><span class="line">    <span class="attr">stats</span>: <span class="string">&quot;errors-only&quot;</span>, <span class="comment">// 打包日志输出输出错误信息</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8081</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="配置打包命令"><a href="#配置打包命令" class="headerlink" title="配置打包命令"></a>配置打包命令</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production webpack --config build/webpack.config.js&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="运行与打包"><a href="#运行与打包" class="headerlink" title="运行与打包"></a>运行与打包</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run  dev</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="Ts-中的数据类型及语法"><a href="#Ts-中的数据类型及语法" class="headerlink" title="Ts 中的数据类型及语法"></a>Ts 中的数据类型及语法</h2></blockquote>
<hr>
<h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a><code>布尔值</code></h4><p>最基本的数据类型就是简单的 true&#x2F;false 值，在 JavaScript 和 TypeScript 里叫做 <code>boolean</code>（其它语言中也一样）。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="comment">// let 变量名:数据类型 = 值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">flag</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// flag = 1 如果给的值不是布尔类型则会编译错误</span></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag);</span><br></pre></td></tr></table></figure>

<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a><code>数字</code></h4><p>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015 中引入的二进制和八进制字面量。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="comment">// let 变量名:数据类型 = 值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a1</span>: <span class="built_in">number</span> = <span class="number">10</span>; <span class="comment">// 十进制 10</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a2</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>; <span class="comment">// 二进制 0b开头 10</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a3</span>: <span class="built_in">number</span> = <span class="number">0o12</span>; <span class="comment">// 八进制 0o开头 10</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a4</span>: <span class="built_in">number</span> = <span class="number">0xa</span>; <span class="comment">// 十六进制 0x开头 10</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><code>字符串</code></h4><p>JavaScript 程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code> 表示文本数据类型。 和 JavaScript 一样，可以使用双引号（<code>&quot;</code>）或单引号（<code>&#39;</code>）表示字符串。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="comment">// let 变量名:数据类型 = 值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;孔明&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;诸葛&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> username = <span class="string">`<span class="subst">$&#123;name&#125;</span>孔明`</span>;</span><br><span class="line"><span class="comment">// name = 12 // error</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> info = <span class="string">`<span class="subst">$&#123;username&#125;</span>的年龄:<span class="subst">$&#123;age&#125;</span>`</span>; <span class="comment">// 和数字拼接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info); <span class="comment">// 诸葛孔明的年龄:12</span></span><br></pre></td></tr></table></figure>

<hr>
<details class="note "><summary><p>red fas fa-bullhorn</p>
</summary>
<p>📖 Ts 中变量一开始是什么类型,那么后期赋值的时候,只能用这个类型的数据,是不允许用其他类型的数据赋值给当前的这个变量中</p>
<p>🦋 如: let str: string &#x3D;真香 | str&#x3D;10 ,没有武德(不允许)</p>

</details>

<hr>
<h4 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a><code>undefined 和 null</code></h4><p>TypeScript 里，<code>undefined</code> 和 <code>null</code> 两者各自有自己的类型分别叫做 <code>undefined</code> 和 <code>null</code>。 它们的本身的类型用处不是很大：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">und</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">nll</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(und);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nll);</span><br><span class="line"><span class="comment">// undefined 和null 都可以作为其他类型的子类型，把undefined和null赋值给其他类型的变量;如：number类型的变量</span></span><br><span class="line"><span class="comment">// 需要关闭tsconfig.json中的严格模式</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: <span class="built_in">number</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br></pre></td></tr></table></figure>

<p>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a><code>数组</code></h4><p>TypeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在<code>元素类型后面接上[]</code>，表示由此类型元素组成的一个数组：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法：let 变量名:数据类型[] = [值1，值2，值3]</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="comment">// let arr:number[] = [1,2,3,&#x27;4&#x27;]// 会报错，因为数组中有字符串，而数据类型是number</span></span><br><span class="line"><span class="comment">// 不能将类型“string”分配给类型“number”。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>

<p>第二种方式是使用数组泛型，<code>Array&lt;元素类型&gt;</code>：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法：let 变量名:Array&lt;数据类型&gt; = [值1，值2，值3]</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"><span class="comment">// 注意问题：数组定义后，里面的数据的类型必须和定义数组的时候的类型是一致的，否则有错误提示信息，也不会编译通过的</span></span><br></pre></td></tr></table></figure>

<h4 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a><code>元组 Tuple</code></h4><p>元组类型允许表示一个已知元素数量和类型的数组，<code>各元素的类型不必相同</code>。 比如，你可以定义一对值分别为 <code>string</code> 和 <code>number</code> 类型的元组。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元组类型:在定义数组的时候，类型和数据的个数一开始就已经限定了</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>] = [<span class="string">&quot;小鸡&quot;</span>, <span class="number">100</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"><span class="comment">// 注意问题:元组类型在使用的时候，数据的类型的位置和数据的个数，应该和定义元组的时候的数据类型及位置应该是一致的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// [&#x27;小&#x27;, &#x27;鸡&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">1</span>].<span class="title function_">toFixed</span>(<span class="number">2</span>)); <span class="comment">// 100.00</span></span><br></pre></td></tr></table></figure>

<p>当访问一个已知索引的元素，会得到正确的类型：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t1[<span class="number">0</span>].<span class="title function_">substring</span>(<span class="number">1</span>)); <span class="comment">// OK</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t1[<span class="number">1</span>].<span class="title function_">substring</span>(<span class="number">1</span>)); <span class="comment">// Error, &#x27;number&#x27; 不存在 &#x27;substring&#x27; 方法</span></span><br></pre></td></tr></table></figure>

<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><code>枚举</code></h4><p><code>enum</code> 类型是对 JavaScript 标准数据类型的一个补充。 使用枚举类型可以<code>为一组数值赋予友好的名字</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举数值默认从0开始依次递增</span></span><br><span class="line"><span class="comment">// 根据特定的名称得到对应的枚举数值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myColor</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myColor, <span class="title class_">Color</span>.<span class="property">Red</span>, <span class="title class_">Color</span>.<span class="property">Blue</span>);</span><br></pre></td></tr></table></figure>

<p>默认情况下，从 <code>0</code> 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 <code>1</code> 开始编号：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>或者，全部都采用手动赋值：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure>

<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">colorName</span>: <span class="built_in">string</span> = <span class="title class_">Color</span>[<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colorName); <span class="comment">// &#x27;Green&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="any"><a href="#any" class="headerlink" title="any"></a><code>any</code></h4><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code> 类型来标记这些变量：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&quot;maybe a string&quot;</span>;</span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// 也可以是个 boolean</span></span><br></pre></td></tr></table></figure>

<p>在对现有代码进行改写的时候，<code>any</code> 类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。并且当你只知道一部分数据的类型时，<code>any</code> 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&quot;free&quot;</span>];</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h4 id="void"><a href="#void" class="headerlink" title="void"></a><code>void</code></h4><p>某种程度上来说，<code>void</code> 类型像是与 <code>any</code> 类型相反，它<code>表示没有任何类型</code>。 当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code>：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 表示没有任何类型, 一般用来说明函数的返回值不能是undefined和null之外的值 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn()&quot;</span>);</span><br><span class="line">  <span class="comment">// return undefined</span></span><br><span class="line">  <span class="comment">// return null</span></span><br><span class="line">  <span class="comment">// return 1 // error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明一个 <code>void</code> 类型的变量没有什么大用，因为你只能为它赋予 <code>undefined</code> 和 <code>null</code>：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>

<h4 id="object"><a href="#object" class="headerlink" title="object"></a><code>object</code></h4><p><code>object</code> 表示非原始类型，也就是除 <code>number</code>，<code>string</code>，<code>boolean</code>之外的类型。</p>
<p>使用 <code>object</code> 类型，就可以更好的表示像 <code>Object.create</code> 这样的 <code>API</code>。例如：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">obj: <span class="built_in">object</span></span>): <span class="built_in">object</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2()&quot;</span>, obj);</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  <span class="comment">// return undefined</span></span><br><span class="line">  <span class="comment">// return null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn2</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>)));</span><br><span class="line"><span class="comment">// console.log(fn2(&#x27;abc&#x27;) // error</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn2</span>(<span class="title class_">String</span>));</span><br></pre></td></tr></table></figure>

<h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a><code>联合类型</code></h4><p>联合类型（Union Types）表示取值可以为多种类型中的一种<br>需求 1: 定义一个一个函数得到一个数字或字符串值的字符串形式值</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toString2</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需求 2: 定义一个一个函数得到一个数字或字符串值的长度</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="comment">// return x.length // error</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">    <span class="keyword">return</span> x.<span class="property">length</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">toString</span>().<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a><code>类型断言</code></h4><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查。</p>
<p>类型断言有两种形式。 其一是“尖括号”语法, 另一个为 <code>as</code> 语法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类型断言(Type Assertion): 可以用来手动指定一个值的类型</span></span><br><span class="line"><span class="comment">语法:</span></span><br><span class="line"><span class="comment">    方式一: &lt;类型&gt;值</span></span><br><span class="line"><span class="comment">    方式二: 值 as 类型  tsx中只能用这种方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 需求: 定义一个函数得到一个字符串或者数值数据的长度 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;x).<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (x <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">toString</span>().<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getLength</span>(<span class="string">&quot;abcd&quot;</span>), <span class="title function_">getLength</span>(<span class="number">1234</span>));</span><br></pre></td></tr></table></figure>

<h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a><code>类型推断</code></h4><p>类型推断: TS 会在没有明确的指定类型的时候推测出一个类型<br>有下面 2 种情况: 1. 定义变量时赋值了, 推断为对应的类型. 2. 定义变量时没有赋值, 推断为 any 类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义变量时赋值了, 推断为对应的类型 */</span></span><br><span class="line"><span class="keyword">let</span> b9 = <span class="number">123</span>; <span class="comment">// number</span></span><br><span class="line"><span class="comment">// b9 = &#x27;abc&#x27; // error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义变量时没有赋值, 推断为any类型 */</span></span><br><span class="line"><span class="keyword">let</span> b10; <span class="comment">// any类型</span></span><br><span class="line">b10 = <span class="number">123</span>;</span><br><span class="line">b10 = <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（Interfaces）来定义对象的类型。<code>接口是对象的状态(属性)和行为(方法)的抽象(描述)</code></p>
<h4 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h4><p>需求: 创建人的对象, 需要对人的属性进行一定的约束</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">id是<span class="built_in">number</span>类型, 必须有, 只读的;</span><br><span class="line">name是<span class="built_in">string</span>类型, 必须有;</span><br><span class="line">age是<span class="built_in">number</span>类型, 必须有;</span><br><span class="line">sex是<span class="built_in">string</span>类型, 可以没有;</span><br></pre></td></tr></table></figure>

<p>下面通过一个简单示例来观察接口是如何工作的：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型</span></span><br><span class="line"><span class="comment">接口: 是对象的状态(属性)和行为(方法)的抽象(描述)</span></span><br><span class="line"><span class="comment">接口类型的对象</span></span><br><span class="line"><span class="comment">    多了或者少了属性是不允许的</span></span><br><span class="line"><span class="comment">    可选属性: ?</span></span><br><span class="line"><span class="comment">    只读属性: readonly</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求: 创建人的对象, 需要对人的属性进行一定的约束</span></span><br><span class="line"><span class="comment">  id是number类型, 必须有, 只读的</span></span><br><span class="line"><span class="comment">  name是string类型, 必须有</span></span><br><span class="line"><span class="comment">  age是number类型, 必须有</span></span><br><span class="line"><span class="comment">  sex是string类型, 可以没有</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义人的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person1</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>类型检查器会查看对象内部的属性是否与 IPerson 接口描述一致, 如果不一致就会提示类型错误。</p>
<h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  sex?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code> 符号。</p>
<p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">person2</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="comment">// sex: &#x27;男&#x27; // 可以没有</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code> 来指定只读属性:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  sex?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦赋值后再也不能被改变了。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">person2</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="comment">// sex: &#x27;男&#x27; // 可以没有</span></span><br><span class="line">  <span class="comment">// xxx: 12 // error 没有在接口中定义, 不能有</span></span><br><span class="line">&#125;;</span><br><span class="line">person2.<span class="property">id</span> = <span class="number">2</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<ul>
<li>readonly vs const</li>
</ul>
<p>最简单判断该用 <code>readonly</code> 还是 <code>const</code> 的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code>，若做为属性则使用 <code>readonly</code>。</p>
<h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><p>接口能够描述 JavaScript 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p>
<p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口可以描述函数类型(参数的类型与返回的类型)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样定义后，我们可以像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span> = <span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">search</span>(sub) &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mySearch</span>(<span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>))####</span><br></pre></td></tr></table></figure>

<h4 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h4><ul>
<li>类实现接口</li>
</ul>
<p>与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类类型: 实现接口</span></span><br><span class="line"><span class="comment">1. 一个类可以实现多个接口</span></span><br><span class="line"><span class="comment">2. 一个接口可以继承多个接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Light</span> &#123;</span><br><span class="line">  <span class="title function_">lightOn</span>(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">lightOff</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Car alert&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="一个类可以实现多个接口"><a href="#一个类可以实现多个接口" class="headerlink" title="一个类可以实现多个接口"></a>一个类可以实现多个接口</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car2</span> <span class="keyword">implements</span> <span class="title class_">Alarm</span>, <span class="title class_">Light</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Car alert&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">lightOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Car light on&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">lightOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Car light off&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h4><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">LightableAlarm</span> <span class="keyword">extends</span> <span class="title class_">Alarm</span>, <span class="title class_">Light</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>对于传统的 JavaScript 程序我们会使用<code>函数</code>和<code>基于原型的继承</code>来创建可重用的组件，但对于熟悉使用面向对象方式的程序员使用这些语法就有些棘手，因为他们用的是<code>基于类的继承</code>并且对象是由类构建出来的。 从 ECMAScript 2015，也就是 ES6 开始， JavaScript 程序员将能够使用基于类的面向对象的方式。 使用 TypeScript，我们允许开发者现在就使用这些特性，并且编译后的 JavaScript 可以在所有主流浏览器和平台上运行，而不需要等到下个 JavaScript 版本。</p>
<h4 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h4><p>下面看一个使用类的例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">类的基本定义与使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="comment">// 声明属性</span></span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">message</span> = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一般方法</span></span><br><span class="line">  <span class="title function_">greet</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建类的实例</span></span><br><span class="line"><span class="keyword">const</span> greeter = <span class="keyword">new</span> <span class="title class_">Greeter</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">// 调用实例的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeter.<span class="title function_">greet</span>());</span><br></pre></td></tr></table></figure>

<p>如果你使用过 C# 或 Java，你会对这种语法非常熟悉。 我们声明一个 <code>Greeter</code> 类。这个类有 3 个成员：一个叫做 <code>message</code> 的属性，一个构造函数和一个 <code>greet</code> 方法。</p>
<p>你会注意到，我们在引用任何一个类成员的时候都用了 <code>this</code>。 它表示我们访问的是类的成员。</p>
<p>后面一行，我们使用 <code>new</code> 构造了 <code>Greeter</code> 类的一个实例。它会调用之前定义的构造函数，创建一个 <code>Greeter</code> 类型的新对象，并执行构造函数初始化它。</p>
<p>最后一行通过 <code>greeter</code> 对象调用其 <code>greet</code> 方法</p>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>在 TypeScript 里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。</p>
<p>看下面的例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">类的继承</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params">distance: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Animal run <span class="subst">$&#123;distance&#125;</span>m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">cry</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wang! wang!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.<span class="title function_">cry</span>();</span><br><span class="line">dog.<span class="title function_">run</span>(<span class="number">100</span>); <span class="comment">// 可以调用从父中继承得到的方法</span></span><br></pre></td></tr></table></figure>

<p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里，<code>Dog</code> 是一个 派生类，它派生自 <code>Animal</code> 基类，通过 <code>extends</code> 关键字。 派生类通常被称作<em>子类</em>，基类通常被称作<em>超类</em>。</p>
<p>因为 <code>Dog</code> 继承了 <code>Animal</code> 的功能，因此我们可以创建一个 <code>Dog</code> 的实例，它能够 <code>cry()</code> 和 <code>run()</code>。</p>
<p>下面我们来看个更加复杂的例子。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> run <span class="subst">$&#123;distance&#125;</span>m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 调用父类型构造方法</span></span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写父类型的方法</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">5</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sliding...&quot;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">run</span>(distance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Horse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 调用父类型构造方法</span></span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写父类型的方法</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">50</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dashing...&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用父类型的一般方法</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">run</span>(distance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">xxx</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xxx()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> snake = <span class="keyword">new</span> <span class="title class_">Snake</span>(<span class="string">&quot;sn&quot;</span>);</span><br><span class="line">snake.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> horse = <span class="keyword">new</span> <span class="title class_">Horse</span>(<span class="string">&quot;ho&quot;</span>);</span><br><span class="line">horse.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类型引用指向子类型的实例 ==&gt; 多态</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">tom</span>: <span class="title class_">Animal</span> = <span class="keyword">new</span> <span class="title class_">Horse</span>(<span class="string">&quot;ho22&quot;</span>);</span><br><span class="line">tom.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果子类型没有扩展的方法, 可以让子类型引用指向父类型的实例 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">tom3</span>: <span class="title class_">Snake</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;tom3&quot;</span>);</span><br><span class="line">tom3.<span class="title function_">run</span>();</span><br><span class="line"><span class="comment">/* 如果子类型有扩展的方法, 不能让子类型引用指向父类型的实例 */</span></span><br><span class="line"><span class="comment">// const tom2: Horse = new Animal(&#x27;tom2&#x27;)</span></span><br><span class="line"><span class="comment">// tom2.run()</span></span><br></pre></td></tr></table></figure>

<p>这个例子展示了一些上面没有提到的特性。 这一次，我们使用 <code>extends</code> 关键字创建了 Animal 的两个子类：<code>Horse</code> 和 <code>Snake</code>。</p>
<p>与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 <code>super()</code>，它会执行基类的构造函数。 而且，在构造函数里访问 <code>this</code> 的属性之前，我们 一定要调用 <code>super()</code>。 这个是 TypeScript 强制执行的一条重要规则。</p>
<p>这个例子演示了如何在子类里可以重写父类的方法。<code>Snake</code>类和 <code>Horse</code> 类都创建了 <code>run</code> 方法，它们重写了从 <code>Animal</code> 继承来的 <code>run</code> 方法，使得 <code>run</code> 方法根据不同的类而具有不同的功能。注意，即使 <code>tom</code> 被声明为 <code>Animal</code> 类型，但因为它的值是 <code>Horse</code>，调用 <code>tom.run(34)</code> 时，它会调用 <code>Horse</code> 里重写的方法。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">sliding...</span><br><span class="line">sn run 5m</span><br><span class="line">dashing...</span><br><span class="line">ho run 50m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h4><ul>
<li>默认为 public</li>
</ul>
<p>在上面的例子里，我们可以自由的访问程序里定义的成员。 如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用 <code>public</code> 来做修饰；例如，C# 要求必须明确地使用 <code>public</code> 指定成员是可见的。 在 TypeScript 里，成员都默认为 <code>public</code>。</p>
<p>你也可以明确的将一个成员标记成 <code>public</code>。 我们可以用下面的方式来重写上面的 <code>Animal</code> 类：</p>
<ul>
<li>理解 private</li>
</ul>
<p>当成员被标记成 <code>private</code> 时，它就不能在声明它的类的外部访问。</p>
<ul>
<li>理解 protected</li>
</ul>
<p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问。例如：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">访问修饰符: 用来描述类内部的属性/方法的可访问性</span></span><br><span class="line"><span class="comment">  public: 默认值, 公开的外部也可以访问</span></span><br><span class="line"><span class="comment">  private: 只能类内部可以访问</span></span><br><span class="line"><span class="comment">  protected: 类内部和子类可以访问</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">run</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> run <span class="subst">$&#123;distance&#125;</span>m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">sex</span>: <span class="built_in">string</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">5</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Person jumping...&quot;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">run</span>(distance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">6</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Student jumping...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">sex</span>); <span class="comment">// 子类能看到父类中受保护的成员</span></span><br><span class="line">    <span class="comment">// console.log(this.age) //  子类看不到父类中私有的成员</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">run</span>(distance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;abc&quot;</span>).<span class="property">name</span>); <span class="comment">// 公开的可见</span></span><br><span class="line"><span class="comment">// console.log(new Person(&#x27;abc&#x27;).sex) // 受保护的不可见</span></span><br><span class="line"><span class="comment">// console.log(new Person(&#x27;abc&#x27;).age) //  私有的不可见</span></span><br></pre></td></tr></table></figure>

<h4 id="readonly-修饰符"><a href="#readonly-修饰符" class="headerlink" title="readonly 修饰符"></a>readonly 修饰符</h4><p>你可以使用 <code>readonly</code> 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="comment">// john.name = &#x27;peter&#x27; // error</span></span><br></pre></td></tr></table></figure>

<ul>
<li>参数属性</li>
</ul>
<p>在上面的例子中，我们必须在 <code>Person</code> 类里定义一个只读成员 <code>name</code> 和一个参数为 <code>name</code> 的构造函数，并且立刻将 <code>name</code> 的值赋给 <code>this.name</code>，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 <code>Person</code> 类的修改版，使用了参数属性：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">readonly</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<p>注意看我们是如何舍弃参数 <code>name</code>，仅在构造函数里使用 <code>readonly name: string</code> 参数来创建和初始化 <code>name</code> 成员。 我们把声明和赋值合并至一处。</p>
<p>参数属性通过给构造函数参数前面添加一个访问限定符来声明。使用 <code>private</code> 限定一个参数属性会声明并初始化一个私有成员；对于 <code>public</code> 和 <code>protected</code> 来说也是一样。</p>
<h4 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h4><p><code>TypeScript</code> 支持通过 <code>getters/setters</code> 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。</p>
<p>下面来看如何把一个简单的类改写成使用 <code>get</code> 和 <code>set</code>。 首先，我们从一个没有使用存取器的例子开始。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span> = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span> = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot;-&quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> names = value.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastName</span> = names[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">fullName</span>);</span><br><span class="line"></span><br><span class="line">p.<span class="property">firstName</span> = <span class="string">&quot;C&quot;</span>;</span><br><span class="line">p.<span class="property">lastName</span> = <span class="string">&quot;D&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">fullName</span>);</span><br><span class="line"></span><br><span class="line">p.<span class="property">fullName</span> = <span class="string">&quot;E-F&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">firstName</span>, p.<span class="property">lastName</span>);</span><br></pre></td></tr></table></figure>

<h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><p>到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。 我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。 在这个例子里，我们使用 <code>static</code> 定义 <code>origin</code>，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在 <code>origin</code> 前面加上类名。 如同在实例属性上使用 <code>this.xxx</code> 来访问属性一样，这里我们使用 <code>Grid.xxx</code> 来访问静态属性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">静态属性, 是类对象的属性</span></span><br><span class="line"><span class="comment">非静态属性, 是类的实例对象的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name1</span>: <span class="built_in">string</span> = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">name2</span>: <span class="built_in">string</span> = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person</span>().<span class="property">name1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类做为其它派生类的基类使用。 它们不能被实例化。不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">抽象类</span></span><br><span class="line"><span class="comment">  不能创建实例对象, 只有实现类才能创建实例</span></span><br><span class="line"><span class="comment">  可以包含未实现的抽象方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">cry</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">cry</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; Dog cry()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.<span class="title function_">cry</span>();</span><br><span class="line">dog.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。</p>
<h4 id="基本示例-1"><a href="#基本示例-1" class="headerlink" title="基本示例"></a>基本示例</h4><p>和 JavaScript 一样，TypeScript 函数可以创建有名字的函数和匿名函数。你可以随意选择适合应用程序的方式，不论是定义一系列 API 函数还是只使用一次的函数。</p>
<p>通过下面的例子可以迅速回想起这两种 JavaScript 中的函数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命名函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="函数类型-1"><a href="#函数类型-1" class="headerlink" title="函数类型"></a>函数类型</h4><ul>
<li>为函数定义类型</li>
</ul>
<p>让我们为上面那个函数添加类型：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。TypeScript 能够根据返回语句自动推断出返回值类型。</p>
<ul>
<li>书写完整函数类型</li>
</ul>
<p>现在我们已经为函数指定了类型，下面让我们写出函数的完整类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myAdd2</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  x: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  y: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h4><p>TypeScript 里的每个函数参数都是必须的。 这不是指不能传递 <code>null</code> 或 <code>undefined</code> 作为参数，而是说编译器检查用户是否为每个参数都传入了值。编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。</p>
<p>JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 <code>undefined</code>。 在 TypeScript 里我们可以在参数名旁使用 <code>?</code> 实现可选参数的功能。 比如，我们想让 <code>lastName</code> 是可选的：</p>
<p>在 TypeScript 里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 <code>undefined</code> 时。 它们叫做有默认初始化值的参数。 让我们修改上例，把<code>firstName</code> 的默认值设置为 <code>&quot;A&quot;</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span> = <span class="string">&quot;A&quot;</span>, lastName?: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot;-&quot;</span> + lastName;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">buildName</span>(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">buildName</span>(<span class="string">&quot;C&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">buildName</span>());</span><br></pre></td></tr></table></figure>

<ul>
<li>剩余参数</li>
</ul>
<p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用 <code>arguments</code> 来访问所有传入的参数。</p>
<p>在 TypeScript 里，你可以把所有参数收集到一个变量里：<br>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ <code>...</code>）后面给定的名字，你可以在函数体内使用这个数组。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">info</span>(<span class="params">x: <span class="built_in">string</span>, ...args: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">info</span>(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>函数重载: 函数名相同, 而形参不同的多个函数<br>在 JS 中, 由于弱类型的特点和形参与实参可以不匹配, 是没有函数重载这一说的 但在 TS 中, 与其它面向对象的语言(如 Java)就存在此语法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">函数重载: 函数名相同, 而形参不同的多个函数</span></span><br><span class="line"><span class="comment">需求: 我们有一个add函数，它可以接收2个string类型的参数进行拼接，也可以接收2个number类型的参数进行相加 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">string</span>, y: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span>, y: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">// 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 x + y</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;number&quot;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>));</span><br><span class="line"><span class="comment">// console.log(add(1, &#x27;a&#x27;)) // error</span></span><br></pre></td></tr></table></figure>

<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。</p>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>下面创建一个函数, 实现功能: 根据指定的数量 <code>count</code> 和数据 <code>value</code> , 创建一个包含 <code>count</code> 个 <code>value</code> 的数组 不用泛型的话，这个函数可能是下面这样：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params">value: <span class="built_in">any</span>, count: <span class="built_in">number</span></span>): <span class="built_in">any</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">arr</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; count; index++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="title function_">createArray</span>(<span class="number">11</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title function_">createArray</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">0</span>].<span class="title function_">toFixed</span>(), arr2[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="使用函数泛型"><a href="#使用函数泛型" class="headerlink" title="使用函数泛型"></a>使用函数泛型</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> createArray2&lt;T&gt;(<span class="attr">value</span>: T, <span class="attr">count</span>: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;T&gt; = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; count; index++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr3 = createArray2&lt;<span class="built_in">number</span>&gt;(<span class="number">11</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3[<span class="number">0</span>].<span class="title function_">toFixed</span>());</span><br><span class="line"><span class="comment">// console.log(arr3[0].split(&#x27;&#x27;)) // error</span></span><br><span class="line"><span class="keyword">const</span> arr4 = createArray2&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;aa&quot;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">// console.log(arr4[0].toFixed()) // error</span></span><br></pre></td></tr></table></figure>

<h4 id="多个泛型参数的函数"><a href="#多个泛型参数的函数" class="headerlink" title="多个泛型参数的函数"></a>多个泛型参数的函数</h4><p>一个函数可以定义多个泛型参数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> swap&lt;K, V&gt;(<span class="attr">a</span>: K, <span class="attr">b</span>: V): [K, V] &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = swap&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;(<span class="string">&quot;abc&quot;</span>, <span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>].<span class="property">length</span>, result[<span class="number">1</span>].<span class="title function_">toFixed</span>());</span><br></pre></td></tr></table></figure>

<h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>在定义接口时, 为接口中的属性或方法定义泛型类型<br>在使用接口时, 再指定具体的泛型类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IbaseCRUD</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T[];</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">t: T</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">getById</span>: <span class="function">(<span class="params">id: <span class="built_in">number</span></span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  id?: <span class="built_in">number</span>; <span class="comment">//id主键自增</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">//姓名</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>; <span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserCRUD</span> <span class="keyword">implements</span> <span class="title class_">IbaseCRUD</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">User</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    user = &#123; ...user, <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(user);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;保存user&quot;</span>, user.<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getById</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userCRUD = <span class="keyword">new</span> <span class="title class_">UserCRUD</span>();</span><br><span class="line">userCRUD.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">12</span>));</span><br><span class="line">userCRUD.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tom2&quot;</span>, <span class="number">13</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userCRUD.<span class="property">data</span>);</span><br></pre></td></tr></table></figure>

<h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>在定义类时, 为类中的属性或方法定义泛型类型 在创建类的实例时, 再指定特定的泛型类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericString = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">myGenericString.<span class="property">zeroValue</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">myGenericString.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myGenericString.<span class="title function_">add</span>(myGenericString.<span class="property">zeroValue</span>, <span class="string">&quot;test&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myGenericNumber.<span class="title function_">add</span>(myGenericNumber.<span class="property">zeroValue</span>, <span class="number">12</span>));</span><br></pre></td></tr></table></figure>

<h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><p>如果我们直接对一个泛型参数取 <code>length</code> 属性, 会报错, 因为这个泛型根本就不知道它有这个属性</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有泛型约束</span></span><br><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">x</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(x.length)  // error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以使用泛型约束来实现</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定泛型约束</span></span><br><span class="line"><span class="keyword">function</span> fn2&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">x</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们需要传入符合约束类型的值，必须包含必须 <code>length</code> 属性：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn2</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">// fn2(123) // error  number没有length属性</span></span><br></pre></td></tr></table></figure>

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h4><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能</p>
<p>什么是声明语句</p>
<p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <code>&lt;script&gt;</code> 标签引入 <code>jQuery</code>，然后就可以使用全局变量 <code>$</code> 或 <code>jQuery</code> 了。</p>
<p>但是在 ts 中，编译器并不知道 $ 或 jQuery 是什么东西</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</span></span><br><span class="line"><span class="comment">声明语句: 如果需要ts对新的语法进行检查, 需要要加载了对应的类型说明代码</span></span><br><span class="line"><span class="comment">  declare var jQuery: (selector: string) =&gt; any;</span></span><br><span class="line"><span class="comment">声明文件: 把声明语句放到一个单独的文件（jQuery.d.ts）中, ts会自动解析到项目中所有声明文件</span></span><br><span class="line"><span class="comment">下载声明文件: npm install @types/jquery --save-dev</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">jQuery</span>(<span class="string">&quot;#foo&quot;</span>);</span><br><span class="line"><span class="comment">// ERROR: Cannot find name &#x27;jQuery&#x27;.</span></span><br></pre></td></tr></table></figure>

<p>这时，我们需要使用 declare var 来定义它的类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">jQuery</span>: <span class="function">(<span class="params">selector: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jQuery</span>(<span class="string">&quot;#foo&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>declare var 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。它编译结果是：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">jQuery</span>(<span class="string">&quot;#foo&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>一般声明文件都会单独写成一个 <code>xxx.d.ts</code> 文件</p>
<p>创建 <code>01_jQuery.d.ts</code>, 将声明语句定义其中, TS 编译器会扫描并加载项目中所有的 TS 声明文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">jQuery</span>: <span class="function">(<span class="params">selector: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br></pre></td></tr></table></figure>

<p>很多的第三方库都定义了对应的声明文件库, 库文件名一般为 <code>@types/xxx</code>, 可以在 <code>https://www.npmjs.com/package/package</code> 进行搜索</p>
<p>有的第三库在下载时就会自动下载对应的声明文件库(比如: webpack),有的可能需要单独下载(比如 jQuery&#x2F;react)</p>
<h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p>
<p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p>
<ol>
<li>ECMAScript 的内置对象</li>
</ol>
<ul>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Date</li>
<li>RegExp</li>
<li>Error</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. ECMAScript 的内置对象 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error message&quot;</span>);</span><br><span class="line">b = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// let bb: boolean = new Boolean(2)  // error</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>BOM 和 DOM 的内置对象</li>
</ol>
<ul>
<li>Window</li>
<li>Document</li>
<li>HTMLElement</li>
<li>DocumentFragment</li>
<li>Event</li>
<li>NodeList</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">div</span>: <span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">divs</span>: <span class="title class_">NodeList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(event.<span class="property">target</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">fragment</span>: <span class="title class_">DocumentFragment</span> = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>Ts学习</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/posts/1/</url>
    <content><![CDATA[<p><img src="/../assets/images/welcome.png"></p>
<h2 id="“永远不要失去浪漫的能力”。"><a href="#“永远不要失去浪漫的能力”。" class="headerlink" title="“永远不要失去浪漫的能力”。"></a>“永远不要失去浪漫的能力”。</h2><h4 id="这个浪漫不单单是指恋爱，更多的是："><a href="#这个浪漫不单单是指恋爱，更多的是：" class="headerlink" title="这个浪漫不单单是指恋爱，更多的是："></a>这个浪漫不单单是指恋爱，更多的是：</h4><h4 id="对于世界的好奇和探索，阅读和书写，天真的想法和骨子里的善良，"><a href="#对于世界的好奇和探索，阅读和书写，天真的想法和骨子里的善良，" class="headerlink" title="对于世界的好奇和探索，阅读和书写，天真的想法和骨子里的善良，"></a>对于世界的好奇和探索，阅读和书写，天真的想法和骨子里的善良，</h4><h4 id="对于生活必要的仪式感，以及拥有对恶意和黑暗的事物抱有愤怒和反抗的能力"><a href="#对于生活必要的仪式感，以及拥有对恶意和黑暗的事物抱有愤怒和反抗的能力" class="headerlink" title="对于生活必要的仪式感，以及拥有对恶意和黑暗的事物抱有愤怒和反抗的能力 ~"></a>对于生活必要的仪式感，以及拥有对恶意和黑暗的事物抱有愤怒和反抗的能力 ~</h4><h4 id="和这个世界交手多年，渐渐失去了一些耐心，身体劳累，精神也麻木，对什么都提不起兴趣，"><a href="#和这个世界交手多年，渐渐失去了一些耐心，身体劳累，精神也麻木，对什么都提不起兴趣，" class="headerlink" title="和这个世界交手多年，渐渐失去了一些耐心，身体劳累，精神也麻木，对什么都提不起兴趣，"></a>和这个世界交手多年，渐渐失去了一些耐心，身体劳累，精神也麻木，对什么都提不起兴趣，</h4><h4 id="把漫长的生命活成同一天，但这样不行，早晚有一天是要发疯的"><a href="#把漫长的生命活成同一天，但这样不行，早晚有一天是要发疯的" class="headerlink" title="把漫长的生命活成同一天，但这样不行，早晚有一天是要发疯的 ~"></a>把漫长的生命活成同一天，但这样不行，早晚有一天是要发疯的 ~</h4><h4 id="还是要一些坚守和浪漫，要一些别人看来非必要的事物来拯救自己"><a href="#还是要一些坚守和浪漫，要一些别人看来非必要的事物来拯救自己" class="headerlink" title="还是要一些坚守和浪漫，要一些别人看来非必要的事物来拯救自己 ~"></a>还是要一些坚守和浪漫，要一些别人看来非必要的事物来拯救自己 ~</h4><h4 id="要一些海风，夏天的雨，要低吟的音乐和沉浸的电影，要在心里点燃一盏烛火"><a href="#要一些海风，夏天的雨，要低吟的音乐和沉浸的电影，要在心里点燃一盏烛火" class="headerlink" title="要一些海风，夏天的雨，要低吟的音乐和沉浸的电影，要在心里点燃一盏烛火 ~"></a>要一些海风，夏天的雨，要低吟的音乐和沉浸的电影，要在心里点燃一盏烛火 ~</h4><h4 id="停止被这个世界融化，花一些时间在这些事物上，"><a href="#停止被这个世界融化，花一些时间在这些事物上，" class="headerlink" title="停止被这个世界融化，花一些时间在这些事物上，"></a>停止被这个世界融化，花一些时间在这些事物上，</h4><h4 id="凝成自己坚固的核，保护好自己闪闪发光的部分，哪怕只是徒劳"><a href="#凝成自己坚固的核，保护好自己闪闪发光的部分，哪怕只是徒劳" class="headerlink" title="凝成自己坚固的核，保护好自己闪闪发光的部分，哪怕只是徒劳 ~"></a>凝成自己坚固的核，保护好自己闪闪发光的部分，哪怕只是徒劳 ~</h4><h4 id="觉得难过的时候，记得抬头看看月亮"><a href="#觉得难过的时候，记得抬头看看月亮" class="headerlink" title="觉得难过的时候，记得抬头看看月亮 ~"></a>觉得难过的时候，记得抬头看看月亮 ~</h4>]]></content>
      <tags>
        <tag>Welcome</tag>
      </tags>
  </entry>
  <entry>
    <title>快捷键集合</title>
    <url>/posts/11/</url>
    <content><![CDATA[<h1 id="一、系统"><a href="#一、系统" class="headerlink" title="一、系统"></a>一、系统</h1><ul>
<li><code>F2</code>：重命名选中内容</li>
<li><code>Windows + A</code>：打开操作中心</li>
<li><code>Windows + D</code>：显示桌面</li>
<li><code>Windows + E</code>：打开资源管理器</li>
<li><code>Windows + I</code>：打开设置</li>
<li><code>Widnows + K</code>：打开连接设备栏</li>
<li><code>Windows + L</code>：锁定桌面</li>
<li><code>Windows + P</code>：多显示器切换</li>
<li><code>Windows + Q</code>：打开搜索框</li>
<li><code>Windows + Tab</code>：显示时间轴</li>
<li><code>Ctrl + Windows + D</code>：新建虚拟桌面</li>
<li><code>Ctrl + Windows + F4</code>：关闭当前的虚拟桌面</li>
<li><code>Ctrl + Windows + ←/→</code>：切换到其他虚拟桌面</li>
<li><code>Shift + Windows + S</code>：打开截图工具</li>
</ul>
<h1 id="二、开发工具"><a href="#二、开发工具" class="headerlink" title="二、开发工具"></a>二、开发工具</h1><h2 id="1-微信开发者工具"><a href="#1-微信开发者工具" class="headerlink" title="1.微信开发者工具"></a>1.微信开发者工具</h2><ul>
<li><code>Alt + Up/Alt Down</code>：上下移动一行</li>
<li><code>Ctrl + B</code>：重新编译项目</li>
<li><code>Ctrl + D</code>：选中匹配</li>
<li><code>Ctrl + F</code>：当前页面内搜索</li>
<li><code>Ctrl + H</code>：当前页面内搜索并替换文本</li>
<li><code>Ctrl + S</code>：保存并编译项目</li>
<li><code>Ctrl + U</code>：光标回退</li>
<li><code>Ctrl + i</code>：选中当前行</li>
<li><code>Ctrl + /</code>：单行注释</li>
<li><code>Ctrl + End</code>：移动到文件结尾</li>
<li><code>Ctrl + Home</code>：移动到文件开头</li>
<li><code>Ctrl + [ / Ctrl + ]</code>：代码行缩进</li>
<li><code>Ctrl + Shift + F</code>：全局搜索</li>
<li><code>Ctrl + Shift + H</code>：全局搜索并替换文本</li>
<li><code>Ctrl + Shift + L</code>：选中所有匹配</li>
<li><code>Ctrl + Shift + Enter</code>：在当前行上方插入一行</li>
<li><code>Ctrl + Shift + [ / Ctrl + Shift + ]</code>：折叠打开代码块</li>
<li><code>Shift + Alt + A</code>：多行注释</li>
<li><code>Shift + Alt + F</code>：代码格式化</li>
<li><code>Shift + Alt + Up / Down</code>：向上向下复制一行</li>
<li><code>Shift + End</code>：选择从光标到行尾</li>
<li><code>Shift + Home</code>：选择从行首到光标处</li>
</ul>
<h2 id="2-Eclipse"><a href="#2-Eclipse" class="headerlink" title="2.Eclipse"></a>2.Eclipse</h2><ul>
<li><code>Alt + /</code>：内容提示</li>
<li><code>Alt + Left</code>：回退到前一个编辑页面</li>
<li><code>Alt + Right</code>：进入到下一个编辑页面</li>
<li><code>Alt + Up/Alt Down</code>：向上下移动代码</li>
<li><code>Alt + Shift + S</code>：调出生成 getter&#x2F;setter&#x2F;构造器等</li>
<li><code>Ctrl + 1</code>：快速修复</li>
<li><code>Ctrl + D</code>：删除选中行</li>
<li><code>Ctrl + K</code>：快速查找</li>
<li><code>Ctrl + T</code>：查看继承结构</li>
<li><code>Ctrl + O</code>：显示 outline</li>
<li><code>Ctrl + Alt + Down</code>：向下复制行</li>
<li><code>Ctrl + /</code>：单行注释</li>
<li><code>Ctrl + Shift + /</code>：多行注释</li>
<li><code>Ctrl + Shift + \</code>：取消多行注释</li>
<li><code>Ctrl + Shift + F</code>：格式化代码</li>
<li><code>Ctrl + Shift + O</code>：批量导包</li>
<li><code>Ctrl + Shift + Enter</code>：向上插入行</li>
<li><code>Shift + Enter</code>：向下插入行</li>
<li><code>Shift + Tab</code>：整体前移代码</li>
<li><code>Tab</code>：整体后移代码</li>
</ul>
<h2 id="3-Hbuilder"><a href="#3-Hbuilder" class="headerlink" title="3.Hbuilder"></a>3.Hbuilder</h2><h3 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="(1).快捷键"></a>(1).快捷键</h3><ul>
<li><code>Ctrl + K</code>：格式化代码</li>
<li><code>Ctrl + R</code>：运行到浏览器</li>
<li><code>Ctrl + /</code>：单行注释</li>
<li><code>Ctrl + Shift + /</code>：多行注释</li>
</ul>
<h3 id="2-技巧"><a href="#2-技巧" class="headerlink" title="(2).技巧"></a>(2).技巧</h3><ul>
<li>写 jQuery 代码时不会进行代码提示，只要在编辑器的右下角“语法提示库”选择 jQuery 语法即可</li>
</ul>
<h2 id="4-WebStrom"><a href="#4-WebStrom" class="headerlink" title="4.WebStrom"></a>4.WebStrom</h2><ul>
<li><code>Ctrl + Alt + S</code>：打开设置</li>
<li><code>Shift + Enter</code>：向下插入行</li>
</ul>
<h2 id="5-VSCode"><a href="#5-VSCode" class="headerlink" title="5.VSCode"></a>5.VSCode</h2><h3 id="1-快捷键-1"><a href="#1-快捷键-1" class="headerlink" title="(1).快捷键"></a>(1).快捷键</h3><ul>
<li>输入 <code>!</code> 并按 tab 键可以快速生成网页模板</li>
<li><code>Alt + Z</code>：自动换行</li>
<li><code>F2</code>：选中变量并按此键可以重命名变量</li>
<li><code>Ctrl + ~</code>：开启终端</li>
<li><code>Ctrl + Shift + K</code>：默认为删除当前行，但因为键长原因，可以去设置-键盘快捷方式中修改为 <code>Ctrl + D</code></li>
</ul>
<h3 id="2-插件"><a href="#2-插件" class="headerlink" title="(2).插件"></a>(2).插件</h3><p><code>Bracket Pair Colorizer 2</code>：可以给代码中的括号、中括号、大括号进行着色来区分不同的代码块</p>
<ul>
<li>作者在 2021 年 12 月 14 日发布通知以后将不再更新，因为 VSCode 本地已经支持该功能</li>
<li>但本人实测在 HTML 文件中的括号部分不会着色，可以配合使用</li>
</ul>
<p><code>Chinese (Simplified) Language Pack for Visual Studio</code>：中文插件</p>
<p><code>Color Highlight</code>：预览颜色代码，<code>可匹配 html/css/scss/sass/javascript/typescript</code> 等文件中的颜色代码</p>
<ul>
<li>在设置中还可以修改显示状态，默认为背景显示，还有边框显示，方块显示，下划线显示以及字体颜色显示</li>
</ul>
<p><code>Easy LESS</code>：支持运行 less 文件</p>
<p><code>ESlint</code>：规范代码格式</p>
<p><code>Git history</code>：查看 Git 提交记录</p>
<p><code>language-stylus</code>：支持 styl 文件的高亮显示</p>
<p><code>Live Server</code>：为静态和动态页面启动本地服务器</p>
<p><code>Markdown Preview Enhanced</code>：可以预览 Markdown 文件</p>
<p><code>ngx-translate-utils</code>：Angular 使用 ngx-translate 翻译时可以在代码中气泡显示翻译内容，并可直接跳转到对应翻译文件，需要去插件设置中设置本地语言</p>
<ul>
<li>如果 html 文件无效的话需要修改配置文件中 <code>Ngx-translate-utils: Translate JSONPlaceholder</code> 的值，将 <code>&#123;key&#125;</code> 换成 <code>&#123;&#123;key&#125;&#125;</code></li>
</ul>
<p><code>Nunjucks</code>：支持 njk 文件的高亮显示</p>
<p><code>Open in External App</code>：将某个文件以外置应用方式打开</p>
<p><code>SQL Server (mssql)</code>：可连接数据库</p>
<p><code>Swig(.tpl)</code>：支持 swig 文件的高亮显示</p>
<p><code>Tiny Light</code>：主题插件 —— 仿 HBuilder 的柔绿色主题</p>
<p><code>VSCode Great Icons</code>：图标插件 —— 比较鲜艳的图标</p>
<p><code>wechat-snippet</code>：微信小程序代码片段自动完成</p>
<p><code>wxapp-helper</code>：微信小程序开发助手</p>
<p><code>微信小程序扩展</code>：一个灵活、好用、持续维护的微信小程序拓展</p>
<p><code>code runner</code>：可以右键运行代码</p>
<h3 id="3-技巧"><a href="#3-技巧" class="headerlink" title="(3).技巧"></a>(3).技巧</h3><h4 id="强制折叠注释代码"><a href="#强制折叠注释代码" class="headerlink" title="强制折叠注释代码"></a>强制折叠注释代码</h4><p>可以使用 <code>region</code> 来控制代码是否强制折叠</p>
<table><tbody><tr><td class="code"><pre><span class="line">#region</span><br><span class="line">public <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">this</span>.name = <span class="string">'张三'</span>;</span><br><span class="line">}</span><br><span class="line">#endregion</span><br></pre></td></tr></tbody></table>

<h1 id="三、Adobe-软件"><a href="#三、Adobe-软件" class="headerlink" title="三、Adobe 软件"></a>三、Adobe 软件</h1><h2 id="1-Photoshop"><a href="#1-Photoshop" class="headerlink" title="1.Photoshop"></a>1.Photoshop</h2><ul>
<li><code>Ctrl + K</code>：首选项</li>
<li><code>Ctrl + N</code>：新建画布</li>
<li><code>Ctrl + S</code>：保存</li>
<li><code>Ctrl + Shift + S</code>：另存为</li>
<li><code>Ctrl + Shift + Alt + S</code>：存储为 Web 所用形式</li>
<li><code>Ctrl + +/-</code>：画布的放大缩小</li>
<li><code>Ctrl + Z</code>：返回上一步</li>
<li><code>Ctrl + Alt + Z</code>：返回多步</li>
</ul>
<h2 id="2-PR"><a href="#2-PR" class="headerlink" title="2.PR"></a><a href="http://2.pr/">2.PR</a></h2><p><strong>主界面下</strong>：</p>
<ul>
<li><code>Ctrl + I</code>：导入素材</li>
<li><code>Ctrl + N</code>：新建序列</li>
<li><code>Ctrl + O</code>：打开项目</li>
<li><code>Ctrl + Alt + N</code>：新建项目</li>
</ul>
<p><strong>源.视频下：</strong></p>
<ul>
<li><code>i</code>：标记入点</li>
<li><code>o</code>：标记出点</li>
</ul>
<p><strong>时间轴中：</strong></p>
<ul>
<li><code>m</code>：标记点</li>
<li><code>S</code>：磁铁自动吸附</li>
<li><code>Alt + 左键</code>：点击音频可以只选择音频，然后进行删除</li>
<li><code>Alt + 左键 + 移动</code>：可以复制当前选中的素材</li>
<li><code>Ctrl + L</code>：点击素材时可以取消视音频链接</li>
<li><code>Ctrl + Shift + M</code>：向左移动标记点</li>
<li><code>Ctrl + Shift + 双击</code>：双击轨道处可以快速还原轨道的高度为默认大小</li>
<li><code>Shift + M</code>：向右移动标记点</li>
</ul>
<p><strong>调整图层下：</strong></p>
<ul>
<li><code>Ctrl + K</code>：选中调整图层时可以直接以当前点进行裁切</li>
<li><code>Shift + ←/→</code>：可以以 5 帧为一单位进行跳转</li>
</ul>
<p><strong>某一窗口</strong>下：</p>
<ul>
<li><code>~</code>：放大窗口</li>
</ul>
<h1 id="四、数据库软件"><a href="#四、数据库软件" class="headerlink" title="四、数据库软件"></a>四、数据库软件</h1><h2 id="1-Navicat"><a href="#1-Navicat" class="headerlink" title="1.Navicat"></a>1.Navicat</h2><ul>
<li><code>Ctrl + D</code>：复制当前行</li>
<li><code>Ctrl + Shift + R</code>：运行已选择的代码</li>
<li><code>Shift + End</code>：光标在行首时，选中当前行</li>
<li><code>Shift + Home</code>：光标在行尾时，选中当前行</li>
</ul>
<h1 id="五、其余软件"><a href="#五、其余软件" class="headerlink" title="五、其余软件"></a>五、其余软件</h1><h2 id="1-BitDock"><a href="#1-BitDock" class="headerlink" title="1.BitDock"></a>1.BitDock</h2><ul>
<li><code>Alt + D</code>：呼出 Dock 栏</li>
<li><code>Alt + H</code>：隐藏 Dock 栏</li>
<li><code>Alt + I</code>：隐藏&#x2F;显示桌面图标</li>
<li><code>Alt + P</code>：电源管理</li>
<li><code>Alt + Q</code>：打开自带 Launch</li>
<li><code>Alt + T</code>：打开 Dock 设置</li>
</ul>
<h2 id="2-Chrome"><a href="#2-Chrome" class="headerlink" title="2.Chrome"></a>2.Chrome</h2><h3 id="1-插件"><a href="#1-插件" class="headerlink" title="(1).插件"></a>(1).插件</h3><p><code>Ads Killer Adblocker Plus</code>：从所有网站中移除广告</p>
<p><code>Auto Tab Discard</code>：如果你打开了很多标签页，这个扩展能提升浏览器速度和减少内存占用</p>
<p>**<code>FeHelper(前端助手)</code>**： JSON 自动格式化、手动格式化，支持排序、解码、下载等</p>
<p>**<code>Font Rendering Enhancer</code>**：使页面上的文字颜色更深、更清晰</p>
<p><code>IE Tab</code>：在 Chrome 浏览器中使用 IE 显示网页</p>
<p><code>Infinity 新标签页</code>：自由添加网站图标，云端高清壁纸，快速访问书签、天气、笔记、待办事项、扩展管理与历史记录</p>
<p><code>SteamDB</code>：可以查看 Steam 上最低的游戏价格和统计</p>
<p><code>二维码（生成及识别）</code>：将当前页面地址、选中的文本或链接等生成二维码，也可以识别网页中的二维码图片（支持识别中文）</p>
<p><code>沙拉查词</code>：一款专业划词翻译扩展</p>
<p><code>图片另存为JPG/PNG/WebP</code>：为图片添加右键菜单：另存为 PNG，另存为 JPG，另存为 WebP</p>
<p><code>下载管理</code>：用于接管浏览器自带的下载功能，免去打开下载页面来查看下载文件的麻烦</p>
<h2 id="3-Snipaste"><a href="#3-Snipaste" class="headerlink" title="3.Snipaste"></a>3.Snipaste</h2><ul>
<li>本人将该软件的截图和贴图更改为了 F3 和 F4</li>
<li>但是贴图的”切换另一贴图组“功能会与 Quicker 软件的关闭网页标签重复，导致 Quicker 无法正常关闭网页标签</li>
<li>所以该选项如果不常用可以不设置快捷键或换其他快捷键</li>
</ul>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题-HTML/CSS</title>
    <url>/posts/12/</url>
    <content><![CDATA[<h3 id="CSS-选择器权重"><a href="#CSS-选择器权重" class="headerlink" title="CSS 选择器权重"></a>CSS 选择器权重</h3><ul>
<li>!important &gt; 行内样式 &gt; id 选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符 &gt; 继承</li>
</ul>
<h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><ul>
<li>在我们 HTML 页面中，每一个元素都可以被看作一个盒子，而这个盒子由：内容区（content）、填充区（padding）、边框区（border）、外边界区（margin）四部分组成。</li>
<li>盒子模型有哪两种<ul>
<li>标准模式下: 一个块的总宽度(页面中占的宽度)&#x3D; width + margin(左右) + padding(左右) + border(左右)</li>
<li>怪异模式下： 一个块的总宽度&#x3D; width + margin(左右)（即 width 已经包含了 padding 和 border 值）（IE 浏览器）</li>
</ul>
</li>
<li>标准和怪异模型的转换<ul>
<li>box-sizing:content-box; 将采用标准模式的盒子模型标准</li>
<li>box-sizing:border-box; 将采用怪异模式的盒子模型标准</li>
<li>box-sizing:inherit; 规定应从父元素继承 box-sizing 属性的值。</li>
</ul>
</li>
</ul>
<h3 id="px、em、rem、vw、vh-的区别"><a href="#px、em、rem、vw、vh-的区别" class="headerlink" title="px、em、rem、vw、vh 的区别"></a>px、em、rem、vw、vh 的区别</h3><ul>
<li>px 是固定的像素，一旦设置了就无法因为适应页面大小而改变。</li>
<li>em 和 rem 相对于 px 更具有灵活性，他们是相对长度单位，意思是长度不是定死了的，更适用于响应式布局。</li>
<li>em 是相对于其父元素来设置字体大小的，一般都是以&lt; body &gt;的“font-size”为基准。这样会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。</li>
<li>而 rem 是相对于根元素&lt; html &gt;，这样就意味着，我们只需要在根元素确定一个参考值。</li>
<li>vh、vw：根据窗口的宽度，分成 100 等份，100vw 就表示满宽，50vw 就表示一半宽。vh 同理</li>
</ul>
<h3 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h3><ul>
<li>回流：页面中元素的尺寸，布局，隐藏等改变而需要重新构建页面，就会引起回流。</li>
<li>重绘：页面中元素属性发生改变，而这些属性只是影响元素的外观，风格，而不会影响布局的，则就叫称为重绘。</li>
<li>关系：回流必将引起重绘，而重绘不一定会引起回流。</li>
<li>如何避免：<ul>
<li>避免操作 DOM，创建一个 documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到 window.document 上。</li>
<li>也可以在一个 display:none 的元素上进行操作，最终把它显示出来。因为 display:none 上的 DOM 操作不会引发回流和重绘。</li>
<li>尽可能在 DOM 树的末端改变 class ，尽可能在 DOM 树的里面改变 class，可以限制回流的范围，使其影响尽可能少的节点。</li>
<li>将需要多次回流的元素 position 属性设为 absolute 或 fixed，这样该元素就会脱离文档流，它的变化不会影响其他元素变化。</li>
</ul>
</li>
</ul>
<h3 id="H5-新增特性和-css3-新增特性"><a href="#H5-新增特性和-css3-新增特性" class="headerlink" title="H5 新增特性和 css3 新增特性"></a>H5 新增特性和 css3 新增特性</h3><ul>
<li><p>H5 新增布局属性：header：头部区域、nav：导航区域、main：主体区域、section：小区域、aside：边栏、article：正文、footer：页尾区域</p>
</li>
<li><p>H5 新增多媒体标签：音频：audio、视频：video</p>
</li>
<li><p>H5 新增表单控件：date、time、url、search、file、number</p>
</li>
<li><p>H5 新增 web 本地存储：localstorage、sessionstorage</p>
</li>
<li><p>CSS3 新增文字阴影：text-shadow</p>
</li>
<li><p>CSS3 新增边框圆角：border-radius</p>
</li>
<li><p>CSS3 新增边框阴影：border-shadow</p>
</li>
<li><p>CSS3 新增背景大小：background-size</p>
</li>
<li><p>CSS3 新增渐变：linear-gradient</p>
</li>
<li><p>CSS3 新增盒模型：box-sizing</p>
</li>
</ul>
<h3 id="清除浮动有哪些方案"><a href="#清除浮动有哪些方案" class="headerlink" title="清除浮动有哪些方案"></a>清除浮动有哪些方案</h3><blockquote>
<p>清除浮动主要是为了解决父元素因为子元素浮动引起高度塌陷的问题。<br>本质上清除浮动的方式有两种，一种是利用 clear 属性，一种是利用 BFC。<br>clear 属性清除浮动又包括空标签法和伪元素法两种，代码如下：</p>
</blockquote>
<ul>
<li>使用空标签清除浮动在浮动元素的末尾添加一个空标签，并设置 <code>clear:both</code> 属性，即可清除浮动。例如：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 前两个盒子给上浮动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-left&quot;</span>&gt;</span>左浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-right&quot;</span>&gt;</span>右浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 空盒子，css中给上clear:both属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>:after</code> 伪元素清除浮动</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 前两个盒子给上浮动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-left&quot;</span>&gt;</span>左浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-right&quot;</span>&gt;</span>右浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.float-parent</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BFC 清除浮动的方式有多种，常用的 <code>overflow</code> 为例：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-parent&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="伪类和伪元素的区别"><a href="#伪类和伪元素的区别" class="headerlink" title="伪类和伪元素的区别"></a>伪类和伪元素的区别</h3><blockquote>
<p>在 CSS 中，伪类和伪元素都是用来指定元素的特殊状态和样式。它们的最大区别在于，伪类可以选择文档中元素的一些特殊状态，而伪元素可以在文档中创建一些虚拟的元素。</p>
</blockquote>
<p><strong>伪类：</strong></p>
<ul>
<li>:hover（鼠标悬停时）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>:active（元素被激活时）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>checked（选择状态时）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>:nth-child（选择某个特定位置的子元素）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>伪元素：</strong></p>
<ul>
<li>::before（在元素内容前插入内容）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Chapter&quot;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>::after（在元素内容后插入内容）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; (The End)&quot;</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>::first-letter（选择元素内容的第一个字母）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>::selection（选择用户选择的文本）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DOCTYPE-有什么作用？"><a href="#DOCTYPE-有什么作用？" class="headerlink" title="DOCTYPE 有什么作用？"></a>DOCTYPE 有什么作用？</h3><ul>
<li>DOCTYPE 是一种只是浏览器以何种 HTML 或 XHTML 规范来解析文档的声明。它能够告知浏览器网页文档使用的标记语言的类型以及版本，从而确保浏览器能够正确地展示网页内容。DOCTYPE 声明通常位于 HTML 文档的开头，是 HTML 文档的必须部分。</li>
</ul>
<h3 id="img-标签的-title-和-alt-属性有什么区别"><a href="#img-标签的-title-和-alt-属性有什么区别" class="headerlink" title="img 标签的 title 和 alt 属性有什么区别"></a>img 标签的 title 和 alt 属性有什么区别</h3><ul>
<li><code>alt</code> 属性用于为图像提供替代文本，即使图像无法加载，也可以描述图像内容，提高网页的可访问性和可用性。</li>
<li><code>title</code> 属性则提供有关图像的额外信息，可以通过鼠标悬停或使用辅助技术来查看。它通常用于提供更多的上下文或补充描述，但并不是必需的。</li>
</ul>
<h3 id="简述一下-src-与-href-的区别"><a href="#简述一下-src-与-href-的区别" class="headerlink" title="简述一下 src 与 href 的区别"></a>简述一下 src 与 href 的区别</h3><ul>
<li><p>在 HTML 中，src 属性是用来指定外部资源的 URL，如图像、脚本或嵌入式对象的位置。例如，<img> 标签中的 src 属性指定图像的 URL。</p>
</li>
<li><p>而 href 属性则用来指定超文本链接的目标资源的位置，如超链接或 link 标记中的外部样式表。例如，<a> 标签中的 href 属性指定了链接目标的 URL。</p>
</li>
</ul>
<h3 id="iframe-有哪些优缺点？"><a href="#iframe-有哪些优缺点？" class="headerlink" title="iframe 有哪些优缺点？"></a>iframe 有哪些优缺点？</h3><ul>
<li>iframe（内联框架）是一种 HTML 元素，它允许在当前文档中嵌入另一个独立的 HTML 文档。iframe 有一些优点和缺点：</li>
<li>优点：<ul>
<li>内容隔离：iframe 可以将不同来源的内容隔离开来，使得它们在不同的上下文中运行。这有助于保护当前文档免受潜在的安全风险，并确保不同来源的内容不会互相干扰。</li>
<li>异步加载：iframe 中的内容可以异步加载，这意味着页面主体内容可以在 iframe 加载完成之前呈现。这有助于提高页面加载速度。</li>
<li>独立滚动：iframe 内的内容可以独立滚动，而不会影响主页面的滚动。这有助于在需要展示大量内容的情况下，提高用户体验。</li>
<li>跨域资源访问：在一定程度上，iframe 可以用于访问跨域资源，例如嵌入来自其他域的网页或应用。</li>
</ul>
</li>
<li>缺点：<ul>
<li>性能影响：iframe 的使用可能会导致性能下降，因为它需要浏览器加载额外的文档资源。每个嵌入的 iframe 都需要额外的 HTTP 请求，这可能会延长页面加载时间。</li>
<li>复杂性增加：iframe 的使用可能会使页面结构更加复杂，导致维护困难。而且，在 iframe 和主页面之间进行通信可能会涉及到跨域问题，这会增加开发难度。</li>
<li>SEO 不友好：搜索引擎可能无法完全索引 iframe 中的内容，这会影响到网页的搜索引擎优化（SEO）。</li>
<li>可访问性问题：iframe 在某些情况下可能导致可访问性问题。例如，屏幕阅读器可能无法正确解析 iframe 中的内容，导致部分用户无法访问这些内容。</li>
</ul>
</li>
<li>综上所述，iframe 有一些优点，如内容隔离、异步加载和独立滚动等。然而，它也有一些缺点，如性能影响、复杂性增加、SEO 不友好和可访问性问题等。在使用 iframe 时，需要权衡这些优缺点，确保它适用于你的需求。</li>
</ul>
<h3 id="常用的-meta-标签有哪些？"><a href="#常用的-meta-标签有哪些？" class="headerlink" title="常用的 meta 标签有哪些？"></a>常用的 meta 标签有哪些？</h3><ul>
<li><p>meta 标签提供了有关 HTML 文档的元数据，如描述、关键词、作者等。以下是一些常用的 meta 标签：</p>
</li>
<li><p><strong>字符集声明：</strong>声明文档使用的字符编码，通常为 UTF-8。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>视口设置：</strong>控制页面在移动设备上的显示方式，如缩放级别和页面宽度。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>页面描述：</strong>提供页面的简短描述，有助于搜索引擎了解页面内容。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;A brief description of the page.&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>关键词：</strong>设置页面关键词，有助于搜索引擎优化（SEO）。但请注意，大多数现代搜索引擎不再使用此标签。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;keyword1, keyword2, keyword3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作者：</strong>指定页面作者。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Author Name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>禁止缓存：</strong>告诉浏览器不要缓存页面。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>自动刷新：</strong>设置页面在特定时间间隔后自动刷新。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>跳转到其他页面：</strong>在指定的时间间隔后，自动将用户重定向到其他页面。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5; URL=https://example.com/new-page.html&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>兼容模式：</strong>指定浏览器（如 Internet Explorer）使用特定的渲染模式。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>搜索引擎索引控制：</strong>指示搜索引擎是否应索引页面和跟踪链接。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index, follow&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这些常用的 meta 标签可以帮助你控制页面的显示、搜索引擎优化和其他功能。根据页面需求，可以根据需要添加更多的 meta 标签。</li>
</ul>
<h3 id="defer-和-async-的区别"><a href="#defer-和-async-的区别" class="headerlink" title="defer 和 async 的区别 ?"></a>defer 和 async 的区别 ?</h3><ul>
<li>defer 和 async 都是用于脚本加载和执行的关键字，两者的主要区别如下：<ul>
<li>defer 脚本会在 HTML 文档解析完成后执行，而 async 脚本会在下载完毕后立即执行。</li>
<li>defer 脚本会按照它们在文档中的顺序执行，而 async 脚本是在下载完成后尽快执行，可能会打乱它们在文档中的顺序。</li>
<li>defer 脚本会在 DOMContentLoaded 事件之后运行，而 async 脚本则不一定。</li>
</ul>
</li>
<li>因此，如果需要按顺序执行脚本并且不想阻塞 DOM 的解析，可以使用 defer。如果脚本的执行不依赖于其他脚本或 DOM，可以使用 async 加快加载速度。</li>
</ul>
<h3 id="CSS-属性是否区分大小写？"><a href="#CSS-属性是否区分大小写？" class="headerlink" title="CSS 属性是否区分大小写？"></a>CSS 属性是否区分大小写？</h3><ul>
<li>CSS 属性名和属性值在大多数情况下是不区分大小写的，但也有少数例外情况，如 font-variant 和 text-decoration 等属性与其值中的某些字母是区分大小写的。建议在编写 CSS 代码时还是严格遵守大小写以避免不必要的错误。</li>
</ul>
<h3 id="link-与-import-的区别"><a href="#link-与-import-的区别" class="headerlink" title="link 与@import 的区别"></a>link 与@import 的区别</h3><ul>
<li><p>link 和 @import 都可以用来引入外部资源，如 CSS 文件，但是它们之间有以下区别：</p>
<ul>
<li>引入方式：link 是 HTML 标签，@import 是 CSS 提供的一种方式。</li>
<li>加载顺序和性能：link 在页面载入时同时加载，@import 在页面载入完成后加载。</li>
<li>定义方式：link 可以在文档头部定义，也可以在文档中任何地方定义，@import 只能在样式表中定义。</li>
<li>加载方式：link 可以同时加载多个外部样式表，而@import 必须一条一条地执行。</li>
<li>附加功能：link 标签支持添加一些额外属性，如 media、title 等，用于指定媒体类型或提供样式表的描述。@import 不支持这些附加功能。</li>
<li>可控性：link 支持动态插入，而@import 不支持。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>面试那点事</category>
      </categories>
      <tags>
        <tag>高频前端面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题-JavaScript</title>
    <url>/posts/14/</url>
    <content><![CDATA[<h3 id="js-有哪些内置对象？"><a href="#js-有哪些内置对象？" class="headerlink" title="js 有哪些内置对象？"></a>js 有哪些内置对象？</h3><p>JavaScript 有许多内置对象，包括但不限于：</p>
<ul>
<li>基本对象： Object、Boolean、Symbol、Number、String</li>
<li>符合数据结构：Array、Set、Map、WeakSet、WeakMap</li>
<li>日期和时间对象：Date</li>
<li>数学计算对象：Math</li>
<li>正则表达式对象：RegExp</li>
<li>函数对象：Function</li>
<li>错误对象：Error、TypeError、RangeError 等</li>
<li>其他对象：Global、JSON 等</li>
</ul>
<h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><p>闭包是指一个函数可以访问另一个函数作用域内的变量。当一个函数嵌套在另一个函数中时，内部函数可以访问外部函数的变量，即使外部函数已经返回了。这种情况下，内部函数形成了一个闭包，它保留了外部函数的作用域链并可以继续访问这些变量。闭包常常用于实现函数的封装和私有化，以及在回调和事件处理等场景下的数据共享与传递。</p>
<h3 id="如何理解作用域、作用域链和执行上下文？"><a href="#如何理解作用域、作用域链和执行上下文？" class="headerlink" title="如何理解作用域、作用域链和执行上下文？"></a>如何理解作用域、作用域链和执行上下文？</h3><p>在 JavaScript 中，作用域、作用域链和执行上下文是密切相关的概念，它们与变量和函数的查找、访问以及生命周期有关。</p>
<ol>
<li><p>作用域（Scope）：</p>
<p><strong>作用域是一个变量或函数的可访问范围</strong>。JavaScript 中有三种作用域：<strong>全局作用域</strong>、<strong>局部（函数）作用域</strong>和<strong>块级作用域</strong>。全局作用域中声明的变量和函数可以在整个代码中访问，局部作用域中声明的变量和函数只能在特定的函数内部访问，块级作用域在一对花括号内定义，对<code>let</code>和<code>const</code>关键字声明的变量有效。</p>
<p>变量的生命周期受其作用域的限制。全局作用域中的变量在整个程序执行过程中持续存在，局部作用域中的变量在函数执行结束时销毁，块级作用域在代码块执行结束时，块级作用域中的变量将被销毁。</p>
</li>
<li><p>作用域链（Scope Chain）：</p>
<p><strong>当代码执行过程中访问一个变量或函数时，JavaScript 引擎会沿着作用域链查找该标识符</strong>。作用域链是由当前执行上下文的作用域和其所有父级作用域组成的链表。</p>
<p>查找过程从当前作用域开始，然后逐级向上查找，直到找到目标标识符或到达全局作用域。如果在全局作用域中仍未找到目标标识符，则返回<code>undefined</code>。</p>
</li>
<li><p>执行上下文（Execution Context）：</p>
<p><strong>执行上下文是 JavaScript 代码执行过程中的环境</strong>。每当进入一个新的函数执行或全局代码执行时，都会创建一个新的执行上下文。执行上下文包含了当前执行的代码所需的所有信息，如变量、函数、作用域链等。</p>
<p>JavaScript 引擎使用执行上下文栈（Execution Context Stack）来管理执行上下文。栈顶的执行上下文为当前执行的代码环境。当一个函数被调用时，一个新的执行上下文被压入栈顶；当函数执行结束时，执行上下文从栈顶弹出，返回到调用者的上下文环境。</p>
</li>
</ol>
<p>总结起来，作用域是变量和函数的可访问范围；作用域链是由当前执行上下文的作用域和其父级作用域组成的链表，用于在代码执行过程中查找变量和函数；执行上下文是代码执行过程中的环境，包含了当前执行的代码所需的所有信息。这三者共同决定了代码执行过程中变量和函数的查找、访问以及生命周期。</p>
<h3 id="如何创建一个没有原型的对象？"><a href="#如何创建一个没有原型的对象？" class="headerlink" title="如何创建一个没有原型的对象？"></a>如何创建一个没有原型的对象？</h3><p>可以使用 Object.create(null) 方法创建一个没有原型的对象。这个方法创建一个全新的对象并将其原型设置为 null，因此它没有继承任何属性或方法。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">toString</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="如何理解原型链？"><a href="#如何理解原型链？" class="headerlink" title="如何理解原型链？"></a>如何理解原型链？</h3><p>原型链是 JavaScript 中实现继承的一种机制，它通过让一个对象的原型指向另一个对象，从而使得一个对象可以访问另一个对象中定义的属性和方法。当我们试图访问一个对象中不存在的属性或方法时，JavaScript 引擎会沿着原型链一直向上查找，直到找到该属性或方法为止，或者最终抵达 Object.prototype（所有对象的祖先）上停止查找。</p>
<h3 id="let-const-var-比较"><a href="#let-const-var-比较" class="headerlink" title="let const var 比较"></a>let const var 比较</h3><ol>
<li>作用域：<ul>
<li><code>var</code>：声明的变量具有函数作用域。这意味着在函数内部声明的变量只能在该函数内部访问，而在函数外部声明的变量具有全局作用域。</li>
<li><code>let</code>和<code>const</code>：声明的变量具有块级作用域。这意味着变量仅在声明它们的代码块（例如：<code>if</code>语句、<code>for</code>循环、<code>while</code>循环等）内部可访问。</li>
</ul>
</li>
<li>变量提升（Hoisting）：<ul>
<li><code>var</code>：声明的变量会被提升到所在作用域的顶部。这意味着在声明之前访问变量不会导致引用错误，但变量的值将是<code>undefined</code>。</li>
<li><code>let</code>和<code>const</code>：声明的变量不会被提升。在声明之前访问变量会导致引用错误。</li>
</ul>
</li>
<li>重复声明：<ul>
<li><code>var</code>：允许在同一作用域内多次声明同名变量，后续声明将被忽略。</li>
<li><code>let</code>和<code>const</code>：在同一作用域内不允许重复声明同名变量。尝试这样做会导致语法错误。</li>
</ul>
</li>
<li>变量的可变性：<ul>
<li><code>var</code>和<code>let</code>：声明的变量可被重新赋值。</li>
<li><code>const</code>：声明的变量是不可变的，即一旦赋值，无法更改。这对于声明常量或确保某个变量在整个程序执行过程中保持不变的情况非常有用。</li>
</ul>
</li>
</ol>
<h3 id="JSON-stringify-有什么缺点？"><a href="#JSON-stringify-有什么缺点？" class="headerlink" title="JSON.stringify 有什么缺点？"></a>JSON.stringify 有什么缺点？</h3><p><code>JSON.stringify()</code>是一个将 JavaScript 对象转换为 JSON 字符串的方法。尽管它在许多情况下非常有用，但它确实存在一些限制和缺点：</p>
<ol>
<li>循环引用：<code>JSON.stringify()</code>无法处理具有循环引用的对象。如果一个对象的属性直接或间接引用了自身，<code>JSON.stringify()</code>将抛出一个错误，表示存在循环引用。</li>
<li><code>undefined</code>、函数和 Symbol 忽略：<code>JSON.stringify()</code>不会序列化对象中的<code>undefined</code>、函数和 Symbol 类型的属性。这些属性将被忽略，不会出现在生成的 JSON 字符串中，单独转换则会返回<code>undefined</code>。</li>
<li>丢失原型链：在对象序列化后，原型链上的属性和方法将丢失。只有对象自身的可枚举属性会被序列化。因此，在反序列化（使用<code>JSON.parse()</code>）后，原始对象的原型链信息将不复存在。</li>
<li>日期对象处理：当使用<code>JSON.stringify()</code>序列化日期对象时，日期对象会被转换为它们的 ISO 字符串表示形式。在反序列化时，这些日期将被视为普通字符串，而不是日期对象。</li>
<li>非数组和非对象的值：对于不是数组或对象的顶层值（例如：字符串、数字、布尔值等），<code>JSON.stringify()</code>会直接返回其对应的 JSON 表示，而不会将其包装在对象或数组中。</li>
</ol>
<h3 id="for…in-和-for…of-的区别"><a href="#for…in-和-for…of-的区别" class="headerlink" title="for…in 和 for…of 的区别?"></a>for…in 和 for…of 的区别?</h3><p>for…in 循环用于遍历对象的可枚举属性，返回的是属性名称；for…of 循环用于遍历可迭代对象（如数组、字符串、Map、Set 等），返回的是元素值。</p>
<h3 id="谈谈你对-V8-垃圾回收的理解？"><a href="#谈谈你对-V8-垃圾回收的理解？" class="headerlink" title="谈谈你对 V8 垃圾回收的理解？"></a>谈谈你对 V8 垃圾回收的理解？</h3><p>V8 引擎主要采用了两种算法来处理垃圾回收：分代收集（Generational Collection）和增量标记（Incremental Marking）。</p>
<ol>
<li>分代收集：V8 将内存分为两个代：新生代（Young Generation）和老生代（Old Generation）。新生代中的对象存活时间较短，而老生代中的对象存活时间较长。新生代使用 Scavenge 算法进行垃圾回收，通常采用 Cheney 算法，将内存分为两个半区（From Space 和 To Space），每次垃圾回收时，会将存活的对象复制到 To Space 中，并清空 From Space。当一个对象在新生代中经历了多次垃圾回收仍然存活时，会将其移动到老生代。</li>
<li>增量标记：老生代采用标记-清除（Mark-Sweep）算法进行垃圾回收。这种算法首先会标记所有可达的对象，然后清除所有未被标记的对象。为了避免在标记过程中产生长时间的停顿（Stop-The-World），V8 采用了增量标记策略。这种策略将标记过程分为多个阶段，在每个阶段之间，JavaScript 程序可以继续执行。这样可以降低垃圾回收对程序性能的影响。</li>
</ol>
<p>V8 垃圾回收是对 JavaScript 垃圾回收策略的具体实现。它采用分代收集和增量标记两种算法，有效降低了垃圾回收对程序性能的影响。</p>
<h3 id="new-操作符都做了什么"><a href="#new-操作符都做了什么" class="headerlink" title="new 操作符都做了什么"></a>new 操作符都做了什么</h3><ol>
<li>创建一个新对象</li>
<li>对象的<code>__proto__</code>指向构造函数的<code>prototype</code></li>
<li>构造函数将对象绑定到<code>this</code>并调用</li>
<li>如果构造函数返回对象或函数则直接返回，否则返回这个新对象</li>
</ol>
<h3 id="类数组和数组的区别，dom-的类数组如何转换成数组"><a href="#类数组和数组的区别，dom-的类数组如何转换成数组" class="headerlink" title="类数组和数组的区别，dom 的类数组如何转换成数组"></a>类数组和数组的区别，dom 的类数组如何转换成数组</h3><p>类数组（Array-like）和数组（Array）都是用于存储多个值的数据结构，但它们之间存在一些关键区别：</p>
<ol>
<li>类型：数组是 JavaScript 的内置对象类型，继承自<code>Array.prototype</code>，具有一系列数组方法（如<code>push()</code>、<code>pop()</code>、<code>map()</code>等）。类数组是普通的对象，其属性名为索引（如<code>0</code>、<code>1</code>、<code>2</code>等），具有一个<code>length</code>属性，但不具备数组的方法。</li>
<li>原型：数组的原型为<code>Array.prototype</code>，因此具有数组的所有方法。类数组的原型通常为<code>Object.prototype</code>，并不包含数组的方法。</li>
</ol>
<p>要将 DOM 的类数组（例如，通过<code>document.getElementsByClassName()</code>或<code>document.querySelectorAll()</code>获取的元素集合）转换为数组，可以使用以下方法之一：</p>
<ol>
<li><p>使用<code>Array.from()</code>方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nodeList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(nodeList);</span><br></pre></td></tr></table></figure>

<p><code>Array.from()</code>方法会创建一个新数组，并将类数组的元素逐个复制到新数组中。</p>
</li>
<li><p>使用扩展运算符（Spread Operator）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nodeList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> array = [...nodeList];</span><br></pre></td></tr></table></figure>

<p>扩展运算符<code>...</code>可以将类数组直接转换为数组。</p>
</li>
<li><p>使用<code>Array.prototype.slice.call()</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nodeList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> array = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(nodeList);</span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>Array.prototype.slice.call()</code>方法会将类数组作为上下文，并创建一个新数组，将类数组的元素逐个复制到新数组中。</p>
<p>这些方法可以将类数组转换为数组，这样就可以在转换后的数组上使用数组的方法了。注意，这些方法不仅适用于 DOM 类数组，还适用于其他类数组对象。</p>
<h3 id="offsetWidth-x2F-offsetHeight，clientWidth-x2F-clientHeight-与-scrollWidth-x2F-scrollHeight-的区别"><a href="#offsetWidth-x2F-offsetHeight，clientWidth-x2F-clientHeight-与-scrollWidth-x2F-scrollHeight-的区别" class="headerlink" title="offsetWidth&#x2F;offsetHeight，clientWidth&#x2F;clientHeight 与 scrollWidth&#x2F;scrollHeight 的区别"></a>offsetWidth&#x2F;offsetHeight，clientWidth&#x2F;clientHeight 与 scrollWidth&#x2F;scrollHeight 的区别</h3><p>offsetWidth&#x2F;offsetHeight 是元素的可见宽度&#x2F;高度加上 padding、border 和滚动条（如果存在）的宽度&#x2F;高度。</p>
<p>clientWidth&#x2F;clientHeight 是元素的可见宽度&#x2F;高度，不包括 padding 和滚动条。</p>
<p>scrollWidth&#x2F;scrollHeight 是元素内容的完整宽度&#x2F;高度，包括溢出部分。如果元素没有溢出，则 scrollWidth&#x2F;scrollHeight 等于 clientWidth&#x2F;clientHeight。如果有溢出，则 scrollWidth&#x2F;scrollHeight 大于 clientWidth&#x2F;clientHeight。</p>
<h3 id="mouseover-x2F-mouseout-与-mouseenter-x2F-mouseleave-的区别与联系"><a href="#mouseover-x2F-mouseout-与-mouseenter-x2F-mouseleave-的区别与联系" class="headerlink" title="mouseover&#x2F;mouseout 与 mouseenter&#x2F;mouseleave 的区别与联系"></a>mouseover&#x2F;mouseout 与 mouseenter&#x2F;mouseleave 的区别与联系</h3><p>mouseover 和 mouseout 是 HTML DOM 事件，它们会在鼠标移入或移出元素时触发。它们也会在鼠标指针进入或离开<strong>子元素</strong>时触发。这也就是说，如果在父元素上有 mouseover 事件，并且鼠标指针进入子元素，则该元素上仍然会触发 mouseover 事件。mouseout 同理。</p>
<p>mouseenter 和 mouseleave 事件也是在鼠标进入或离开元素时触发。与 mouseover 和 mouseout 不同的是，mouseenter 和 mouseleave 事件<strong>不会传播到子元素</strong>。因此，如果鼠标指针进入或离开元素的子元素，则不会触发 mouseenter 和 mouseleave 事件。</p>
<h3 id="event-stopPropagation-与-event-stopImmediatePropagation-的区别"><a href="#event-stopPropagation-与-event-stopImmediatePropagation-的区别" class="headerlink" title="event.stopPropagation()与 event.stopImmediatePropagation 的区别"></a>event.stopPropagation()与 event.stopImmediatePropagation 的区别</h3><p>event.stopPropagation()可以阻止事件冒泡到父元素，但不阻止其他事件处理程序的执行。而 event.stopImmediatePropagation()可以立即阻止事件冒泡并取消同一元素上其他事件处理程序的执行。</p>
<h3 id="说一下事件循环机制-Event-Loop"><a href="#说一下事件循环机制-Event-Loop" class="headerlink" title="说一下事件循环机制 Event Loop"></a>说一下事件循环机制 Event Loop</h3><p>事件循环（Event Loop）是 JavaScript 运行时环境中的一个核心概念，它负责协调异步操作和同步代码的执行。JavaScript 是单线程的，这意味着它一次只能执行一个任务。事件循环使 JavaScript 能够在执行同步代码的同时，处理异步操作（如定时器、用户交互和网络请求）的回调。</p>
<p>事件循环的工作原理大致如下：</p>
<ol>
<li>首先，JavaScript 引擎执行全局同步代码（例如来自<code>&lt;script&gt;</code>标签或 Node.js 文件的代码）。</li>
<li>当遇到异步操作（如 <code>setTimeout</code>、<code>setInterval</code>、<code>Promise</code>、<code>fetch</code> 等），它们的回调函数会被放入相应的任务队列中（微任务队列或宏任务队列）。</li>
<li>同步代码执行完成后，事件循环开始检查微任务队列。如果队列中有任务，事件循环将依次执行它们，直到队列为空。</li>
<li>接下来，事件循环检查宏任务队列。如果队列中有任务，事件循环将执行第一个任务，然后返回到微任务队列，检查是否有新的微任务需要执行。</li>
<li>事件循环在微任务队列和宏任务队列之间循环，依次执行队列中的任务。当两个队列都为空时，事件循环将等待新的任务（如用户交互或网络请求回调）。</li>
<li>当新任务出现时，事件循环将其添加到相应的队列中，并继续循环执行任务。</li>
</ol>
<p>事件循环的目标是在处理同步代码和异步回调之间保持平衡，确保 JavaScript 代码的执行效率和响应能力。通过这种方式，事件循环允许 JavaScript 在单线程环境中有效地处理并发操作。</p>
<h3 id="esm-和-commonjs-的区别"><a href="#esm-和-commonjs-的区别" class="headerlink" title="esm 和 commonjs 的区别"></a>esm 和 commonjs 的区别</h3><p>ESM（ECMAScript Modules）和 CommonJS 是 JavaScript 中两种不同的模块系统。它们都允许将代码拆分成可重用的模块，并在需要时导入这些模块。尽管它们都实现了相似的功能，但它们之间存在一些关键差异：</p>
<ol>
<li><p>语法：ESM 和 CommonJS 使用不同的语法来导入和导出模块。</p>
<ul>
<li>ESM 使用 <code>import</code> 和 <code>export</code> 关键字</li>
<li>CommonJS 使用 <code>require</code> 和 <code>module.exports</code>关键字</li>
</ul>
</li>
<li><p>运行时加载与静态加载：</p>
<ul>
<li>CommonJS 是<strong>运行时加载</strong>，这意味着模块在运行时解析和加载。因此，在运行时可以动态修改模块和依赖关系。</li>
<li>ESM 是<strong>静态加载</strong>，这意味着模块在编译时解析和加载。这允许更好的优化，如代码消除和更快的加载速度，但不允许在运行时动态修改模块。</li>
</ul>
</li>
<li><p>作用域：ESM 和 CommonJS 在处理变量作用域方面有所不同。</p>
<ul>
<li>ESM 使用<strong>模块作用域</strong>，每个模块具有自己的顶级作用域。在模块内声明的变量不会污染全局作用域。</li>
<li>CommonJS 使用<strong>文件作用域</strong>，但与 ESM 不同，CommonJS 模块可以通过 <code>global</code> 对象访问全局作用域。</li>
</ul>
</li>
<li><p>循环依赖：ESM 和 CommonJS 处理循环依赖的方式不同。</p>
<ul>
<li>ESM 可以更好地处理循环依赖，因为模块是静态加载的。在循环依赖中，导入的值可能是不完整的，但不会导致错误。</li>
<li>CommonJS 在处理循环依赖时可能会遇到问题，因为模块是运行时加载的。这可能导致在循环依赖中的模块中获得一个不完整的对象。</li>
</ul>
</li>
<li><p>兼容性和使用场景：</p>
<ul>
<li>CommonJS 主要用于 Node.js 环境，因为它是 Node.js 的原生模块系统。虽然现代 Node.js 版本也支持 ESM，但很多旧的 Node.js 代码仍使用 CommonJS。然而，许多新的 Node.js 项目逐渐采用 ESM。</li>
<li>ESM 通常用于现代 Web 开发，因为大多数现代浏览器原生支持 ESM。在使用构建工具（如 Webpack、Rollup 或 Parcel）时，ESM 也提供了更好的优化和打包能力。</li>
</ul>
</li>
<li><p>实时绑定与值拷贝：</p>
<ul>
<li>ESM 使用<strong>实时绑定</strong>，当导入的值发生更改时，导入模块的值也会跟着更改。这意味着导入的值始终保持最新。</li>
<li>CommonJS 使用<strong>值拷贝</strong>，当模块被导入时，值被复制到导入模块。这意味着在导入模块中，值的更改不会反映到原始模块，导入的值在导入时是固定的。</li>
</ul>
</li>
<li><p>导出值：</p>
<ul>
<li>ESM 导出值是<strong>映射关系</strong>，<strong>可读，不可修改</strong>，但可通过导出的函数修改导出的值。</li>
<li>CoomonJS 导出<strong>值的拷贝</strong>，<strong>可以修改导出的值</strong>。</li>
</ul>
</li>
<li><p>export 使用：</p>
<ul>
<li>ESM export 和 export default 支持一起使用。</li>
<li>CoomonJS module.exports 和 exports 不支持一起使用，会被覆盖。</li>
</ul>
</li>
</ol>
<p>总结一下，ESM 和 CommonJS 的主要区别在于它们的语法、加载机制、作用域、循环依赖处理、兼容性和使用场景以及实时绑定与值拷贝。尽管它们在某些方面有所不同，它们都是为了解决 JavaScript 模块化编程的问题。</p>
<h3 id="解释下-JavaScript-栈内存和堆内存？"><a href="#解释下-JavaScript-栈内存和堆内存？" class="headerlink" title="解释下 JavaScript 栈内存和堆内存？"></a>解释下 JavaScript 栈内存和堆内存？</h3><p>在 JavaScript 中，栈内存（Stack Memory）和堆内存（Heap Memory）扮演着不同的角色，它们分别负责存储不同类型的数据。以下是它们在 JavaScript 中的简要说明：</p>
<ol>
<li>栈内存（Stack Memory）：<ul>
<li>栈内存主要用于存储基本类型（原始类型）的值，如 <code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code> 和 <code>undefined</code>。这些类型的值通常较小且固定大小。</li>
<li>栈内存还负责存储函数调用的执行上下文、局部变量和临时数据。</li>
<li>栈内存遵循后进先出（LIFO）的原则进行分配和释放空间。当函数被调用时，函数的执行上下文、局部变量和相关信息会被压入栈中；当函数返回时，这些数据会从栈中弹出。</li>
<li>栈内存的分配和回收速度较快，因为内存管理由 JavaScript 引擎自动完成。</li>
<li>由于栈内存有限，如果递归调用过深或者分配大量的局部变量，可能导致栈溢出。</li>
</ul>
</li>
<li>堆内存（Heap Memory）：<ul>
<li>堆内存主要用于存储引用类型的值，如对象（<code>object</code>）、数组（<code>array</code>）和函数（<code>function</code>）。这些类型的值通常较大，大小不固定。</li>
<li>JavaScript 引擎使用垃圾回收机制自动管理堆内存中的对象。当对象不再被引用时，它们会被标记为垃圾，并在下一次垃圾回收时释放内存。</li>
<li>与栈内存相比，堆内存分配和回收速度较慢，因为需要管理更复杂的数据结构和垃圾回收机制。</li>
<li>堆内存可以动态分配，因此可以存储更多数据。</li>
<li>如果没有正确处理引用关系，可能导致内存泄漏。</li>
</ul>
</li>
</ol>
<p>总结一下，在 JavaScript 中，栈内存用于存储基本类型的值、函数调用的执行上下文和局部变量，堆内存用于存储引用类型的值。理解栈内存和堆内存的差异有助于编写高效且内存友好的 JavaScript 程序。</p>
<h3 id="箭头函数与普通函数区别？"><a href="#箭头函数与普通函数区别？" class="headerlink" title="箭头函数与普通函数区别？"></a>箭头函数与普通函数区别？</h3><p>箭头函数（Arrow Functions）与普通函数（常被称为函数声明或函数表达式）在 JavaScript 中有一些重要的区别。这些区别包括语法、<code>this</code> 关键字的绑定、arguments 对象的使用、构造函数行为以及原型链。以下是箭头函数和普通函数之间的主要区别：</p>
<ol>
<li><code>this</code> 关键字绑定：<ul>
<li>箭头函数没有自己的 <code>this</code>，它从包围它的普通函数或全局作用域继承 <code>this</code>。这使得在事件处理器或回调函数中使用箭头函数非常方便，因为它们自动捕获外部的 <code>this</code>。</li>
<li>普通函数有自己的 <code>this</code>，它的值在函数调用时确定。根据函数调用的方式（如通过对象方法调用、直接调用、构造函数调用等），<code>this</code> 的值可能会有所不同。</li>
</ul>
</li>
<li>arguments 对象：<ul>
<li>箭头函数没有自己的 <code>arguments</code> 对象。它们可以访问包围它们的普通函数的 <code>arguments</code> 对象。</li>
<li>普通函数有自己的 <code>arguments</code> 对象，这是一个类数组对象，包含了传递给函数的参数。</li>
</ul>
</li>
<li>构造函数行为：<ul>
<li>箭头函数不能作为构造函数使用，因此不能使用 <code>new</code> 关键字调用。它们也没有 <code>prototype</code> 属性。</li>
<li>普通函数可以作为构造函数使用，通过 <code>new</code> 关键字创建新的对象实例。</li>
</ul>
</li>
<li>原型链：<ul>
<li>由于箭头函数没有 <code>prototype</code> 属性，它们不能作为其他对象的原型。</li>
<li>普通函数有 <code>prototype</code> 属性，可以作为其他对象的原型。</li>
</ul>
</li>
<li>生成器：<ul>
<li>箭头函数不能使用<code>yield</code>关键字。</li>
<li>普通函数可以使用<code>yield</code>关键字变成生成器函数。</li>
</ul>
</li>
</ol>
<h3 id="isNaN-与-Number-isNaN-的区别"><a href="#isNaN-与-Number-isNaN-的区别" class="headerlink" title="isNaN 与 Number.isNaN 的区别"></a>isNaN 与 Number.isNaN 的区别</h3><p>isNaN 函数用于检查一个值是否是 NaN，它会将传入的参数先转换为数字类型再进行判断。如果传入的参数无法转换为数字类型，则会返回 true。</p>
<p>而 Number.isNaN 用于检查一个值是否为 NaN，但它不会将参数转换为数字类型，只有在参数本身就是 NaN 时才返回 true。否则，返回 false。</p>
<h3 id="谈谈你对-this-的理解"><a href="#谈谈你对-this-的理解" class="headerlink" title="谈谈你对 this 的理解"></a>谈谈你对 this 的理解</h3><p>在 JavaScript 中，<code>this</code> 是一个特殊的关键字，它在函数调用时动态地引用了一个对象。<code>this</code> 的值取决于函数的调用方式，不同的调用方式会导致 <code>this</code> 指向不同的对象。以下是一些关于 <code>this</code> 的不同用法和场景：</p>
<ol>
<li><p>全局上下文：</p>
<p>当在全局作用域中使用 <code>this</code> 时，它指向全局对象。在浏览器环境中，全局对象是 <code>window</code>；在 Node.js 环境中，全局对象是 <code>global</code>。</p>
</li>
<li><p>函数调用：</p>
<p>当在函数内部使用 <code>this</code> 且函数作为普通函数调用时（非对象方法调用），<code>this</code> 通常指向全局对象。但在严格模式下（使用 <code>&quot;use strict&quot;</code>），<code>this</code> 会被设置为 <code>undefined</code>。</p>
</li>
<li><p>对象方法调用：</p>
<p>当在对象的方法内部使用 <code>this</code> 时，<code>this</code> 指向调用该方法的对象。这也适用于原型链中的方法。</p>
</li>
<li><p>构造函数调用：</p>
<p>当在构造函数内部使用 <code>this</code> 且使用 <code>new</code> 关键字调用构造函数时，<code>this</code> 指向新创建的对象实例。</p>
</li>
<li><p>显式绑定：</p>
<p>使用 <code>call</code>、<code>apply</code> 或 <code>bind</code> 方法调用函数时，可以显式地将 <code>this</code> 绑定到一个指定的对象。</p>
</li>
<li><p>箭头函数：</p>
<p>箭头函数没有自己的 <code>this</code>，它从包围它的普通函数或全局作用域继承 <code>this</code>。这使得在事件处理器或回调函数中使用箭头函数非常方便，因为它们自动捕获外部的 <code>this</code>。</p>
</li>
</ol>
<p>总之，<code>this</code> 是 JavaScript 中一个动态上下文的关键字，它的值取决于函数调用的方式。</p>
<h3 id="谈谈你对严格模式的理解"><a href="#谈谈你对严格模式的理解" class="headerlink" title="谈谈你对严格模式的理解"></a>谈谈你对严格模式的理解</h3><p>在 JavaScript 中，严格模式（strict mode）和非严格模式（sloppy mode）主要有以下几个区别：</p>
<ol>
<li>变量声明： 在严格模式下，必须明确地声明变量（使用<code>let</code>、<code>const</code>或<code>var</code>关键字）。否则，将会抛出一个引用错误（ReferenceError）。在非严格模式下，如果没有声明变量，JavaScript 会自动将其声明为全局变量，这可能会导致意外的全局污染。</li>
<li>this 指针： 在严格模式下，全局作用域中的<code>this</code>值为<code>undefined</code>。在非严格模式下，全局作用域中的<code>this</code>值为全局对象（浏览器环境中为<code>window</code>对象，Node.js 环境中为<code>global</code>对象）。此外，在严格模式下，不允许使用<code>call</code>、<code>apply</code>或<code>bind</code>将<code>this</code>值设置为<code>null</code>或<code>undefined</code>。</li>
<li>禁止使用未来保留字： 严格模式中，不能将一些未来保留字（如<code>implements</code>、<code>interface</code>、<code>let</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>static</code>和<code>yield</code>）用作变量名或函数名。</li>
<li>禁止使用八进制字面量： 在严格模式下，不允许使用八进制字面量（如<code>0123</code>）。非严格模式下，八进制字面量是允许的。</li>
<li>禁止删除变量、函数和函数参数： 严格模式中，使用<code>delete</code>操作符删除变量、函数和函数参数会引发语法错误（SyntaxError）。在非严格模式下，这样的操作是允许的，但实际上不会删除这些对象。</li>
<li>限制函数参数的重复声明： 在严格模式下，如果一个函数具有多个相同名称的参数，将会抛出一个语法错误。非严格模式下允许这种重复声明，但只有最后一个参数值会生效。</li>
<li>错误处理： 严格模式相较于非严格模式，更严格地处理某些类型的错误。例如，当试图修改只读属性、给不可扩展的对象添加属性或删除不可配置的属性时，严格模式会抛出类型错误（TypeError），而非严格模式下则会静默失败。</li>
</ol>
<p>要启用严格模式，可以在脚本或函数开头添加<code>&quot;use strict&quot;;</code>指令。这将对整个脚本或函数体中的代码启用严格模式。推荐使用严格模式编写代码，因为它可以帮助发现潜在的错误并避免一些不良的编程实践。</p>
<h3 id="谈谈你对-Promise-的理解"><a href="#谈谈你对-Promise-的理解" class="headerlink" title="谈谈你对 Promise 的理解"></a>谈谈你对 Promise 的理解</h3><p>Promise 是一种在 JavaScript 中用于处理异步操作的编程模式。它表示一个尚未完成但预计在未来某个时刻完成的操作的结果。Promise 允许我们以更简洁、易读的方式处理异步操作，避免了传统的回调地狱（callback hell）问题。</p>
<p>Promise 有三种状态：</p>
<ol>
<li>pending（待定）：初始状态，既不是 fulfilled，也不是 rejected。</li>
<li>fulfilled（已实现）：表示异步操作已成功完成。</li>
<li>rejected（已拒绝）：表示异步操作失败。</li>
</ol>
<p>Promise 具有以下特点：</p>
<ol>
<li>Promise 对象是不可变的，一旦创建，其状态就不能再被改变。</li>
<li>Promise 状态只能从 pending 变为 fulfilled 或 rejected，不能逆向改变，且只能改变一次。</li>
<li>Promise 允许我们将成功和失败的处理函数分开，增加代码的可读性。</li>
</ol>
<p>缺点：</p>
<ol>
<li>无法取消：一旦创建了 Promise，就无法取消它。这可能导致在某些情况下，不再需要结果的异步操作仍然在执行。</li>
<li>总是异步：Promise 的回调总是异步执行，即使操作已经完成。这可能会导致一些意外的行为，特别是在执行顺序敏感的情况下。</li>
<li>调试困难：由于 Promise 的链式调用和异步特性，调试 Promise 可能比调试同步代码更具挑战性。错误堆栈可能不够清晰，难以确定问题出在哪里。</li>
</ol>
<p>Promise 基本用法包括：</p>
<ol>
<li>创建 Promise 对象：通过<code>new Promise(executor)</code>创建一个 Promise 对象，其中 executor 是一个执行器函数，接受两个参数：resolve 和 reject。成功时调用 resolve 函数并传递结果，失败时调用 reject 函数并传递原因。</li>
<li>链式调用：通过<code>.then()</code>方法处理 fulfilled 状态，接受一个回调函数作为参数，当 Promise 状态变为 fulfilled 时调用。<code>.catch()</code>方法处理 rejected 状态，接受一个回调函数作为参数，当 Promise 状态变为 rejected 时调用。</li>
<li>Promise.all：接受一个 Promise 数组作为参数，当所有 Promise 都变为 fulfilled 状态时返回一个新的 Promise，其值为所有 Promise 结果的数组。如果有任意一个 Promise 变为 rejected 状态，则返回的 Promise 也变为 rejected，且返回原因是第一个 rejected 的 Promise 的原因。</li>
<li>Promise.race：接受一个 Promise 数组作为参数，返回一个新的 Promise，其状态和结果与第一个完成（无论是 fulfilled 还是 rejected）的 Promise 相同。</li>
</ol>
<p>通过使用 Promise，我们可以更有效地处理异步操作，降低代码复杂性，提高可维护性。在现代 JavaScript 开发中，Promise 已成为处理异步操作的重要基石。</p>
<h3 id="为什么-0-1-0-2-不等于-0-3"><a href="#为什么-0-1-0-2-不等于-0-3" class="headerlink" title="为什么 0.1+0.2 不等于 0.3"></a>为什么 0.1+0.2 不等于 0.3</h3><p>在 JavaScript（以及许多其他编程语言）中，0.1 + 0.2 不等于 0.3 的原因是浮点数精度问题。JavaScript 使用 IEEE 754 标准中规定的双精度浮点数（double-precision floating point）来表示数字。这种表示方法在大多数情况下都很有效，但有时会导致精度损失。</p>
<p>双精度浮点数只有有限的位数（64 位）来表示数字，其中 1 位表示符号位，11 位表示指数，以及 52 位表示尾数。当尝试表示某些数字（特别是十进制小数）时，它们的二进制表示可能是无限循环的，因此需要截断以适应有限的位数。这可能导致浮点数的近似值与实际值之间存在微小差异。</p>
<p>在本例中，0.1 和 0.2 的二进制表示都是无限循环的，需要截断。当它们被截断并以双精度浮点数存储时，这两个数字的实际值与理论值略有不同。因此，当执行 0.1 + 0.2 时，结果也会有微小误差，与 0.3 的理论值不完全相等。</p>
<p>为了解决这个问题，可以将结果四舍五入到所需的精度。例如，如果要比较两个数字是否相等，可以将它们四舍五入到一个合理的精度，然后再进行比较：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">areNumbersAlmostEqual</span>(<span class="params">num1, num2, epsilon = <span class="number">1e-10</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(num1 - num2) &lt; epsilon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">areNumbersAlmostEqual</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)); <span class="comment">// 输出 true</span></span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们使用一个称为”epsilon”的小数值来表示可接受的误差范围。我们计算两个数字之差的绝对值，如果它小于 epsilon，我们认为这两个数字几乎相等。在实践中，需要根据具体问题选择合适的 epsilon 值。</p>
]]></content>
      <categories>
        <category>面试那点事</category>
      </categories>
      <tags>
        <tag>高频前端面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>发布npm</title>
    <url>/posts/15/</url>
    <content><![CDATA[<h1 id="创建一个-vue-项目"><a href="#创建一个-vue-项目" class="headerlink" title="创建一个 vue 项目"></a>创建一个 vue 项目</h1><p>（1）使用<code>vue create 项目名称</code>命令创建一个基础的 vue 项目，因为是比较简单的演示，所以选择 Default 配置即可。如果下载创建项目经常遇到 audit fix 提示，可以查看下自己的 npm 下载地址，最近官方下载地址总是出错，可以直接切换到淘宝镜像。<br>（2）使用 vscode 运行项目<code>npm run serve</code><br>（3）删除原始组件及其引用代码</p>
<h1 id="本地尝试——创建组件"><a href="#本地尝试——创建组件" class="headerlink" title="本地尝试——创建组件"></a>本地尝试——创建组件</h1><p>（1）创建 vue-link 组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a :href=&quot;link&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    link: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    text: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>（2）在 App.vue 中引入使用。<br>（3）尝试效果，点击跳转到了 link 所指向的网址。</p>
<h1 id="正式开始——安装-vue-sfc-rollup"><a href="#正式开始——安装-vue-sfc-rollup" class="headerlink" title="正式开始——安装 vue-sfc-rollup"></a>正式开始——安装 vue-sfc-rollup</h1><p>在 github 上搜索 vue-sfc-rollup，可以看到它的说明和使用方式。这是目前创建 npm 上可用的 vue 组件最快的方式，使用该工具生成组件项目后，最快时改动一个组件文件，进行打包后即可上传到 npm 上。<br>（1）全局安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g vue-sfc-rollup</span><br></pre></td></tr></table></figure>

<p>必须全局安装，局部安装试过了，会报错。<br>（2）使用 sfc 初始化之后要上传的组件项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sfc-init</span><br></pre></td></tr></table></figure>

<p>（2）运行项目<br>打开使用 sfc-init 命令创建的组件项目，<code>npm i</code>下载 node_modules，<code>npm run serve</code>运行<br>（3）读懂 sfc-init 的项目<br>可以看到 serve 命令执行的是 dev&#x2F;serve.js 文件，但是包的入口文件 dist&#x2F;vue-link.ssr.js 文件，不难看出这是最后要进行打包之后上传的文件。这个暂且不提，让我们把注意力放到 serve.js 文件上，发现这是一个小型的 vue 项目，并且只用到 vue-link.vue 一个模板组件，这就是我们需要修改替换的组件文件。</p>
<h1 id="修改项目并完成组件的-npm-发布"><a href="#修改项目并完成组件的-npm-发布" class="headerlink" title="修改项目并完成组件的 npm 发布"></a>修改项目并完成组件的 npm 发布</h1><p>（1）替换组件<br>将之前本地尝试创建的组件代码直接替换到当前 sfc-init 创建的项目中，看下效果。<br>到这一步，我们的组件就完成了。<br>（2）打包组件项目<br>打包之前，建议将将要发布的版本修改为最小，并且将 name 中加上你独有的标志，比如我在后面加上的-sheldon，防止和 npm 上已经有的包重名，否则有可能因为重名而上传失败。</p>
<p>然后，执行<code>npm run build</code>，生成之前提到过的打包后的入口文件。</p>
<p>（3）发布组件到 npm<br>需要注意的是，之前我们把项目的 npm 地址换成了淘宝镜像，现在发布自己的组件需要切换到官网，注意，现在地址需要使用 https，否则会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>

<p>最后使用<code>npm publish</code>命令，即可成功上传组件。</p>
<h1 id="验证——下载组件并使用"><a href="#验证——下载组件并使用" class="headerlink" title="验证——下载组件并使用"></a>验证——下载组件并使用</h1><p>（1）重新打开之前的 link-demo 项目或者自己新建一个 vue 项目，把 npm 地址重新切回到淘宝镜像（淘宝镜像 10 分钟更新一次，有时候还没更新，等等就行），避免不必要的报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）下载组件<code>npm i vue-link-sheldon</code><br>（3）使用组件</p>
<h1 id="原文连接：https-blog-csdn-net-qq-39055970-article-details-121691101"><a href="#原文连接：https-blog-csdn-net-qq-39055970-article-details-121691101" class="headerlink" title="原文连接：https://blog.csdn.net/qq_39055970/article/details/121691101"></a>原文连接：<a href="https://blog.csdn.net/qq_39055970/article/details/121691101">https://blog.csdn.net/qq_39055970/article/details/121691101</a></h1>]]></content>
      <categories>
        <category>快捷开发</category>
      </categories>
      <tags>
        <tag>npm学习</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序</title>
    <url>/posts/6/</url>
    <content><![CDATA[<h3 id="浅谈小程序"><a href="#浅谈小程序" class="headerlink" title="浅谈小程序"></a>浅谈小程序</h3><p>在 2016 年的「微信公开课 Pro」演讲中，微信事业群总裁张小龙这样描述了小程序的前景与未来：<br>“ 小程序是一种不需要下载安装即可使用的应用，它实现了应用 “触手可及” 的梦想，用户扫一扫或者搜一下即可打开应用。也体现了 “用完即走” 的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无须安装卸载 “。<br>小程序刚发布的时候要求压缩包的体积不能大于 1M，否则无法通过，在 2017 年 4 月做 了改进，由原来的 1M 提升到 2M；<br>2017 年 1 月 9 日 0 点，万众瞩目的微信第一批小程序正式低调上线。<br><strong>简介</strong></p>
<details>
<summary>展开查看</summary>
<div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><a href="#test4-1">小程序与 H5，原生应用有何区别？</a></li><li class="tab"><a href="#test4-2">什么样的应用适合使用小程序开发?</a></li><li class="tab"><a href="#test4-3">H5 移动应用</a></li><li class="tab"><a href="#test4-4">原生应用</a></li><li class="tab"><a href="#test4-5">混合应用</a></li><li class="tab"><a href="#test4-6">小程序</a></li><li class="tab"><a href="#test4-7">相比「 H5 移动应用」与「 移动原生应用」，小程序具备如下优势</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test4-1"><p>很多朋友在了解小程序技术的时候，都会有这样的疑惑“到底与 H5，原生应用”这些技术相比，小程序具有哪些优势与劣势呢？</p></div><div class="tab-pane" id="test4-2"><p>虽然小程序市场时至今日依然是一片蓝海，但我想也不是所有应用「都可以，都应该」使用小程序开发的。<br>基于我们的经验与积累来说，符合「逻辑简单，使用低频，对性能要求不极致」的应用场景，更加适合使用小程序进行研发。<br>逻辑简单：是指应用的操作逻辑并不十分复杂，各类生活服务（如打车，订餐，查地图与导航等等）都需要给用户提供简单清晰的操作逻辑，而这一类也天然的符合起初小程序「用完即走」的定义，因此十分符合使用小程序研发。一些逻辑复杂的应用场景想要通过小程序进行适配，就可能会面临更多的设计与研发困难，同时在性能和体验也可能会面对更多需要解决的问题。<br>使用低频：是指小程序的使用频率不应该太高，比如社交类的钉钉或飞书，金融类的掌上生活或浦大喜奔，媒体类的网易云音乐或斗鱼都不太适合使用小程序进行重新设计。对于用户使用的频率较高的应用来说，直接打开应用进行体验的步骤肯定最快的，此外由于某些行业的特殊性质（比如具备交易，支付等能力）要求，对于安全性与保密性的首选风险判断原则，也不宜使用常见的小程序进行设计。<br>对性能要求不极致：是指由于小程序始终存在于某个独立应用（也被称为宿主应用）中，考虑到目前的性能与研发所限制，暂时不太适合开发对于这两者有更高要求的移动应用。比如把原神，王者荣耀这样的游戏应用通过小程序进行重新设计，在目前来说肯定是不现实的。<br>当然，随着相关研发实力的增强与产业生态的逐渐补充，也有越来越多的「不可能」变为了「可能」，比如华西证券的「华彩人生」，浦发银行的「浦大喜奔」，某省的移动警务平台等客户都选择使用小程序容器方案进行落地实现</p></div><div class="tab-pane" id="test4-3"><p>我们常说的 H5 其实也通常可以被视为一种 Web App，相比于我们在桌面端浏览器中打开的网页，主要是增加了一些响应式的设计与交互优化，从而使得这些网页更适合在移动端的浏览器中显示运行。既然是网页应用，那依然是基于 JavaScript，CSS 和 HTML 进行实现的，由于是基于各类前端技术栈进行实现，最大的好处就是快速、简单、方便，且有各种技术资料可以参考。</p>
<p>同样，H5 的缺点与优点也是并存的，比如由于技术已经很成熟了，对于前端经验欠缺的新人来说，面对各式各样的框架，模块、任务管理工具，UI 库可能会出现无从下手的问题；此外相比于原生应用，对于系统权限的获取（比如数据缓存能力，网络通信状态等）都显得比较鸡肋，当低性能的设备加载包含复杂逻辑的页面时，会出现明显的卡顿与延迟问题。</p></div><div class="tab-pane" id="test4-4"><p>原生应用也被叫做 Native App，相比于 H5 应用通过前端三大件进行实现不同，原生应用主要会采用 iOS 与 Android 的专有语言 Object-C（或 Swift），Java（或 Kotlin）进行实现，大多我们所常见的国民应用，比如微信，支付宝等都属于这种原生应用。<br>既然被叫做「原生应用」，就像操作系统的亲儿子一样，天然在性能与体验上具备优秀的潜质，也有组件库丰富，接口支持完善等各种优势特点。但原生应用最大的缺陷就是不能跨平台研发，以目前的主流市场为例，必须要支持 iOS 与 Android 两个主流平台。</p></div><div class="tab-pane" id="test4-5"><p>混合应用一般被称为 Hybrid App。简单来说，混合应用就是将原生功能封装成对应的 JS 接口，在前端使用 H5 来开发对应的 App （即 H5 作为内容+原生应用作为壳） ，看上去虽然是一个移动原生应用整体，但实际的页面还是网页，一套代码可以生成 iOS 与 Android 两种安装包，开发成本较低。<br>我们常见的淘宝，京东等应用由于更新与优化节奏都十分快速，为了更好的响应「贴近用户」的目标，应用中有的功能通过原生 Native 实现，有的功能则通过 H5 页面进行实现，这种应用就属于我们所说的混合应用。</p></div><div class="tab-pane" id="test4-6"><p>严格意义上来说，小程序并不属于以上 3 种应用的任何一种。小程序主要通过 JavaScript 与 CSS 这种常见的前端技术进行开发，但又没有完全使用 HTML 进行实现，在不同的操作系统中，JavaScript 代码分别运行在 iOS 的 JavaScriptCore 与 Android 的 X5 JSCore 中，各家小程序平台或多或少都有一部分自研的核心，因此渲染视图层的组件也有所不同。</p></div><div class="tab-pane" id="test4-7"><p>具备跨平台的能力，一套代码可以在 iOS 与 Android 两个平台中运行；<br>远超过 H5 的体验（支持本地缓存，Webview，有丰富的组件与支持库）；<br>能获取更多系统权限，完成更加丰富的产品设计；<br>可以避免 DOM 泄露（不使用常用的 window 对象与 document 对象）；<br>开发简单，上手成本低（比如 FinClip 提供了 FIDE 与开发文档）；</p></div></div></div>

</details>

<h3 id="小程序入门"><a href="#小程序入门" class="headerlink" title="小程序入门"></a>小程序入门</h3><p><strong>小程序代码构成</strong></p>
<ul>
<li>用微信开发者工具创建玩项目后会生成几个不同类型的文件：<ul>
<li><code>.json</code> 后缀的 JSON 配置文件</li>
<li><code>.wxml</code> 后缀的 WXML 模板文件</li>
<li><code>.wxss</code> 后缀的 WXSS 样式文件</li>
<li><code>.js</code> 后缀的 JS 脚本逻辑文件<br><img src="/../assets/weixin_img/peizhitu.png" alt="生成的文件"></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── app.js                  //全局js</span><br><span class="line">├── app.json                //全局配置</span><br><span class="line">├── app.wxss                //全局样式</span><br><span class="line">├── pages                   //存放页面的目录</span><br><span class="line">│   ├── index               //页面目录</span><br><span class="line">│   │   ├── index.js        //页面js</span><br><span class="line">│   │   ├── index.json      //页面配置</span><br><span class="line">│   │   ├── index.wxml      //页面结构</span><br><span class="line">│   │   └── index.wxss      //页面样式</span><br><span class="line">│   └── logs</span><br><span class="line">│       ├── logs.js</span><br><span class="line">│       ├── logs.json</span><br><span class="line">│       ├── logs.wxml</span><br><span class="line">│       └── logs.wxss</span><br><span class="line">├── project.config.json     //编辑器配置文件</span><br><span class="line">├── sitemap.json</span><br><span class="line">└── utils                   //工具函数存放文件</span><br><span class="line">    └── util.js             //配置小程序及其页面是否允许被微信索引</span><br></pre></td></tr></table></figure>

<h4 id="JSON-配置"><a href="#JSON-配置" class="headerlink" title="JSON 配置"></a>JSON 配置</h4><p><strong>JSON 是一种数据格式，并不是编程语言，在小程序中，JSON 扮演的静态配置的角色。</strong></p>
<ul>
<li><strong>小程序配置 app.json</strong><ul>
<li>app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。</li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刚创建的项目中app.json只有两项</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 页面路径列表</span></span><br><span class="line">        <span class="string">&quot;pages/index/index&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 对全局的样式跟文字进行改变</span></span><br><span class="line">        <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;light&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;微信小程序&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;white&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定使用升级后的weui样式</span></span><br><span class="line">    <span class="attr">&quot;sitemapLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sitemap.json&quot;</span> <span class="comment">// 指明 sitemap.json 的位置</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>pags<ul>
<li>用于指定小程序由哪些页面组成，每一项都对应一个页面的 路径（含文件名） 信息。文件名不需要写文件后缀，框架会自动去寻找对应位置的 .json, .js, .wxml, .wxss 四个文件进行处理。</li>
<li>未指定 entryPagePath 时，数组的第一项代表小程序的初始页面（首页）。</li>
<li>小程序中新增&#x2F;减少页面，都需要对 pages 数组进行修改。</li>
</ul>
</li>
<li>tabBar<ul>
<li>也可以通过 tabBar 配置我们的底部导航</li>
<li>如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/logs/logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;日志&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="app-json-常用配置项"><a href="#app-json-常用配置项" class="headerlink" title="app.json 常用配置项"></a>app.json 常用配置项</h4><div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab"><a href="#tabs-1">pages</a></li><li class="tab"><a href="#tabs-2">tabBar</a></li><li class="tab active"><a href="#tabs-3">window</a></li><li class="tab"><a href="#tabs-4">实例源码</a></li></ul><div class="tab-content"><div class="tab-pane" id="tabs-1"></div><div class="tab-pane" id="tabs-2"></div><div class="tab-pane active" id="tabs-3"></div><div class="tab-pane" id="tabs-4"></div></div></div>

<p><strong>关于 app.json 还有很多的配置项详情可以查看官方文档：<a href='https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html'>app.json 配置中心</a></strong></p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>小程序学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs</title>
    <url>/posts/4/</url>
    <content><![CDATA[<p><strong>正式学习 node 之前，我们先铺垫一些基础概念 ~</strong></p>
<h3 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h3><h4 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h4><ul>
<li>人机交互部分（UI 界面）</li>
<li>网络请求部分（Socket）</li>
<li>JavaScript 引擎部分（解析执行 JavaScript）</li>
<li>渲染引擎部分（渲染 HTML、CSS 等）</li>
<li>数据存储部分（cookie、HTML5 中的本地存储 LocalStorage、SessionStorage）</li>
</ul>
<h4 id="主流渲染引擎"><a href="#主流渲染引擎" class="headerlink" title="主流渲染引擎"></a>主流渲染引擎</h4><p><strong>介绍</strong></p>
<ol>
<li>渲染引擎 又叫 排版引擎 或 浏览器内核。</li>
</ol>
<ul>
<li>OA (员工管理系统 : 员工信息、考勤、请假 …)</li>
</ul>
<ol start="2">
<li>主流的 渲染引擎 有<ul>
<li><strong>Chrome 浏览器</strong>: Blink 引擎（WebKit 的一个分支）。</li>
<li><strong>Safari 浏览器</strong>: WebKit 引擎，windows 版本 2008 年 3 月 18 日推出正式版，但苹果已于 2012 年 7 月 25 日停止开发 Windows 版的 Safari。</li>
<li><strong>FireFox 浏览器</strong>: Gecko 引擎。</li>
<li><strong>Opera 浏览器</strong>: Blink 引擎(早期版使用 Presto 引擎）。</li>
<li><strong>Internet Explorer 浏览器</strong>: Trident 引擎。</li>
<li><strong>Microsoft Edge 浏览器</strong>: EdgeHTML 引擎（Trident 的一个分支）。</li>
</ul>
</li>
</ol>
<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ol>
<li>解析 HTML 构建 Dom 树（Document Object Model，文档对象模型），DOM 是 W3C 组织推荐的处理可扩展置标语言的标准编程接口。</li>
<li>解析 CSS 构建 CSS 规则树</li>
<li>构建渲染树，渲染树并不等同于 Dom 树，因为像<code>head、body、meta、html标签 或 display: none</code>这样的元素就没有必要放到渲染树中了，但是它们在 Dom 树中。</li>
<li>对渲染树进行布局，定位坐标和大小、确定是否换行、确定 position、overflow、z-index 等等，这个过程叫<code>&quot;layout&quot; 或 &quot;reflow&quot;</code>。</li>
<li>绘制渲染树，调用操作系统底层 API 进行绘图操作。</li>
</ol>
<h4 id="渲染引擎工作原理示意图"><a href="#渲染引擎工作原理示意图" class="headerlink" title="渲染引擎工作原理示意图"></a>渲染引擎工作原理示意图</h4><p><img src="/../assets/node_img/flow.png" alt="渲染引擎工作原理"></p>
<h5 id="WebKit-工作原理（Chrome、Safari、Opera）"><a href="#WebKit-工作原理（Chrome、Safari、Opera）" class="headerlink" title="WebKit 工作原理（Chrome、Safari、Opera）"></a><strong>WebKit 工作原理（Chrome、Safari、Opera）</strong></h5><p><img src="/../assets/node_img/webkitflow.png" alt="Blink渲染引擎工作原理"></p>
<h5 id="Gecko-工作原理（FireFox）"><a href="#Gecko-工作原理（FireFox）" class="headerlink" title="Gecko 工作原理（FireFox）"></a><strong>Gecko 工作原理（FireFox）</strong></h5><p><img src="/../assets/node_img/gecko.jpg" alt="Gecko渲染引擎工作原理"></p>
<h4 id="浏览器的-reflow-或-layout-过程"><a href="#浏览器的-reflow-或-layout-过程" class="headerlink" title="浏览器的 reflow 或 layout 过程"></a>浏览器的 reflow 或 layout 过程</h4><p><a href="https://www.youtube.com/watch?v=ZTnIxIA5KGw">https://www.youtube.com/watch?v=ZTnIxIA5KGw</a></p>
<h4 id="打开-Chrome-的-Rendering-功能"><a href="#打开-Chrome-的-Rendering-功能" class="headerlink" title="打开 Chrome 的 Rendering 功能"></a>打开 Chrome 的 Rendering 功能</h4><p>第一步：</p>
<p><img src="/../assets/node_img/chrome_rendering1.png" alt="第一步"></p>
<p>第二步：</p>
<p><img src="/../assets/node_img/chrome_rendering2.png" alt="第二步"></p>
<h4 id="浏览器访问网站过程"><a href="#浏览器访问网站过程" class="headerlink" title="浏览器访问网站过程"></a>浏览器访问网站过程</h4><blockquote>
<ol>
<li>在浏览器地址栏中输入网址。</li>
</ol>
</blockquote>
<p><img src="/../assets/node_img/taobao_url.png" alt="淘宝网址"></p>
<blockquote>
<ol start="2">
<li>浏览器通过用户在地址栏中输入的 URL 构建 HTTP 请求报文。</li>
</ol>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.taobao.com  134.123.132.23</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate, sdch, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</span><br><span class="line">Cookie: l=Ag0NWp9E8X4hgaGEtIBhOmKxnSOH6kG8; isg=AkZGLTL-Yr9tHDZbgd5bsn4Rlzwg5IphaK-1BzBvMmlEM-ZNmDfacSyDfdgF; thw=cn</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="3">
<li>浏览器发起 DNS（寻址）解析请求，将域名转换为 IP 地址。</li>
</ol>
</blockquote>
<p><img src="/../assets/node_img/taobao_ip.png" alt="淘宝网址"></p>
<blockquote>
<ol start="4">
<li>浏览器将请求报文发送给服务器。</li>
</ol>
</blockquote>
<blockquote>
<ol start="5">
<li>服务器接收请求报文（request），并解析。</li>
</ol>
</blockquote>
<blockquote>
<ol start="6">
<li>服务器处理用户请求，并将处理结果封装成 HTTP 响应报文（response）。</li>
</ol>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Tengine</span><br><span class="line">Date: Thu, 13 Apr 2017 02:24:25 GMT</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Vary: Ali-Detector-Type, X-CIP-PT</span><br><span class="line">Cache-Control: max-age=0, s-maxage=300</span><br><span class="line">Via: cache8.l2cm10-1[172,200-0,C], cache13.l2cm10-1[122,0], cache3.cn206[0,200-0,H], cache6.cn206[0,0]</span><br><span class="line">Age: 293</span><br><span class="line">X-Cache: HIT TCP_MEM_HIT dirn:-2:-2</span><br><span class="line">X-Swift-SaveTime: Thu, 13 Apr 2017 02:19:32 GMT</span><br><span class="line">X-Swift-CacheTime: 300</span><br><span class="line">Timing-Allow-Origin: *</span><br><span class="line">EagleId: 9903e7e514920502659594264e</span><br><span class="line">Strict-Transport-Security: max-age=31536000</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot; /&gt;</span><br><span class="line">&lt;title&gt;淘宝网 - 淘！我喜欢&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;spm-id&quot; content=&quot;a21bo&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;aplus-xplug&quot; content=&quot;NONE&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;keyword&quot; content=&quot;淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	......</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="7">
<li>服务器将 HTTP 响应报文发送给浏览器。</li>
</ol>
</blockquote>
<blockquote>
<ol start="8">
<li>浏览器接收服务器响应的 HTTP 响应报文，并解析。</li>
</ol>
</blockquote>
<blockquote>
<ol start="9">
<li>浏览器解析 HTML 页面并展示，在解析 HTML 页面时遇到新的资源需要再次发起请求。</li>
</ol>
</blockquote>
<blockquote>
<ol start="10">
<li><h5 id="最终浏览器展示出了页面"><a href="#最终浏览器展示出了页面" class="headerlink" title="最终浏览器展示出了页面"></a>最终浏览器展示出了页面</h5></li>
</ol>
</blockquote>
<h4 id="HTTP-请求报文和响应报文格式"><a href="#HTTP-请求报文和响应报文格式" class="headerlink" title="HTTP 请求报文和响应报文格式"></a>HTTP 请求报文和响应报文格式</h4><p><img src="/../assets/node_img/HTTPMsgStructure2.png" alt="http请求报文和响应报文"></p>
<h4 id="DNS-解析过程"><a href="#DNS-解析过程" class="headerlink" title="DNS 解析过程"></a>DNS 解析过程</h4><p><img src="/../assets/node_img/DNS.gif" alt="DNS解析过程"></p>
<p><strong>windows 下 hosts 文件位置</strong></p>
<p>C:\Windows\System32\drivers\etc\hosts</p>
<h4 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h4><p>详情参见 ppt</p>
<h3 id="web-开发本质"><a href="#web-开发本质" class="headerlink" title="web 开发本质"></a>web 开发本质</h3><h4 id="牢记以下三点"><a href="#牢记以下三点" class="headerlink" title="牢记以下三点"></a>牢记以下三点</h4><ol>
<li>请求，客户端发起请求。</li>
<li>处理，服务器处理请求。</li>
<li>响应，服务器将处理结果发送给客户端</li>
</ol>
<p><strong>对比一个单机版计算器和 Web 版计算器</strong></p>
<h4 id="客户端处理响应"><a href="#客户端处理响应" class="headerlink" title="客户端处理响应"></a>客户端处理响应</h4><ul>
<li>服务器响应完毕后，客户端继续处理：<ul>
<li>浏览器：解析服务器返回的数据</li>
<li>iOS、Android 客户端，解析服务器返回的数据，并且通过 iOS 或 Android 的 UI 技术实现界面的展示功能</li>
</ul>
</li>
</ul>
<h4 id="关于-C-x2F-S（Client-x2F-Server）和-B-x2F-S（Browser-x2F-Server）"><a href="#关于-C-x2F-S（Client-x2F-Server）和-B-x2F-S（Browser-x2F-Server）" class="headerlink" title="关于 C&#x2F;S（Client&#x2F;Server）和 B&#x2F;S（Browser&#x2F;Server）"></a>关于 C&#x2F;S（Client&#x2F;Server）和 B&#x2F;S（Browser&#x2F;Server）</h4><p>C&#x2F;S: 客户端服务器</p>
<p>B&#x2F;S: 浏览器服务器</p>
<p><img src="/../assets/node_img/client-server.png" alt="Client / Server"></p>
<h3 id="node-js-介绍"><a href="#node-js-介绍" class="headerlink" title="node.js 介绍"></a>node.js 介绍</h3><h4 id="node-js-是什么？"><a href="#node-js-是什么？" class="headerlink" title="node.js 是什么？"></a>node.js 是什么？</h4><ol>
<li>node.js 是一个开发平台，就像 Java 开发平台、.Net 开发平台、PHP 开发平台、Apple 开发平台一样。<ul>
<li>何为开发平台？有对应的编程语言、有语言运行时、有能实现特定功能的 API（SDK：Software Development Kit）</li>
</ul>
</li>
<li>nodejs 平台使用的编程语言是 JavaScript 语言。<ul>
<li>不支持 window、document、bom 对象。</li>
</ul>
</li>
<li>node.js 平台是基于 Chrome V8 JavaScript 引擎构建。</li>
<li>基于 node.js 可以开发控制台程序（命令行程序、CLI 程序）、桌面应用程序（GUI）（借助 node-webkit、electron 等框架实现）、Web 应用程序（网站）。</li>
</ol>
<p>PHP 开发技术栈: LAMP - Linux Apache MySQL PHP</p>
<p>node.js 全栈开发技术栈: MEAN - MongoDB Express Angular Node.js</p>
<h4 id="node-js-有哪些特点？"><a href="#node-js-有哪些特点？" class="headerlink" title="node.js 有哪些特点？"></a>node.js 有哪些特点？</h4><ol>
<li>事件驱动(当事件被触发时，执行传递过去的回调函数)</li>
<li>非阻塞 I&#x2F;O 模型（当执行 I&#x2F;O 操作时，不会阻塞线程）<ul>
<li>Input &#x2F; Output</li>
</ul>
</li>
<li>单线程</li>
<li>拥有世界最大的开源库生态系统 —— npm。</li>
</ol>
<h4 id="node-js-网站"><a href="#node-js-网站" class="headerlink" title="node.js 网站"></a>node.js 网站</h4><ol>
<li><a href="https://nodejs.org/">node.js 官方网站</a></li>
<li><a href="http://nodejs.cn/">node.js 中文网</a></li>
<li><a href="https://cnodejs.org/">node.js 中文社区</a></li>
</ol>
<h4 id="为什么要学习-Node-js"><a href="#为什么要学习-Node-js" class="headerlink" title="为什么要学习 Node.js?"></a>为什么要学习 Node.js?</h4><ol>
<li>通过学习 Node.js 开发深入理解<strong>服务器开发</strong>、<strong>Web 请求和响应过程</strong>、 <strong>了解服务器端如何与客户端配合</strong></li>
<li>学习服务器端渲染：art-template、ejs、underscore</li>
<li>学习服务器端为客户端编写接口</li>
<li>现在前端工程师面试，对 Node.js 开发有要求</li>
<li>补充提问：<ul>
<li>在 Node.js 平台开发时，能使用 Dom API 吗？比如：<code>document.getElementById(&#39;id&#39;); window.location 等</code>?</li>
</ul>
</li>
<li>复习 浏览器端 JavaScript 组成：ECMAscript、Dom、Bom</li>
</ol>
<h4 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h4><ol>
<li>了解服务器开发过程</li>
<li>会使用 node.js 开发基本的 http 服务程序（Web 应用程序）</li>
</ol>
<h4 id="Node-js-可以用来做什么？"><a href="#Node-js-可以用来做什么？" class="headerlink" title="Node.js 可以用来做什么？"></a>Node.js 可以用来做什么？</h4><ul>
<li>具有复杂逻辑的动态网站</li>
<li>WebSocket 服务器</li>
<li>命令行工具</li>
<li>带有图形界面的本地应用程序</li>
<li>…</li>
</ul>
<h4 id="终端基本使用"><a href="#终端基本使用" class="headerlink" title="终端基本使用"></a>终端基本使用</h4><h4 id="打开应用"><a href="#打开应用" class="headerlink" title="打开应用"></a>打开应用</h4><ul>
<li>notepad 打开记事本</li>
<li>mspaint 打开画图</li>
<li>calc 打开计算机</li>
<li>write 写字板</li>
<li>sysdm.cpl 打开环境变量设置窗口</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>md 创建目录</li>
<li>rmdir(rd) 删除目录，目录内没有文档</li>
<li>echo on a.txt 创建空文件</li>
<li>del 删除文件</li>
<li>rm 文件名 删除文件</li>
</ul>
<h4 id="Node-js-开发环境准备"><a href="#Node-js-开发环境准备" class="headerlink" title="Node.js 开发环境准备"></a>Node.js 开发环境准备</h4><ol>
<li><p>普通安装方式<a href="https://nodejs.org/zh-cn/">官方网站</a></p>
</li>
<li><p>多版本安装方式</p>
<ul>
<li>卸载已有的 Node.js</li>
<li>下载<a href="https://github.com/coreybutler/nvm-windows">nvm</a></li>
<li>在 C 盘创建目录 dev</li>
<li>在 dev 目中中创建两个子目录 nvm 和 nodejs</li>
<li>并且把 nvm 包解压进去 nvm 目录中</li>
<li>在 install.cmd 文件上面右键选择【以管理员身份运行】</li>
<li>打开的 cmd 窗口直接回车会生成一个 settings.txt 文件，修改文件中配置信息</li>
<li>配置 nvm 和 Node.js 环境变量<ul>
<li>NVM_HOME:C:\dev\nvm</li>
<li>NVM_SYMLINK:C:\dev\nodejs</li>
</ul>
</li>
<li>把配置好的两个环境变量加到 Path 中</li>
</ul>
</li>
</ol>
<h4 id="nvm-常用的命令"><a href="#nvm-常用的命令" class="headerlink" title="nvm 常用的命令"></a>nvm 常用的命令</h4><ul>
<li>nvm list 查看当前安装的 Node.js 所有版本</li>
<li>nvm install 版本号 安装指定版本的 Node.js</li>
<li>nvm uninstall 版本号 卸载指定版本的 Node.js</li>
<li>nvm use 版本号 选择指定版本的 Node.js</li>
</ul>
<h4 id="Node-js-之-HelloWorld"><a href="#Node-js-之-HelloWorld" class="headerlink" title="Node.js 之 HelloWorld"></a>Node.js 之 HelloWorld</h4><ul>
<li>命令行方式 REPL</li>
<li>运行文件方式</li>
<li>全局对象概览</li>
</ul>
<h4 id="Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net-等传统模式开发-Web-应用程序区别"><a href="#Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net-等传统模式开发-Web-应用程序区别" class="headerlink" title="Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net 等传统模式开发 Web 应用程序区别"></a>Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net 等传统模式开发 Web 应用程序区别</h4><ol>
<li><strong>传统模式</strong><ul>
<li>有 Web 容器</li>
</ul>
</li>
</ol>
<p><img src="/../assets/node_img/Web.png" alt="有Web容器开发模型"></p>
<ol start="2">
<li><strong>Node.js 开发 Web 应用程序</strong><ul>
<li>没有 Web 容器</li>
</ul>
</li>
</ol>
<p><img src="/../assets/node_img/nodeWeb.png" alt="Node.js无Web容器开发模型"></p>
<ol start="3">
<li>补充提问：</li>
</ol>
<ul>
<li>什么是动态网页？什么是静态网页？</li>
</ul>
<h3 id="在-node-js-上编写程序"><a href="#在-node-js-上编写程序" class="headerlink" title="在 node.js 上编写程序"></a>在 node.js 上编写程序</h3><h4 id="REPL-介绍"><a href="#REPL-介绍" class="headerlink" title="REPL 介绍"></a>REPL 介绍</h4><ol>
<li><p>REPL 全称: Read-Eval-Print-Loop（交互式解释器）</p>
<ul>
<li>R 读取 - 读取用户输入，解析输入了 Javascript 数据结构并存储在内存中。</li>
<li>E 执行 - 执行输入的数据结构</li>
<li>P 打印 - 输出结果</li>
<li>L 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。</li>
</ul>
</li>
<li><p>在 REPL 中编写程序 （类似于浏览器开发人员工具中的控制台功能）</p>
<ul>
<li>直接在控制台输入 <code>node</code> 命令进入 REPL 环境</li>
</ul>
</li>
<li><p>按两次 Control + C 退出 REPL 界面 或者 输入 <code>.exit</code> 退出 REPL 界面</p>
<ul>
<li>按住 control 键不要放开, 然后按两下 c 键</li>
</ul>
</li>
</ol>
<h4 id="创建-JavaScript-文件编写程序"><a href="#创建-JavaScript-文件编写程序" class="headerlink" title="创建 JavaScript 文件编写程序"></a>创建 JavaScript 文件编写程序</h4><p><strong>JavaScript 文件名命名规则</strong></p>
<ul>
<li>不要用中文</li>
<li>不要包含空格</li>
<li>不要出现 node 关键字，比如：node.js</li>
<li>建议以 ‘-’ 分割单词</li>
</ul>
<p><strong>案例</strong></p>
<h4 id="案例-1：编写一个简单的函数-实现数字相加"><a href="#案例-1：编写一个简单的函数-实现数字相加" class="headerlink" title="案例 1：编写一个简单的函数, 实现数字相加"></a>案例 1：编写一个简单的函数, 实现数字相加</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">add</span>(m, n);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;计算结果是：&quot;</span> + result);</span><br></pre></td></tr></table></figure>

<h4 id="案例-2：文件读写案例"><a href="#案例-2：文件读写案例" class="headerlink" title="案例 2：文件读写案例"></a>案例 2：文件读写案例</h4><ul>
<li><p>使用到的模块<code>var fs = require(&#39;fs&#39;);</code></p>
</li>
<li><p>1、写文件：<code>fs.writeFile(file, data[, options], callback);</code></p>
<ul>
<li>参数 1：要写入的文件路径，<strong>必填</strong>。</li>
<li>参数 2：要写入的数据，<strong>必填</strong>。</li>
<li>参数 3：写入文件时的选项，比如：文件编码，选填。</li>
<li>参数 4：文件写入完毕后的回调函数，<strong>必填</strong>。</li>
<li>写文件注意：<ul>
<li>该操作采用异步执行</li>
<li>如果文件已经存在则替换掉</li>
<li>默认写入的文件编码为 utf8</li>
<li>回调函数有 1 个参数：err，表示在写入文件的操作过程中是否出错了。<ul>
<li>如果出错了<code>err != null</code>，否则 <code>err === null</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2、读文件：<code>fs.readFile(file[, options], callback)</code></p>
<ul>
<li>参数 1：要读取的文件路径，<strong>必填</strong>。</li>
<li>参数 2：读取文件时的选项，比如：文件编码。选填。</li>
<li>参数 3：文件读取完毕后的回调函数，<strong>必填</strong>。</li>
<li>读文件注意：<ul>
<li>该操作采用异步执行</li>
<li>回调函数有两个参数，分别是 err 和 data</li>
<li>如果读取文件时没有指定编码，那么返回的将是原生的二进制数据；如果指定了编码，那么会根据指定的编码返回对应的字符串数据。</li>
</ul>
</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>文件操作中的<code>./</code>表示当前路径，相对的是执行 node 命令的路径，而不是当前被执行的<code>*.js</code>文件的实际路径。</li>
<li><code>__dirname</code>才永远表示当前被执行的<code>*.js</code>文件的实际路径</li>
<li><code>/</code>表示根目录, 读取文件或写入文件的时候写<code>/</code>目录，在 Windows 下相当于当前磁盘根目录（比如：c:\ 或 d:\ 或 e:\ 等，在 Mac 下相当于硬盘根目录 <code>/</code>）</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --------------------------------- 写文件 -----------------------------</span></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建要写入的文件的字符串</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;你好，世界！你好 Node.js.&quot;</span>;</span><br><span class="line"><span class="comment">// 执行文件写入操作</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;./data.txt&quot;</span>, msg, <span class="string">&quot;utf8&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;---&quot;</span> + err + <span class="string">&quot;----&quot;</span>);</span><br><span class="line">  <span class="comment">// /判断是否写入文件出错了</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件写入出错了，详细错误信息：&quot;</span> + err);</span><br><span class="line">    <span class="comment">// 把错误继续向上抛出</span></span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件写入成功！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------- 读文件 -----------------------------</span></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行文件读取操作</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./data.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="comment">// 输出err  和 data</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;error: &#x27; + err);</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;data: &#x27; + data);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件读取出错啦！详细信息: &quot;</span> + err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件读取成功，以下是文件内容：&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="案例-3：创建目录案例"><a href="#案例-3：创建目录案例" class="headerlink" title="案例 3：创建目录案例"></a>案例 3：创建目录案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./test-mkdir&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;创建目录出错了，详细信息如下：&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;目录创建成功！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建 &#x27;01-教学资料&#x27; 目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-教学资料&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.1 创建 &#x27;01-笔记大纲&#x27; 目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-教学资料/01-笔记大纲&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.2 创建 &#x27;02-作业任务&#x27; 目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-教学资料/02-作业任务&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.3 创建 &#x27;03-素材资料&#x27; 目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-教学资料/03-素材资料&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.4 创建 &#x27;04-随堂笔记&#x27; 目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-教学资料/04-随堂笔记&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建 &#x27;02-源代码&#x27; 目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./02-源代码&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.1 创建 &#x27;预习代码&#x27;目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./02-源代码/预习代码&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 创建 &#x27;课堂代码&#x27;目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./02-源代码/课堂代码&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 &#x27;03-视频&#x27; 目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./03-视频&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建 &#x27;04-其他资料&#x27; 目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./04-其他资料&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li>异步操作无法通过 try-catch 来捕获异常，要通过判断 error 来判断是否出错。</li>
<li>同步操作可以通过 try-catch 来捕获异常。</li>
<li>不要使用 <code>fs.exists(path, callback)</code> 来判断文件是否存在，直接判断 error 即可</li>
<li>文件操作时的路径问题<ul>
<li>在读写文件的时候 ‘.&#x2F;’ 表示的是当前执行 node 命令的那个路径，不是被执行的 js 文件的路径</li>
<li>__dirname, 表示的永远是”当前被执行的 js 的目录”</li>
<li>__filename, 表示的是”被执行的 js 的文件名（含路径)”</li>
</ul>
</li>
<li>error-first 介绍( 错误优先 )</li>
</ol>
<h4 id="案例-4：通过-node-js-编写-http-服务程序-极简版本"><a href="#案例-4：通过-node-js-编写-http-服务程序-极简版本" class="headerlink" title="案例 4：通过 node.js 编写 http 服务程序 - 极简版本"></a>案例 4：通过 node.js 编写 http 服务程序 - 极简版本</h4><p>步骤：</p>
<ol>
<li>加载 http 模块</li>
<li>创建 http 服务</li>
<li>为 http 服务对象添加 request 事件处理程序</li>
<li>开启 http 服务监听，准备接收客户端请求</li>
</ol>
<p>注意：</p>
<ol>
<li>浏览器显示可能是乱码，所以可以通过 <code>res.setHeader(&#39;Content-Type&#39;, &#39;text/plain; charset=utf-8&#39;);</code>设置浏览器显示时所使用的编码。</li>
<li>Chrome 浏览器默认无法手动设置编码，需要安装”Set Character Encoding”扩展。</li>
<li>演示一下设置<code>Content-Type=text/html</code> 和 <code>Content-Type=text/plain</code>的区别。</li>
</ol>
<p>参考代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 开始监听&#x27;request&#x27;事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人请求了~~&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 启动服务，开始监听</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，请访问： http://localhost:9000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="案例-5：通过-node-js-编写-http-服务程序-根据不同请求作出不同响应"><a href="#案例-5：通过-node-js-编写-http-服务程序-根据不同请求作出不同响应" class="headerlink" title="案例 5：通过 node.js 编写 http 服务程序 - 根据不同请求作出不同响应"></a>案例 5：通过 node.js 编写 http 服务程序 - 根据不同请求作出不同响应</h4><p><strong>说明：</strong></p>
<ul>
<li>根据不同请求，显示 index 页面、login 页面、register 页面、list 页面、404 页面。</li>
<li>请求 &#x2F; 或 &#x2F;index</li>
<li>请求 &#x2F;login</li>
<li>请求 &#x2F;register</li>
<li>请求 &#x2F;list</li>
<li>请求除了以上路径之外的路径</li>
</ul>
<p><strong>参考代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/&quot;</span> || req.<span class="property">url</span> === <span class="string">&quot;/index&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求网站首页</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;这是 index.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求登录页面</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;这是 login.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/register&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求注册页面</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;这是 register.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/list&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求列表页面</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;这是 list.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 表示请求的页面不存在</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;Sorry, page not found.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口的网络请求</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http://localhost:9000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="案例-6：通过-node-js-编写-http-服务程序-通过读取静态-HTML-文件来响应用户请求"><a href="#案例-6：通过-node-js-编写-http-服务程序-通过读取静态-HTML-文件来响应用户请求" class="headerlink" title="案例 6：通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求"></a>案例 6：通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求</h4><p>步骤：</p>
<ol>
<li>创建 index.html、login.html、register.html、list.html、404.html 文件。</li>
<li>演示通过读取最简单的 HTML 文件来响应用户。</li>
<li>演示通过读取”具有引入外部 CSS 样式表”的 HTML 文件来响应用户。</li>
<li>演示通过读取”具有 img 标签”的 HTML 文件来响应用户。</li>
</ol>
<p>注意：</p>
<ul>
<li><p>1、注意在发送不同类型的文件时，要设置好对应的<code>Content-Type</code></p>
<ul>
<li><a href="http://tool.oschina.net/commons">Content-Type 参考 OSChina</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">Content-Type 参考 MDN</a></li>
</ul>
</li>
<li><p>2、HTTP 状态码参考</p>
<ul>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">w3org 参考</a></li>
<li><a href="https://www.w3schools.com/tags/ref_httpmessages.asp">w3schools 参考</a></li>
</ul>
</li>
<li><p>3、在 html 页面中写相对路径’.&#x2F;’ 和 绝对路径 ‘&#x2F;‘的含义 。</p>
<ul>
<li>网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的</li>
<li>‘.&#x2F;’ 表示本次请求从相对于当前页面的请求路径（即服务器返回当前页面时的请求路径）开始</li>
<li>‘&#x2F;’ 表示请求从根目录开始</li>
</ul>
</li>
</ul>
<p>补充知识点：</p>
<ol>
<li>path 模块的 join() 方法</li>
</ol>
<p>参考代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 加载 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 加载path模块，这个模块主要用来处理各种路径。</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 获取用户请求的URL</span></span><br><span class="line">  <span class="keyword">var</span> url = req.<span class="property">url</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 根据用户的不同请求，做出不同响应</span></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&quot;/&quot;</span> || url === <span class="string">&quot;/index&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取index.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;index.html&quot;</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span></span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取login.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;login.html&quot;</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span></span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/register&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取register.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;register.html&quot;</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span></span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/404&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取register.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;404.html&quot;</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span></span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9090</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;please visit: http://localhost:9090&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="案例-7：模拟-Apache-实现静态资源服务器"><a href="#案例-7：模拟-Apache-实现静态资源服务器" class="headerlink" title="案例 7：模拟 Apache 实现静态资源服务器"></a>案例 7：模拟 Apache 实现静态资源服务器</h4><p>步骤：</p>
<ul>
<li>单独创建一个目录来实现，比如：创建一个”07-Apache”的目录。</li>
<li>在该目录下新建 <code>public</code> 目录，假设该目录为静态资源目录。</li>
<li>根据用户请求的路径在 public 目录下寻找对应路径下的资源。</li>
<li>如果找到了，那么将该资源返回给用户，如果没找到则返回 404 错误。</li>
<li>通过 mime 模块设置不同类型资源的 Content-Type</li>
<li>实现完毕后把素材中的’An Ocean of Sky’ 和 ‘Hacker News’分别拷贝到静态资源目录下, 测试是否成功</li>
</ul>
<p>其他：</p>
<ul>
<li>介绍 NPM</li>
<li>介绍 mime 第三方模块<ul>
<li><code>npm install mime</code></li>
<li>在代码中直接 <code>var mime = require(&#39;mime&#39;)</code></li>
</ul>
</li>
</ul>
<p>参考代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 加载对应模块</span></span><br><span class="line"><span class="comment">// 1.1 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 1.2 加载path模块，方便路径拼接</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 1.3 加载文件读取模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 1.4 加载判断文件MIME类型的模块</span></span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">&quot;mime&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 监听用户request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 获取用户的请求路径, 并转换为小写</span></span><br><span class="line">  <span class="keyword">var</span> url = req.<span class="property">url</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断如果请求的路径是 &#x27;/&#x27; 那么等价于 &#x27;/index.html&#x27;</span></span><br><span class="line">  url = url === <span class="string">&quot;/&quot;</span> ? <span class="string">&quot;/index.html&quot;</span> : url;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 根据用户请求的url路径, 去public目录下查找对应的静态资源文件。找到后读取该文件，并将结果返回给用户</span></span><br><span class="line">  <span class="comment">// 2.1 根据用户请求的url拼接本地资源文件的路径</span></span><br><span class="line">  <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>, url);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 根据请求的文件路径设置Content-Type</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, mime.<span class="title function_">lookup</span>(url));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 根据路径去读取对应的文件</span></span><br><span class="line">  <span class="comment">// 【注意】读取文件前无需判断文件是否已经存在，而是在读取文件的回调函数中根据error的错误信息来判断读取文件是否成功以及发生的错误</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否有错误</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&quot;ENOENT&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断是否是请求的文件是否不存在</span></span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=utf8&quot;</span>);</span><br><span class="line">        res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">        res.<span class="property">statusMessage</span> = <span class="string">&quot;Not Found&quot;</span>;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;请求的资源不存在！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&quot;EACCES&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断文件是否有访问权限</span></span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=utf8&quot;</span>);</span><br><span class="line">        res.<span class="property">statusCode</span> = <span class="number">403</span>;</span><br><span class="line">        res.<span class="property">statusMessage</span> = <span class="string">&quot;Forbidden&quot;</span>;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;Permission denied！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果没有错误则将读取到的文件返回给用户</span></span><br><span class="line">      res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">      res.<span class="property">statusMessage</span> = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running, please visit: http://localhost:9000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Common-System-Errors-常见错误号"><a href="#Common-System-Errors-常见错误号" class="headerlink" title="Common System Errors - 常见错误号"></a>Common System Errors - 常见错误号</h4><ul>
<li><p>EACCES (Permission denied)</p>
<ul>
<li>An attempt was made to access a file in a way forbidden by its file access permissions.</li>
<li>访问被拒绝</li>
</ul>
</li>
<li><p>EADDRINUSE (Address already in use)</p>
<ul>
<li>An attempt to bind a server (net, http, or https) to a local address failed due to another server on the local system already occupying that address.</li>
<li>地址正在被使用（比如：端口号被占用）</li>
</ul>
</li>
<li><p>EEXIST (File exists)</p>
<ul>
<li>An existing file was the target of an operation that required that the target not exist.</li>
<li>文件已经存在</li>
</ul>
</li>
<li><p>EISDIR (Is a directory)</p>
<ul>
<li>An operation expected a file, but the given pathname was a directory.</li>
<li>给定的路径是目录</li>
</ul>
</li>
<li><p>ENOENT (No such file or directory)</p>
<ul>
<li>Commonly raised by fs operations to indicate that a component of the specified pathname does not exist – no entity (file or directory) could be found by the given path.</li>
<li>文件 或 目录不存在</li>
</ul>
</li>
<li><p>ENOTDIR (Not a directory)</p>
<ul>
<li>A component of the given pathname existed, but was not a directory as expected. Commonly raised by fs.readdir.</li>
<li>给定的路径不是目录</li>
</ul>
</li>
</ul>
<h4 id="同步文件操作-和-异步文件操作"><a href="#同步文件操作-和-异步文件操作" class="headerlink" title="同步文件操作 和 异步文件操作"></a>同步文件操作 和 异步文件操作</h4><ul>
<li><code>fs.readFile(file[, options], callback)</code></li>
<li><code>fs.readFileSync(file[, options])</code></li>
</ul>
<h4 id="通过设置-http-响应报文头实现弹框下载功能"><a href="#通过设置-http-响应报文头实现弹框下载功能" class="headerlink" title="通过设置 http 响应报文头实现弹框下载功能"></a>通过设置 http 响应报文头实现弹框下载功能</h4><ol>
<li>设置 <code>Content-Type: application/octet-stream</code> || <code>application/force-download</code></li>
<li>设置 <code>Content-Disposition: attachment; filename=demo.txt</code></li>
</ol>
<p>当浏览器在请求资源时，会通过 http 返回头中的 content-type 决定如何显示&#x2F;处理将要加载的数据，如果这个类型浏览器能够支持阅览，浏览器就会直接展示该资源，比如 png、jpeg、video 等格式。在某些下载文件的场景中，服务端可能会返回文件流，并在返回头中带上 Content-Type:application&#x2F;octet-stream，告知浏览器这是一个字节流，浏览器处理字节流的默认方式就是下载。<br>Application&#x2F;octet-stream 是应用程序文件的默认值。意思是未知的应用程序文件，浏览器一般不会自动执行或询问执行。浏览器会像对待，设置了 HTTP 头 Content-Disposition 值为 attachment 的文件一样来对待这类文件，即浏览器会触发下载行为。<br>说人话就是，浏览器并不认得这是什么类型，也不知道应该如何展示，只知道这是一种二进制文件，因此遇到 content-type 为 application&#x2F;octet-stream 的文件时，浏览器会直接把它下载下来。这个类型一般会配合另一个响应头 Content-Disposition,该响应头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者网页的一部分），还是以附件的形式下载并保存到本地。</p>
<h3 id="request-对象-和-response-对象"><a href="#request-对象-和-response-对象" class="headerlink" title="request 对象 和 response 对象"></a>request 对象 和 response 对象</h3><h4 id="request-对象"><a href="#request-对象" class="headerlink" title="request 对象"></a>request 对象</h4><ul>
<li>request 对象类型 &lt;http.IncomingMessage&gt;, 继承自 stream.Readable</li>
<li>request 对象常用成员<ul>
<li><code>request.headers</code></li>
<li><code>request.rawHeaders</code></li>
<li><code>request.httpVersion</code></li>
<li><code>request.method</code></li>
<li><code>request.url</code></li>
</ul>
</li>
</ul>
<h4 id="response-对象"><a href="#response-对象" class="headerlink" title="response 对象"></a>response 对象</h4><ul>
<li><p>response 对象类型 &lt;http.ServerResponse&gt;</p>
</li>
<li><p>response 对象常用成员</p>
<ul>
<li><p><code>response.writeHead(statusCode[, statusMessage][, headers])</code></p>
<ol>
<li>This method must only be called once on a message and it must be called before response.end() is called.</li>
</ol>
<ul>
<li>这个方法在每次请求响应前都必须被调用（只能调用一次）。并且必须在 end()方法调用前调用</li>
</ul>
<ol start="2">
<li>If you call response.write() or response.end() before calling this, the implicit&#x2F;mutable headers will be calculated and call this function for you.</li>
</ol>
<ul>
<li>如果在调用 writeHead()方法之前调用了 write() 或 end()方法，系统会自动帮你调用 writeHead()方法，并且会生成默认的响应头</li>
</ul>
<ol start="3">
<li>When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.</li>
</ol>
<ul>
<li>如果通过 res.setHeader() 也设置了响应头，那么系统会将 serHeader()设置的响应头和 writeHead()设置的响应头合并。 并且 writeHead()的设置优先</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例代码：</span></span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Length&quot;</span>: <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(msg),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>response.write(chunk[, encoding][, callback])</code></p>
<ul>
<li>参数 1：要写入的数据，可以是字符串或二进制数据，<strong>必填</strong>。</li>
<li>参数 2：编码，默认是 utf8，选填。</li>
<li>参数 3：回调函数，选填。</li>
</ul>
</li>
<li><p><code>response.end([data][, encoding][, callback])</code></p>
<ul>
<li><p>结束响应。</p>
</li>
<li><p>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. <em><strong>The method, <code>response.end()</code>, MUST be called on each response</strong></em>.</p>
</li>
<li><p>res.end()这个方法告诉服务器所有要发送的响应头和响应体都发送完毕了。可以人为这次响应结束了。</p>
</li>
<li><p>同时每次响应都必须调用该方法，用来结束响应</p>
</li>
<li><p>参数 1：结束响应前要发送的数据，选填。</p>
</li>
<li><p>参数 2：编码，选填。</p>
</li>
<li><p>参数 3：回调函数，选填。</p>
</li>
</ul>
</li>
<li><p><code>response.setHeader(name, value)</code></p>
<ul>
<li>设置响应报文头</li>
</ul>
</li>
<li><p><code>response.statusCode</code></p>
<ul>
<li>设置或读取 http 响应码</li>
</ul>
</li>
<li><p><code>response.statusMessage</code></p>
<ul>
<li>设置或读取 http 响应状态消息</li>
</ul>
</li>
</ul>
<h3 id="npm-Node-Package-Manager-Node-包管理器"><a href="#npm-Node-Package-Manager-Node-包管理器" class="headerlink" title="npm - Node Package Manager - Node 包管理器"></a>npm - Node Package Manager - Node 包管理器</h3><h4 id="npm-是什么？"><a href="#npm-是什么？" class="headerlink" title="npm 是什么？"></a>npm 是什么？</h4><ul>
<li>npm（全称 Node Package Manager，即 node 包管理器）是 Node.js 默认的、以 JavaScript 编写的软件包管理系统。</li>
<li><a href="https://www.npmjs.com/">npm 官方网站</a></li>
<li><a href="https://docs.npmjs.com/">npm 官方文档</a></li>
</ul>
<p><strong>一般当我们说 npm 的时候可能指 3 件事</strong></p>
<ol>
<li>NPM 网站：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li>
<li>NPM 包管理库，存储了大量的 JavaScript 代码库</li>
<li>NPM 客户端，我们所使用的 npm 命令行工具。使用 JavaScript 开发的基于 node.js 的命令行工具，本身也是 Node 的一个包。</li>
</ol>
<p><strong>参考图片</strong></p>
<p><img src="/../assets/node_img/npm.png" alt="NPM"></p>
<p><img src="/../assets/node_img/npm1.png" alt="NPM"></p>
<h4 id="npm-官方解释："><a href="#npm-官方解释：" class="headerlink" title="npm 官方解释："></a>npm 官方解释：</h4><ul>
<li><p>npm is the package manager for JavaScript and the world’s largest software registry.</p>
<ul>
<li>npm 是一个 JavaScript 包管理器，并且是世界上最大的软件登记处</li>
</ul>
</li>
<li><p>discover packages of reusable code — and assemble them in powerful new ways.</p>
<ul>
<li>发现可重用代码，并集成代码包到项目中的全新的、强大方式</li>
</ul>
</li>
<li><p>npm makes it easy for JavaScript developers to share and reuse code, and it makes it easy to update the code that you’re sharing.</p>
<ul>
<li>npm 让 JavaScript 开发者共享和重用代码变的更容易，同时也让我们更容易地更新正在被共享的代码</li>
</ul>
</li>
</ul>
<h4 id="npm-与-node-js"><a href="#npm-与-node-js" class="headerlink" title="npm 与 node.js"></a>npm 与 node.js</h4><ul>
<li>npm 是 Node.js 默认的软件包管理系统。安装完毕 node 后，会默认安装好 npm</li>
<li>npm 本身也是基于 Node.js 开发的包（软件）</li>
</ul>
<h4 id="如何安装-NPM"><a href="#如何安装-NPM" class="headerlink" title="如何安装 NPM?"></a>如何安装 NPM?</h4><ul>
<li>npm 会随着 Node.js 自动安装，安装完毕 node.js 后会自动安装 npm</li>
<li>查看当前 npm 版本：<code>npm -v</code></li>
<li>更新 npm：<code>npm install npm@latest -g</code></li>
</ul>
<h4 id="npm-使用"><a href="#npm-使用" class="headerlink" title="npm 使用"></a>npm 使用</h4><ol>
<li>在 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 网站找到需要的包</li>
<li>在项目的根目录下，执行<code>npm install 包名称</code>安装</li>
<li>在 node.js 代码中通过 <code>require(&#39;包名&#39;);</code> 加载该模块</li>
<li>注意：通过<code>npm install 包名</code>安装的包，会自动下载到当前目录下的<code>node_modules</code>目录下，如果该目录不存在，则创建，如果已存在则直接下载进去。</li>
<li>在代码中通过 <code>require(&#39;包名&#39;);</code> 加载该模块</li>
</ol>
<p>-—- 上面说的这种方式叫做 本地安装。</p>
<h4 id="npm-全局安装介绍"><a href="#npm-全局安装介绍" class="headerlink" title="npm 全局安装介绍"></a>npm 全局安装介绍</h4><ol>
<li>什么是 npm 全局安装？<ul>
<li><code>npm install 包名 -g</code> npm 全局安装指的是把包安装成了一个命令行工具。</li>
<li>全局安装只是为了可以当做命令行使用而已</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过npm全局安装mime</span></span><br><span class="line">npm install mime -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装完毕后可以在命令行中直接使用</span></span><br><span class="line">mime a.<span class="property">txt</span> 命令来查看对应的结果</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>npm 全局安装实际做了 2 件事：<ol>
<li>下载包到一个指定的目录<code>C:\Users\username\AppData\Roaming\npm\node_modules</code></li>
<li>创建一段命令行执行的代码。 <code>C:\Users\username\AppData\Roaming\npm\mime -&gt; C:\Users\steve xiaohu zhao\AppData\Roaming\npm\node_modules\mime\cli.js</code></li>
</ol>
</li>
</ol>
<h4 id="npm-常用命令介绍"><a href="#npm-常用命令介绍" class="headerlink" title="npm 常用命令介绍"></a>npm 常用命令介绍</h4><ol>
<li>install，安装包。<code>npm install 包名</code></li>
<li>uninstall，卸载包。npm uninstall 包名`</li>
<li>version，查看当前 npm 版本。<code>npm version</code> 或 <code>npm -v</code></li>
<li>init，创建一个 package.json 文件。<code>npm init</code></li>
<li>注意：当使用 <code>npm init -y</code> 的时候，如果当前文件夹（目录）的名字比较怪（有大写、有中文等等）就会影响 npm init -y 的一步生成操作，此时需要 npm init 根据向导来生成</li>
</ol>
<h4 id="模块（Modules）和包（Packages）的区别"><a href="#模块（Modules）和包（Packages）的区别" class="headerlink" title="模块（Modules）和包（Packages）的区别"></a>模块（Modules）和包（Packages）的区别</h4><ol>
<li>A <strong>module</strong> is any file or directory that can be loaded by Node.js’ <code>require()</code>.</li>
</ol>
<ul>
<li>模块可以是任何一个文件或目录（目录下可以有很多个文件），只要能被 node.js 通过 require()即可。遵循 common.js 规范</li>
</ul>
<ol start="2">
<li>A <strong>package</strong> is a file or directory that is described by a <code>package.json</code>. This can happen in a bunch of different ways!</li>
</ol>
<ul>
<li>包是一个文件或目录（目录下可以有多个文件）必须有一个 package.json 文件来描述，就可以是一个包。</li>
</ul>
<h4 id="node-js-错误调试："><a href="#node-js-错误调试：" class="headerlink" title="node.js 错误调试："></a>node.js 错误调试：</h4><ol>
<li>当开启服务后，在浏览器中输入地址，如果出现浏览问题，首先要先看 服务器控制台是否报错。如果报错，直接根据服务器报错进行排错。</li>
<li>打开浏览器开发者工具中的 “网络” 部分，查看请求是否成功发出去了</li>
</ol>
<ul>
<li>看一下请求报文是不是和我们想的一样</li>
<li>响应状态码</li>
</ul>
<h3 id="package-json-文件"><a href="#package-json-文件" class="headerlink" title="package.json 文件"></a>package.json 文件</h3><h4 id="package-json-文件的作用？"><a href="#package-json-文件的作用？" class="headerlink" title="package.json 文件的作用？"></a>package.json 文件的作用？</h4><ol>
<li>package.json 文件是一个包说明文件（项目描述文件），用来管理组织一个包（一个项目）</li>
<li>package.json 文件是一个 json 格式的文件</li>
<li>位于当前项目的根目录下</li>
</ol>
<p>元数据</p>
<h4 id="package-json-文件中常见的项有哪些？"><a href="#package-json-文件中常见的项有哪些？" class="headerlink" title="package.json 文件中常见的项有哪些？"></a>package.json 文件中常见的项有哪些？</h4><ul>
<li>name<ul>
<li>包的名字</li>
</ul>
</li>
<li>version<ul>
<li>包的版本</li>
</ul>
</li>
<li>description<ul>
<li>包描述</li>
</ul>
</li>
<li>author<ul>
<li>包的作者</li>
</ul>
</li>
<li>main<ul>
<li>包的入口 js 文件，从 main 字段这里指定的那个 js 文件开始执行</li>
</ul>
</li>
<li>dependencies<ul>
<li>当前包依赖的其他包</li>
</ul>
</li>
</ul>
<h4 id="如何创建一个-package-json-文件"><a href="#如何创建一个-package-json-文件" class="headerlink" title="如何创建一个 package.json 文件"></a>如何创建一个 package.json 文件</h4><ol>
<li>通过 <code>npm init</code> 命令 或者 <code>npm init -y</code> 或 <code>npm init -yes</code> 命令</li>
<li>手动创建一个</li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li>通过 <code>npm init -y</code> 或 <code>npm init -yes</code> 创建 package.json 文件时，执行命令所在的目录接名称中不能包含大写字母</li>
<li>package.json 文件中，项目名称本身不能包含大写字母</li>
<li>npm 更新新版本后，项目所在的文件夹如果包含中文等特殊字符，创建的时候不会提示一步一步的输入，直接报错。</li>
</ol>
<h4 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h4><ol>
<li><a href="https://docs.npmjs.com/files/package.json">package.json</a></li>
<li><a href="https://docs.npmjs.com/getting-started/using-a-package.json">Using a package.json</a></li>
</ol>
<h4 id="发布一个自己的-npm-包"><a href="#发布一个自己的-npm-包" class="headerlink" title="发布一个自己的 npm 包"></a>发布一个自己的 npm 包</h4><p>1、注册</p>
<p>2、终端输入 <code>npm login</code>，再输入账号密码</p>
<p>​ - 注意一定要将镜像源切换为<code>npm官方地址</code></p>
<p>3、将终端切换到包的根目录之后，运行<code>npm publish</code> 命令，即可将包发布到 npm 上</p>
<p>​ - 注意: 包名不能雷同</p>
<p>4、运行 npm unpublish 包名 –force 命令，即可从 npm 删除已发布的包。</p>
<ul>
<li>npm unpublish 命令只能删除 72 小时以内发布的包</li>
<li>npm unpublish 删除的包，在 24 小时内不允许重复发布</li>
</ul>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>思考：Buffer 类型产生的原因？主要用来解决什么问题？</p>
<p>看一下什么是 Buffer? 什么是 Stream?</p>
<p>一、类型介绍</p>
<ol>
<li>JavaScript 语言没有读取或操作二进制数据流的机制。</li>
<li>Node.js 中引入了 Buffer 类型使我们可以操作 TCP 流 或 文件流。</li>
<li>Buffer 类型的对象类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。（ buf.length 是固定的，不允许修改 ）</li>
<li>Buffer 是全局的，所以使用的时候无需 require() 的方式来加载</li>
</ol>
<p>二、如何创建一个 Buffer 对象</p>
<p>常见的 API 介绍</p>
<ol>
<li>创建一个 Buffer 对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 通过 Buffer.from() 创建一个 Buffer 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 通过一个字节数组来创建一个 Buffer 对象</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>, <span class="number">0x20</span>, <span class="number">0xe4</span>, <span class="number">0xb8</span>, <span class="number">0x96</span>, <span class="number">0xe7</span>, <span class="number">0x95</span>, <span class="number">0x8c</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 通过字符串来创建一个 Buffer 对象</span></span><br><span class="line"><span class="comment">// Buffer.from(string[, encoding])</span></span><br><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;你好世界！ Hello World!~&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拼接多个 Buffer 对象为一个对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buffer.concat(list[, totalLength])</span></span><br><span class="line"><span class="keyword">var</span> bufferList = [];</span><br><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(bufferList);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取字符串对应的字节个数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buffer.byteLength(string[, encoding])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(<span class="string">&quot;你好世界Hello&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>判断一个对象是否是 Buffer 类型对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buffer.isBuffer(obj)</span></span><br><span class="line"><span class="comment">// obj &lt;Object&gt;</span></span><br><span class="line"><span class="comment">// Returns: &lt;boolean&gt;</span></span><br><span class="line"><span class="comment">// Returns true if obj is a Buffer, false otherwise.</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>获取 Buffer 中的某个字节</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据索引获取 Buffer 中的某个字节（byte、octet）</span></span><br><span class="line"><span class="comment">// buf[index]</span></span><br></pre></td></tr></table></figure>

<p>6、获取 Buffer 对象中的字节的个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// buf.length</span></span><br><span class="line"><span class="comment">// 注意：length 属性不可修改</span></span><br></pre></td></tr></table></figure>

<p>三、Buffer 对象与编码</p>
<p>Node.js 目前支持的编码如下：</p>
<ol>
<li>ascii</li>
<li>utf8</li>
<li>utf16le<ul>
<li>ucs2 是 utf16le 的别名</li>
</ul>
</li>
<li>base64</li>
<li>latin1<ul>
<li>binary 是 latin1 的别名</li>
</ul>
</li>
<li>hex<ul>
<li>用两位 16 进制来表示每个字节</li>
</ul>
</li>
</ol>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;你好世界，Hello World！&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>四、思考：为什么会有 Buffer 类型？</p>
<ol>
<li>Buffer 使用来临时存储一些数据（二进制数据）</li>
<li>当我们要把一大块数据从一个地方传输到另外一个地方的时候可以通过 Buffer 对象进行传输</li>
<li>通过 Buffer 每次可以传输小部分数据，直到所有数据都传输完毕。</li>
</ol>
<p>五、补充</p>
<ol>
<li><p>Stream</p>
</li>
<li><p>Writable Stream</p>
<ul>
<li>允许 node.js 写数据到流中</li>
</ul>
</li>
<li><p>Readable Stream</p>
<ul>
<li>允许 node.js 从流中读取数据</li>
</ul>
</li>
</ol>
<h3 id="node-js-模块"><a href="#node-js-模块" class="headerlink" title="node.js 模块"></a>node.js 模块</h3><p>在 node.js 开发中一个文件就可以认为是一个模块。</p>
<p>require 的加载过程是<strong>同步</strong>的，加载完上一个模块才能加载下一个模块，readFileSync</p>
<h4 id="node-js-模块分类"><a href="#node-js-模块分类" class="headerlink" title="node.js 模块分类"></a>node.js 模块分类</h4><h5 id="核心模块（内置模块、原生模块）"><a href="#核心模块（内置模块、原生模块）" class="headerlink" title="核心模块（内置模块、原生模块）"></a><strong>核心模块（内置模块、原生模块）</strong></h5><ul>
<li><h6 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h6></li>
<li>http</li>
<li>path</li>
<li>url</li>
<li>…</li>
</ul>
<p>所有内置模块在安装 node.js 的时候就已经编译成 二进制文件，可以直接加载运行（速度较快）<br>部分内置模块，在 node.exe 这个进程启动的时候就已经默认加载了，所以可以直接使用。</p>
<h5 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h5><p><strong>按文件后缀来分</strong></p>
<p>如果加载时，没有指定后缀名，那么就按照如下顺序依次加载相应模块</p>
<ol>
<li>.js</li>
<li>.json</li>
<li>.node（C&#x2F;C++编写的模块）<br>main:app.js &#x3D;&gt; index.js &#x3D;&gt; index.json &#x3D;&gt; index.node</li>
</ol>
<h5 id="自定义模块（第三方模块）"><a href="#自定义模块（第三方模块）" class="headerlink" title="自定义模块（第三方模块）"></a>自定义模块（第三方模块）</h5><ul>
<li>mime</li>
<li>cheerio</li>
<li>moment</li>
<li>mongo</li>
<li>…</li>
</ul>
<h4 id="require-加载模块顺序"><a href="#require-加载模块顺序" class="headerlink" title="require 加载模块顺序"></a>require 加载模块顺序</h4><ol>
<li>看 require() 加载模块时传入的参数是否以 ‘.&#x2F;’ 或 ‘…&#x2F;’ 或 ‘&#x2F;’ 等等这样的路径方式开头（相对路径或绝对路径都可以）</li>
<li>是，那么会按照传入的路径直接去查询对应的模块。</li>
</ol>
<ul>
<li><p>传入的是否为具体的文件名</p>
<ul>
<li><p>require(‘.&#x2F;test.js’) 是具体的文件名</p>
<ul>
<li>直接根据给定的路径去加载模块，找到了加载成功，找不到加载失败</li>
</ul>
</li>
<li><p>require(‘.&#x2F;test’); 不是具体的文件名、</p>
<ul>
<li>第一步：根据给定的路径，依次添加文件后缀 .js、.json、.node 进行匹配，如果找不到匹配执行第二步</li>
<li>第二步：查找是否有 test 目录（尝试找 test 包）<ul>
<li>找不到：加载失败</li>
<li>找到了：依次在 test 目录下查找 package.json 文件（找到该文件后尝试找 main 字段中的入口文件）、index.js、index.json、index.node，找不到则加载失败</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="3">
<li>不是，那么就认为传入的是 “模块名称”（比如：require(‘http’)、require(‘mime’)）</li>
</ol>
<ul>
<li>是核心模块：直接加载核心模块 lib</li>
<li>不是核心模块<ul>
<li>依次递归查找 node_modules 目录中是否有相应的包<ul>
<li>从当前目录开始，依次递归查找所有父目录下的 node_modules 目录中是否包含相应的包</li>
<li>如果查找完毕磁盘根目录依然没有则加载失败</li>
<li>打印输入 module.paths 查看</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">paths</span>;</span><br></pre></td></tr></table></figure>

<h4 id="require-加载模块注意点"><a href="#require-加载模块注意点" class="headerlink" title="require 加载模块注意点"></a>require 加载模块注意点</h4><ol>
<li><p>所有模块第一次加载完毕后都会有 缓存，二次加载直接读取缓存，避免了二次开销</p>
<ul>
<li>因为有 缓存，所以模块中的代码只在第一次加载的时候执行一次</li>
</ul>
</li>
<li><p>每次加载模块的时候都优先从缓存中加载，缓存中没有的情况下才会按照 node.js 加载模块的规则去查找</p>
</li>
<li><p>核心模块在 Node.js 源码编译的时候，都已经编译为二进制执行文件，所以加载速度较快（核心模块加载的优先级仅次于 缓存加载）</p>
</li>
<li><p>核心模块都保存在 lib 目录下</p>
</li>
<li><p>试图加载一个和 核心模块 同名的 自定义模块（第三方模块）是不会成功的</p>
<ul>
<li>自定义模块要么名字不要与核心模块同名</li>
<li>要么使用路径的方式加载 …&#x2F;http</li>
</ul>
</li>
<li><p>核心模块 只能通过 模块名称 来加载（错误示例：require(‘.&#x2F;http’); 这样是无法加载 核心模块 http 的 ）</p>
</li>
<li><p>require() 加载模块使用 .&#x2F; 相对路径时，相对路径是相对当前模块，不受执行 node 命令的路径影响</p>
</li>
<li><p>建议加载文件模块的时候始终添加文件后缀名，不要省略。</p>
</li>
</ol>
<h4 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每一个 node.js 中被加载的模块其实最终都是 Module 的一个实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Module</span>(<span class="params">id, parent</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = parent;</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; parent.<span class="property">children</span>) &#123;</span><br><span class="line">    parent.<span class="property">children</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. module.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Loads a module at the given file path. Returns that module&#x27;s</span></span><br><span class="line"><span class="comment">// `exports` property.</span></span><br><span class="line"><span class="comment">// 加载给定的模块，并返回该模块中 module.exports 中的值</span></span><br><span class="line"><span class="comment">// 之所以在每个模块中都能使用 require() 函数是因为 require 函数定义在了每个模块中</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">require</span> = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="title function_">assert</span>(path, <span class="string">&quot;missing path&quot;</span>);</span><br><span class="line">  <span class="title function_">assert</span>(<span class="keyword">typeof</span> path === <span class="string">&quot;string&quot;</span>, <span class="string">&quot;path must be a string&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Module</span>.<span class="title function_">_load</span>(path, <span class="variable language_">this</span>, <span class="comment">/* isMain */</span> <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. module.js</span></span><br><span class="line"><span class="comment">// Check the cache for the requested file.</span></span><br><span class="line"><span class="comment">// 1. If a module already exists in the cache: return its exports object.</span></span><br><span class="line"><span class="comment">// 2. If the module is native: call `NativeModule.require()` with the</span></span><br><span class="line"><span class="comment">//    filename and return the result.</span></span><br><span class="line"><span class="comment">// 3. Otherwise, create a new module for the file and save it to the cache.</span></span><br><span class="line"><span class="comment">//    Then have it load  the file contents before returning its exports</span></span><br><span class="line"><span class="comment">//    object.</span></span><br><span class="line"><span class="comment">// 该方法做了 5 件事：</span></span><br><span class="line"><span class="comment">// 1. 检查 Module._cache 中是否有缓存的模块实例</span></span><br><span class="line"><span class="comment">// 2. 如果缓存中没有，那么创建一个 Moudle 实例</span></span><br><span class="line"><span class="comment">// 3. 将创建的 Module 实例保存到缓存中，供下次使用。</span></span><br><span class="line"><span class="comment">// 4. 调用 module.load() 读取模块内容，然后调用 module.compile() 编译执行（封装成一个沙箱）该模块</span></span><br><span class="line"><span class="comment">//   - 如果加载解析出错，那么从缓存中删除该模块</span></span><br><span class="line"><span class="comment">// 5. 返回 module.exports</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property">_load</span> = <span class="keyword">function</span> (<span class="params">request, parent, isMain</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">    <span class="title function_">debug</span>(<span class="string">&quot;Module._load REQUEST %s parent: %s&quot;</span>, request, parent.<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析文件名</span></span><br><span class="line">  <span class="keyword">var</span> filename = <span class="title class_">Module</span>.<span class="title function_">_resolveFilename</span>(request, parent, isMain);</span><br><span class="line">  <span class="comment">// 根据文件名到Module._cache对象上找有没有值</span></span><br><span class="line">  <span class="keyword">var</span> cachedModule = <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line">  <span class="comment">// 如果有则导出</span></span><br><span class="line">  <span class="keyword">if</span> (cachedModule) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断核心模块中有没有该属性 有则加载</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">NativeModule</span>.<span class="title function_">nonInternalExists</span>(filename)) &#123;</span><br><span class="line">    <span class="title function_">debug</span>(<span class="string">&quot;load native module %s&quot;</span>, request);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NativeModule</span>.<span class="built_in">require</span>(filename);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个模块（Module对象）</span></span><br><span class="line">  <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="keyword">new</span> <span class="title class_">Module</span>(filename, parent);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isMain) &#123;</span><br><span class="line">    process.<span class="property">mainModule</span> = <span class="variable language_">module</span>;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">id</span> = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存</span></span><br><span class="line">  <span class="title class_">Module</span>.<span class="property">_cache</span>[filename] = <span class="variable language_">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尝试加载模块</span></span><br><span class="line">  <span class="title function_">tryModuleLoad</span>(<span class="variable language_">module</span>, filename);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// !!!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. module.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tryModuleLoad</span>(<span class="params"><span class="variable language_">module</span>, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> threw = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 真正加载该模块</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">load</span>(filename);</span><br><span class="line">    threw = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// finally: 不管try报错与否都要执行这里的代码</span></span><br><span class="line">    <span class="keyword">if</span> (threw) &#123;</span><br><span class="line">      <span class="comment">// 从缓存中删除该模块</span></span><br><span class="line">      <span class="keyword">delete</span> <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. module.js</span></span><br><span class="line"><span class="comment">// Given a file name, pass it to the proper extension handler.</span></span><br><span class="line"><span class="comment">// 该模块中对要加载的模块进行编译</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">load</span> = <span class="keyword">function</span> (<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="title function_">debug</span>(<span class="string">&quot;load %j for module %j&quot;</span>, filename, <span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">assert</span>(!<span class="variable language_">this</span>.<span class="property">loaded</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = filename;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">paths</span> = <span class="title class_">Module</span>.<span class="title function_">_nodeModulePaths</span>(path.<span class="title function_">dirname</span>(filename));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有filename则默认是.js</span></span><br><span class="line">  <span class="keyword">var</span> extension = path.<span class="title function_">extname</span>(filename) || <span class="string">&quot;.js&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Module</span>.<span class="property">_extensions</span>[extension]) extension = <span class="string">&quot;.js&quot;</span>;</span><br><span class="line">  <span class="title class_">Module</span>.<span class="property">_extensions</span>[extension](<span class="variable language_">this</span>, filename); <span class="comment">// 此行代码对被加载的模块实现了编译</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. module.js （编译）</span></span><br><span class="line"><span class="comment">// Native extension for .js</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property">_extensions</span>[<span class="string">&quot;.js&quot;</span>] = <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, filename</span>) &#123;</span><br><span class="line">  <span class="comment">// 说明 require() 加载模块是同步执行的</span></span><br><span class="line">  <span class="keyword">var</span> content = fs.<span class="title function_">readFileSync</span>(filename, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">module</span>.<span class="title function_">_compile</span>(internalModule.<span class="title function_">stripBOM</span>(content), filename);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. module.js</span></span><br><span class="line"><span class="comment">// Run the file contents in the correct scope or sandbox. Expose</span></span><br><span class="line"><span class="comment">// the correct helper variables (require, module, exports) to</span></span><br><span class="line"><span class="comment">// the file.</span></span><br><span class="line"><span class="comment">// Returns exception, if any.</span></span><br><span class="line"><span class="comment">// 编译（用一个沙箱来包装）执行该模块</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_compile</span> = <span class="keyword">function</span> (<span class="params">content, filename</span>) &#123;</span><br><span class="line">  <span class="comment">// Remove shebang</span></span><br><span class="line">  <span class="keyword">var</span> contLen = content.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (contLen &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      content.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) === <span class="number">35</span> <span class="comment">/*#*/</span> &amp;&amp;</span><br><span class="line">      content.<span class="title function_">charCodeAt</span>(<span class="number">1</span>) === <span class="number">33</span> <span class="comment">/*!*/</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (contLen === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// Exact match</span></span><br><span class="line">        content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Find end of shebang line and slice it off</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; contLen; ++i) &#123;</span><br><span class="line">          <span class="keyword">var</span> code = content.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">          <span class="keyword">if</span> (code === <span class="number">10</span> <span class="comment">/*\n*/</span> || code === <span class="number">13</span> <span class="comment">/*\r*/</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i === contLen) content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Note that this actually includes the newline character(s) in the</span></span><br><span class="line">          <span class="comment">// new output. This duplicates the behavior of the regular expression</span></span><br><span class="line">          <span class="comment">// that was previously used to replace the shebang line</span></span><br><span class="line">          content = content.<span class="title function_">slice</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create wrapper function</span></span><br><span class="line">  <span class="keyword">var</span> wrapper = <span class="title class_">Module</span>.<span class="title function_">wrap</span>(content);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行模块</span></span><br><span class="line">  <span class="keyword">var</span> compiledWrapper = vm.<span class="title function_">runInThisContext</span>(wrapper, &#123;</span><br><span class="line">    <span class="attr">filename</span>: filename,</span><br><span class="line">    <span class="attr">lineOffset</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">displayErrors</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">_debugWaitConnect</span> &amp;&amp; process.<span class="property">_eval</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!resolvedArgv) &#123;</span><br><span class="line">      <span class="comment">// we enter the repl if we&#x27;re not given a filename argument.</span></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">argv</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">        resolvedArgv = <span class="title class_">Module</span>.<span class="title function_">_resolveFilename</span>(process.<span class="property">argv</span>[<span class="number">1</span>], <span class="literal">null</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolvedArgv = <span class="string">&quot;repl&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set breakpoint on module start</span></span><br><span class="line">    <span class="keyword">if</span> (filename === resolvedArgv) &#123;</span><br><span class="line">      <span class="keyword">delete</span> process.<span class="property">_debugWaitConnect</span>;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">Debug</span> = vm.<span class="title function_">runInDebugContext</span>(<span class="string">&quot;Debug&quot;</span>);</span><br><span class="line">      <span class="title class_">Debug</span>.<span class="title function_">setBreakPoint</span>(compiledWrapper, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> dirname = path.<span class="title function_">dirname</span>(filename);</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">require</span> = internalModule.<span class="property">makeRequireFunction</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">var</span> args = [<span class="variable language_">this</span>.<span class="property">exports</span>, <span class="built_in">require</span>, <span class="variable language_">this</span>, filename, dirname];</span><br><span class="line">  <span class="keyword">var</span> depth = internalModule.<span class="property">requireDepth</span>;</span><br><span class="line">  <span class="keyword">if</span> (depth === <span class="number">0</span>) stat.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">var</span> result = compiledWrapper.<span class="title function_">apply</span>(<span class="variable language_">this</span>.<span class="property">exports</span>, args);</span><br><span class="line">  <span class="keyword">if</span> (depth === <span class="number">0</span>) stat.<span class="property">cache</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="补充-CommonJS-规范"><a href="#补充-CommonJS-规范" class="headerlink" title="补充 CommonJS 规范"></a>补充 CommonJS 规范</h4><ol>
<li><p><a href="http://www.commonjs.org/">CommonJS 规范</a></p>
</li>
<li><p><a href="http://www.commonjs.org/specs/modules/1.0/">模块的定义</a></p>
</li>
<li><p>总结：CommonJS 是为 JavaScript 语言制定的一种 模块规范、编程 API 规范</p>
</li>
<li><p>node.js 遵循了 CommonJS 规范</p>
</li>
<li><p>参考：<a href="https://www.cnblogs.com/littlebirdlbw/p/5670633.html">https://www.cnblogs.com/littlebirdlbw/p/5670633.html</a></p>
<p><a href="https://blog.csdn.net/u014262793/article/details/114554180">https://blog.csdn.net/u014262793/article/details/114554180</a></p>
</li>
</ol>
<h4 id="关于-node-js-中-Module-详细介绍"><a href="#关于-node-js-中-Module-详细介绍" class="headerlink" title="关于 node.js 中 Module 详细介绍"></a>关于 node.js 中 Module 详细介绍</h4><ul>
<li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/modules.html">Module</a></li>
</ul>
<h3 id="乱七八糟-1"><a href="#乱七八糟-1" class="headerlink" title="乱七八糟 1"></a>乱七八糟 1</h3><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><h5 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h5><p>url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> urlString =</span><br><span class="line">  <span class="string">&quot;https://www.baidu.com:443/ad/index.html?id=8&amp;name=mouse#tag=110&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> parsedStr = url.<span class="title function_">parse</span>(urlString);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsedStr);</span><br></pre></td></tr></table></figure>

<h5 id="format"><a href="#format" class="headerlink" title="format"></a>format</h5><p>url.format(urlObject)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> urlObject = &#123;</span><br><span class="line">  <span class="attr">protocol</span>: <span class="string">&quot;https:&quot;</span>,</span><br><span class="line">  <span class="attr">slashes</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">auth</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;www.baidu.com:443&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&quot;443&quot;</span>,</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&quot;www.baidu.com&quot;</span>,</span><br><span class="line">  <span class="attr">hash</span>: <span class="string">&quot;#tag=110&quot;</span>,</span><br><span class="line">  <span class="attr">search</span>: <span class="string">&quot;?id=8&amp;name=mouse&quot;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="string">&quot;8&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;mouse&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">pathname</span>: <span class="string">&quot;/ad/index.html&quot;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/ad/index.html?id=8&amp;name=mouse&quot;</span>,</span><br><span class="line">  <span class="attr">href</span>: <span class="string">&quot;https://www.baidu.com:443/ad/index.html?id=8&amp;name=mouse#tag=110&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> parsedObj = url.<span class="title function_">format</span>(urlObject);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsedObj);</span><br></pre></td></tr></table></figure>

<h5 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h5><p>url.resolve(from, to)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> a = url.<span class="title function_">resolve</span>(<span class="string">&quot;/one/two/three&quot;</span>, <span class="string">&quot;four&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = url.<span class="title function_">resolve</span>(<span class="string">&quot;http://example.com/two/three&quot;</span>, <span class="string">&quot;/one&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> c = url.<span class="title function_">resolve</span>(<span class="string">&quot;/one/two/three&quot;</span>, <span class="string">&quot;../four&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></table></figure>

<h5 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams"></a>URLSearchParams</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const urlParams = new URLSearchParams(/* url中的search */)</span><br><span class="line">urlParams.get(/* 键 */)</span><br><span class="line">注: 浏览器中也有该方法</span><br></pre></td></tr></table></figure>

<h4 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h4><h5 id="parse-1"><a href="#parse-1" class="headerlink" title="parse"></a>parse</h5><p>querystring.parse(str[, sep[, eq[, options]]])</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> qs = <span class="string">&quot;x=3&amp;y=4&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> parsed = querystring.<span class="title function_">parse</span>(qs);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsed);</span><br></pre></td></tr></table></figure>

<h5 id="stringify"><a href="#stringify" class="headerlink" title="stringify"></a>stringify</h5><p>querystring.stringify(obj[, sep[, eq[, options]]])</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> qo = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> parsed = querystring.<span class="title function_">stringify</span>(qo);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsed);</span><br></pre></td></tr></table></figure>

<h5 id="escape-x2F-unescape"><a href="#escape-x2F-unescape" class="headerlink" title="escape&#x2F;unescape"></a>escape&#x2F;unescape</h5><p>querystring.escape(str)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;id=3&amp;city=北京&amp;url=https://www.baidu.com&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> escaped = querystring.<span class="built_in">escape</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(escaped);</span><br></pre></td></tr></table></figure>

<p>querystring.unescape(str)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str =</span><br><span class="line">  <span class="string">&quot;id%3D3%26city%3D%E5%8C%97%E4%BA%AC%26url%3Dhttps%3A%2F%2Fwww.baidu.com&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> unescaped = querystring.<span class="built_in">unescape</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unescaped);</span><br></pre></td></tr></table></figure>

<h4 id="http-x2F-https"><a href="#http-x2F-https" class="headerlink" title="http&#x2F;https"></a>http&#x2F;https</h4><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、接口 2、跨域</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> url = request.<span class="property">url</span>.<span class="title function_">substr</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  response.<span class="title function_">writeHeader</span>(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  https.<span class="title function_">get</span>(</span><br><span class="line">    <span class="string">`https://www.fastmock.site/mock/d4c75f77a8eef86dc58b3fced5bf604e/laoxu/api/getData`</span>,</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        data += chunk;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      res.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        response.<span class="title function_">end</span>(</span><br><span class="line">          <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">ret</span>: <span class="literal">true</span>,</span><br><span class="line">            data,</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;localhost:8080&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="post：服务器提交（攻击）"><a href="#post：服务器提交（攻击）" class="headerlink" title="post：服务器提交（攻击）"></a>post：服务器提交（攻击）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postData = querystring.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小锦儿&quot;</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&quot;国服第一李白天花板&quot;</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;我的心可不冷&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;刺客&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">protocol</span>: <span class="string">&quot;http:&quot;</span>,</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/data&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(postData),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> req = https.<span class="title function_">request</span>(options, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> (data += chunk));</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  req.<span class="title function_">write</span>(postData);</span><br><span class="line">  req.<span class="title function_">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   doPost()</span></span><br><span class="line"><span class="comment">// &#125;, 1000)</span></span><br></pre></td></tr></table></figure>

<h4 id="跨域方式"><a href="#跨域方式" class="headerlink" title="跨域方式"></a>跨域方式</h4><h5 id="跨域：jsonp"><a href="#跨域：jsonp" class="headerlink" title="跨域：jsonp"></a>跨域：jsonp</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@3.6.1/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- jsonp原理: 动态创建script标签 设置其src 利用了script标签的src属性发起请求不受同源策略的限制的特点发起请求 script标签将追加到页面</span><br><span class="line">  如果希望能够自定义函数调用的名字 需要给后端传递一个标识 后端会获取到该标识的值作为返回的函数调用的名字 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- jsonp的缺点 --&gt;</span><br><span class="line">  &lt;!-- 1、只支持get请求 --&gt;</span><br><span class="line">  &lt;!-- 2、不安全 后端可能返回一段攻击脚本 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- jsonp的封装 --&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    function ajax(&#123; url, data, dataType, jsonp, jsonpCallback &#125;) &#123;</span><br><span class="line">      // 返回一个promise对象</span><br><span class="line">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        // 启用jsonp的判断</span><br><span class="line">        if (dataType == &#x27;jsonp&#x27;) &#123;</span><br><span class="line">          // 设置 = 左边的键</span><br><span class="line">          jsonp = jsonp || &#x27;callback&#x27;</span><br><span class="line">          // 设置 = 右边的值 (后端返回的函数调用的名字)</span><br><span class="line">          jsonpCallback = jsonpCallback || &#x27;jQuery&#x27; + (Math.random() * 10 + &#x27;&#x27;).substring(2) + &#x27;_&#x27; + new Date().getTime()</span><br><span class="line"></span><br><span class="line">          // 声明一个和传递给后端的函数调用名字一样的函数</span><br><span class="line">          // 为了方便返回的函数调用能够在任意位置调用到该函数</span><br><span class="line">          // 我们将其挂载到全局</span><br><span class="line">          window[jsonpCallback] = function (data) &#123;</span><br><span class="line">            // 自己删除自己</span><br><span class="line">            script.remove()</span><br><span class="line">            // 父级删除</span><br><span class="line">            // document.body.removeChild(script)</span><br><span class="line">            resolve(data)</span><br><span class="line">          &#125;</span><br><span class="line">          // function sayHi(data)&#123;console.log(data)&#125;</span><br><span class="line">          // sayHi(&#123;q: &quot;j&quot;, p: false,…&#125;)</span><br><span class="line"></span><br><span class="line">          // 处理data  &#123;wd:&#x27;j&#x27;&#125; =&gt; wd=j&amp;kw=q</span><br><span class="line">          let arr = []</span><br><span class="line">          for (let key in data) &#123;</span><br><span class="line">            // [&#x27;wd=j&#x27;, &#x27;kw=q&#x27;]</span><br><span class="line">            arr.push(`$&#123;key&#125;=$&#123;data[key]&#125;`)</span><br><span class="line">          &#125;</span><br><span class="line">          arr = arr.join(&#x27;&amp;&#x27;) // wd=j&amp;kw=q</span><br><span class="line">          // 动态创建script标签</span><br><span class="line">          let script = document.createElement(&#x27;script&#x27;)</span><br><span class="line">          // 设置src属性</span><br><span class="line">          script.src = `$&#123;url&#125;?$&#123;jsonp&#125;=$&#123;jsonpCallback&#125;&amp;$&#123;arr&#125;&amp;_=$&#123;new Date().getTime()&#125;`</span><br><span class="line">          // 追加到页面</span><br><span class="line">          document.body.appendChild(script)</span><br><span class="line"></span><br><span class="line">          // 最终的请求的url如下:</span><br><span class="line">          // https://www.baidu.com/sugrec?prod=pc&amp;from=pc_web&amp;callback=jQuery452802181544814_1666055167286&amp;wd=j&amp;_=1666055167286</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 请求百度接口</span><br><span class="line">    // ajax(&#123;</span><br><span class="line">    //   url: &#x27;https://www.baidu.com/sugrec?prod=pc&amp;from=pc_web&#x27;,</span><br><span class="line">    //   data: &#123; wd: &#x27;j&#x27; &#125;,</span><br><span class="line">    //   dataType: &#x27;jsonp&#x27;,</span><br><span class="line">    //   jsonp: &#x27;cb&#x27;,</span><br><span class="line">    //   jsonpCallback: &#x27;sayHi&#x27;</span><br><span class="line">    // &#125;).then((data)=&gt; &#123;</span><br><span class="line">    //   console.log(data)</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 请求自己的后端接口</span><br><span class="line">    ajax(&#123;</span><br><span class="line">      url: &#x27;http://localhost:3000/search&#x27;,</span><br><span class="line">      data: &#123; wd: &#x27;j&#x27; &#125;,</span><br><span class="line">      dataType: &#x27;jsonp&#x27;,</span><br><span class="line">      jsonp: &#x27;cb&#x27;,</span><br><span class="line">      jsonpCallback: &#x27;sayHi&#x27;</span><br><span class="line">    &#125;).then((data) =&gt; &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- jQuery的jsonp实现跨域 --&gt;</span><br><span class="line">  &lt;!-- &lt;script&gt;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: &#x27;https://www.baidu.com/sugrec?prod=pc&amp;from=pc_web&#x27;,</span><br><span class="line">      method: &#x27;get&#x27;,</span><br><span class="line">      data: &#123;wd: &#x27;j&#x27;&#125;,</span><br><span class="line">      // 启用jsonp</span><br><span class="line">      dataType: &#x27;jsonp&#x27;,</span><br><span class="line">      // = 左边的键</span><br><span class="line">      jsonp: &#x27;cb&#x27;,</span><br><span class="line">      // = 右边的值(函数调用的名字)</span><br><span class="line">      jsonpCallback: &#x27;sayHi&#x27;,</span><br><span class="line">      // success: (res)=&gt; &#123;</span><br><span class="line">      //   console.log(res);</span><br><span class="line">      // &#125;</span><br><span class="line">    &#125;).then((res)=&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // jQuery默认生成的 = 左右两边的键值对</span><br><span class="line">    // https://www.baidu.com/sugrec?prod=pc&amp;from=pc_web&amp;callback=jQuery36102849457457737017_1666053704489&amp;wd=j&amp;_=1666053704490</span><br><span class="line"></span><br><span class="line">    // 指定jQuery生成的 = 左右两边的键值对</span><br><span class="line">    // https://www.baidu.com/sugrec?prod=pc&amp;from=pc_web&amp;cb=sayHi&amp;wd=j&amp;_=1666053818124</span><br><span class="line">  &lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">s</span><br><span class="line">  &lt;!-- 百度的做法 --&gt;</span><br><span class="line">  &lt;!-- &lt;script&gt;</span><br><span class="line">    function sayHi(data) &#123;</span><br><span class="line">      console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;script src=&quot;https://www.baidu.com/sugrec?prod=pc&amp;from=pc_web&amp;wd=j&amp;cb=sayHi&quot;&gt;&lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 上面请求得到的结果如下:  --&gt;</span><br><span class="line">&lt;!-- 传递了一个cb字段 后端会获取到其对应的值作为返回的函数调用名字 所以我们只需要在当前页面上声明一个和cb字段值一样的函数 返回的函数调用就可以调用到该函数 从而通过参数将数据传递进去 --&gt;</span><br><span class="line">&lt;!-- &lt;script&gt;</span><br><span class="line">    sayHi(&#123; &quot;q&quot;: &quot;j&quot;, &quot;p&quot;: false, &quot;g&quot;: [&#123; &quot;type&quot;: &quot;sug&quot;, &quot;sa&quot;: &quot;s_1&quot;, &quot;q&quot;: &quot;聚焦二十大&quot; &#125;, &#123; &quot;type&quot;: &quot;sug&quot;, &quot;sa&quot;: &quot;s_2&quot;, &quot;q&quot;: &quot;剑来&quot; &#125;] &#125;) &lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- jQuery110206832760878043005_1665989839042(&#123;&quot;q&quot;:&quot;j&quot;,&quot;p&quot;:false,&quot;g&quot;:[&#123;&quot;type&quot;:&quot;sug&quot;,&quot;sa&quot;:&quot;s_1&quot;,&quot;q&quot;:&quot;聚焦二十大&quot;&#125;) --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="跨域：CORS"><a href="#跨域：CORS" class="headerlink" title="跨域：CORS"></a>跨域：CORS</h5><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>)=&gt;</span>{</span><br><span class="line">  <span class="comment">// console.log(req.headers.cookie)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>)</span><br><span class="line">  <span class="comment">// 访问源: http://127.0.0.1:5500</span></span><br><span class="line">  <span class="keyword">let</span> origin = req.<span class="property">headers</span>.<span class="property">origin</span></span><br><span class="line">  <span class="comment">// 白名单</span></span><br><span class="line">  <span class="keyword">let</span> whiteList = [<span class="string">'http://127.0.0.1:5500'</span>, <span class="string">'http://127.0.0.1:3500'</span>]</span><br><span class="line">  <span class="comment">// 能进判断则证明是我白名单中的源</span></span><br><span class="line">  <span class="keyword">if</span>(whiteList.<span class="title function_">includes</span>(origin)){</span><br><span class="line">    <span class="comment">// 允许所有源访问</span></span><br><span class="line">    <span class="comment">// res.setHeader('Access-Control-Allow-Origin', '*')</span></span><br><span class="line">    <span class="comment">// 允许指定源访问</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line">    <span class="comment">// 设置允许哪个头(自定义)访问 多个使用 , 隔开</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'myheader'</span>)</span><br><span class="line">    <span class="comment">// 设置允许哪种方式访问</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT,DELETE'</span>)</span><br><span class="line">    <span class="comment">// 设置预检的有效期</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// 允许客户端携带凭证</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 告诉客户端 设置的header是可以使用的</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'serverHeader'</span>)</span><br><span class="line">    <span class="comment">// 服务器给客户端响应自定义的头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">'serverHeader'</span>, <span class="string">'333333'</span>)</span><br><span class="line">  }</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">'1111'</span>)</span><br><span class="line">}).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">()=&gt;</span>{</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'3000启动'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置允许访问的源 *表示所有源都能访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line"><span class="comment">// 设置允许指定的源访问 </span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line"><span class="comment">// 设置允许哪个头访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// 设置允许哪种方式访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line"><span class="comment">// 设置预检的有效期</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 允许客户端携带凭证</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 告诉客户端 设置的header是可以使用的</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'mycookie,mycookie2'</span>)</span><br></pre></td></tr></tbody></table>

<table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">'put'</span>,<span class="string">'http://127.0.0.1:3000'</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 携带自定义的头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// xhr.setRequestHeader('myheader', '11111')</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置cookie</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">'stuId=6666666'</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// xhr.cookie = '6666666'</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 允许携带凭证 =&gt; cookie</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">withCredentials</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>){</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getResponseHeader</span>(<span class="string">'serverHeader'</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">      }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table>

<h5 id="跨域：middleware（http-proxy-middware）"><a href="#跨域：middleware（http-proxy-middware）" class="headerlink" title="跨域：middleware（http-proxy-middware）"></a>跨域：middleware（http-proxy-middware）</h5><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> { createProxyMiddleware } = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">let</span> url = req.<span class="property">url</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, {</span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^\/api/</span>.<span class="title function_">test</span>(url)) {</span><br><span class="line">    <span class="keyword">let</span> apiProxy = <span class="title function_">createProxyMiddleware</span>(<span class="string">'/api'</span>, { </span><br><span class="line">      <span class="comment">// https://api.it120.cc/fyy/shop/goods/list</span></span><br><span class="line">      <span class="attr">target</span>: <span class="string">'https://api.it120.cc'</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: {</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="comment">// http-proy-middleware 在Node.js中使用的方法</span></span><br><span class="line">    <span class="title function_">apiProxy</span>(req, res)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">switch</span> (url) {</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'/index.html'</span>:</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">'index.html'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'/search.html'</span>:</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">'search.html'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">'[404]page not found.'</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}).<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br></pre></td></tr></tbody></table>

<table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// https://api.it120.cc/fyy/shop/goods/list</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">'get'</span>,<span class="string">'http://localhost:3000/api/fyy/shop/goods/list'</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>){</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">      }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table>

<h4 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h4><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> {</span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, {</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json;charset=utf-8'</span></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = {</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">'https:'</span>,</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">'meizu.com'</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">'GET'</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> req = https.<span class="title function_">request</span>(options, <span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">''</span></span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> {</span><br><span class="line">      data += chunk</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">'end'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="title function_">filterData</span>(data)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">filterData</span>(<span class="params">data</span>) {</span><br><span class="line">      <span class="comment">// 转码</span></span><br><span class="line">    data = iconv.<span class="title function_">decode</span>(data, <span class="string">'gbk'</span>)</span><br><span class="line">    <span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(data)</span><br><span class="line">    <span class="keyword">let</span> $movieList = $(<span class="string">'.movie-item'</span>)</span><br><span class="line">    <span class="keyword">let</span> movies = []</span><br><span class="line">    $movieList.<span class="title function_">each</span>(<span class="function">(<span class="params">index, value</span>) =&gt;</span> {</span><br><span class="line">      movies.<span class="title function_">push</span>({</span><br><span class="line">        <span class="attr">title</span>: $(value).<span class="title function_">find</span>(<span class="string">'.movie-title'</span>).<span class="title function_">attr</span>(<span class="string">'title'</span>),</span><br><span class="line">        <span class="attr">score</span>: $(value).<span class="title function_">find</span>(<span class="string">'.movie-score i'</span>).<span class="title function_">text</span>(),</span><br><span class="line">      })</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(movies))</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  req.<span class="title function_">end</span>()</span><br><span class="line">}).<span class="title function_">listen</span>(<span class="number">9000</span>)</span><br></pre></td></tr></tbody></table>

<h3 id="乱七八糟-2"><a href="#乱七八糟-2" class="headerlink" title="乱七八糟 2"></a>乱七八糟 2</h3><h4 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h4><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyEventEmitter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> {}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">MyEventEmitter</span>()</span><br><span class="line"></span><br><span class="line">event.<span class="title function_">on</span>(<span class="string">'play'</span>, <span class="function">(<span class="params">movie</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(movie)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">event.<span class="title function_">emit</span>(<span class="string">'play'</span>, <span class="string">'萨瓦迪卡'</span>)</span><br><span class="line">event.<span class="title function_">emit</span>(<span class="string">'play'</span>, <span class="string">'撒由那拉'</span>)</span><br></pre></td></tr></tbody></table>

<h4 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h4><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> fsP = <span class="built_in">require</span>(<span class="string">'fs'</span>).<span class="property">promises</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件夹</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">'./logs'</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done.'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件夹改名</span></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">'./logs'</span>, <span class="string">'./log'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">'./log'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done.'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写内容到文件里</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(</span><br><span class="line">  <span class="string">'./logs/log1.txt'</span>,</span><br><span class="line">  <span class="string">'hello'</span>,</span><br><span class="line">  <span class="comment">// 错误优先的回调函数</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'文件创建成功'</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给文件追加内容</span></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">'./logs/log1.txt'</span>, <span class="string">'\nworld'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done.'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">'./logs/log1.txt'</span>, <span class="string">'utf-8'</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// fsPromises</span></span><br><span class="line">fs.<span class="property">promises</span>.<span class="title function_">readFile</span>(<span class="string">"./a.txt"</span>) </span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) { </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result); </span><br><span class="line">}) </span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) { </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(error); </span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// async 改造</span></span><br><span class="line"><span class="keyword">const</span> fsP = <span class="built_in">require</span>(<span class="string">'fs'</span>).<span class="property">promises</span></span><br><span class="line">;(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> fsP.<span class="title function_">readFile</span>(<span class="string">'./04-demo.txt'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">'./logs/log1.txt'</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done.'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量写文件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">  fs.<span class="title function_">writeFile</span>(<span class="string">`./logs/log-<span class="subst">${i}</span>.txt`</span>, <span class="string">`log-<span class="subst">${i}</span>`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done.'</span>)</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件/目录信息</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">'./'</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> {</span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> {</span><br><span class="line">    fs.<span class="title function_">stat</span>(<span class="string">`./<span class="subst">${value}</span>`</span>, <span class="function">(<span class="params">err, stats</span>) =&gt;</span> {</span><br><span class="line">      <span class="comment">// console.log(value + ':' + stats.size)</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value + <span class="string">' is '</span> + (stats.<span class="title function_">isDirectory</span>() ? <span class="string">'directory'</span> : <span class="string">'file'</span>))</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归读取</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myReadDir</span>(<span class="params">path</span>){</span><br><span class="line">  fs.<span class="title function_">readdir</span>(path, <span class="function">(<span class="params">err, data</span>)=&gt;</span> {</span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> {</span><br><span class="line">      <span class="comment">// ./logs/aaa  ./logs/aaa/aaa.txt</span></span><br><span class="line">      fs.<span class="title function_">stat</span>(<span class="string">`<span class="subst">${path}</span>/<span class="subst">${item}</span>`</span>, <span class="function">(<span class="params">err, stats</span>) =&gt;</span> {</span><br><span class="line">        <span class="comment">// 如果是目录</span></span><br><span class="line">        <span class="keyword">if</span>(stats.<span class="title function_">isDirectory</span>()){</span><br><span class="line">          <span class="comment">// 递归 ./logs/aaa</span></span><br><span class="line">          <span class="title function_">myReadDir</span>(<span class="string">`<span class="subst">${path}</span>/<span class="subst">${item}</span>`</span>)</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">          <span class="comment">// 读取文件</span></span><br><span class="line">          fs.<span class="title function_">readFile</span>(<span class="string">`<span class="subst">${path}</span>/<span class="subst">${item}</span>`</span>, <span class="string">'utf8'</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span>{</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">          })</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"><span class="title function_">myReadDir</span>(<span class="string">'./'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读取文件</span></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">  <span class="keyword">const</span> content = fs.<span class="title function_">readFileSync</span>(<span class="string">'./logs/log-1.txt'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)</span><br><span class="line">} <span class="keyword">catch</span> (e) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取文件：方法一</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">'./logs/log-0.txt'</span>, <span class="string">'utf-8'</span>, <span class="function">(<span class="params">err, content</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)</span><br><span class="line">})</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取文件：方法二</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">'./logs/log-0.txt'</span>, <span class="string">'utf-8'</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取文件：方法三</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFile</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> {</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">'./logs/log-0.txt'</span>, <span class="string">'utf-8'</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> {</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">;(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">getFile</span>())</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取文件：方法四</span></span><br><span class="line"><span class="keyword">const</span> fsp = fsP.<span class="title function_">readFile</span>(<span class="string">'./logs/log-1.txt'</span>, <span class="string">'utf-8'</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fsP)</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch 监测文件变化</span></span><br><span class="line">fs.<span class="title function_">watch</span>(<span class="string">'./logs/log-0.txt'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'文件有变化'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table>

<h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><table><tbody><tr><td class="code"><pre><span class="line">为什么要需要流?</span><br><span class="line">因为在node中读取文件的方式有两种，一个是利用fs模块，一个是利用流来读取。如果读取小文件，我们可以使用fs读取，fs读取文件的时候，是将文件一次性读取到本地内存。而如果读取一个大文件，一次性读取会占用大量内存，效率很低，这个时候需要用流来读取。流是将数据分割成段，一段一段的读取，可以控制速率,效率很高,不会占用太大的内存。gulp的task任务，文件压缩，和http中的请求和响应等功能的实现都是基于流来实现的。因此，系统学习下流还是很有必要的</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">// 可写流</span></span><br><span class="line"><span class="keyword">const</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">'./data.txt'</span>)</span><br><span class="line"><span class="comment">// on: 为对象绑定一个事件</span></span><br><span class="line"><span class="comment">// once: 绑定一个一次性的事件处理函数 该事件会在触发一次后自动失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听可写流的开启</span></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">'open'</span>, <span class="function">()=&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'可写流开启了 开始写入数据'</span>)</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 监听可写流的关闭</span></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">'close'</span>, <span class="function">()=&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'可写流关闭了 无法写入数据'</span>)</span><br><span class="line">})</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">'今天周一 好happy'</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">'今天周二 有点happy'</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">'今天周三 不开森'</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">'今天周四 很难过'</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">'今天周五 崩溃了'</span>)</span><br><span class="line"><span class="comment">// 关闭可写流</span></span><br><span class="line"><span class="comment">// 'close' 事件触发后，该流将不会再触发任何事件。</span></span><br><span class="line">ws.<span class="title function_">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可读流</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">// 创建可读流</span></span><br><span class="line"><span class="keyword">const</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">'./任文平.mp4'</span>)</span><br><span class="line">rs.<span class="title function_">once</span>(<span class="string">'open'</span>, <span class="function">()=&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'可读流开启 开始读数据 ...'</span>);</span><br><span class="line">})</span><br><span class="line">rs.<span class="title function_">once</span>(<span class="string">'close'</span>, <span class="function">()=&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'可读流关闭 停止读数据 ...'</span>);</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 不要用once监听 因为数据比较大一次性是读不完的</span></span><br><span class="line"><span class="comment">// 因为读取是每次读取一部分 所以监听data事件 rs会自动读取</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>)=&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk.<span class="property">length</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table>

<h4 id="复制案例"><a href="#复制案例" class="headerlink" title="复制案例"></a>复制案例</h4><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">'./任文平.mp4'</span>)</span><br><span class="line"><span class="keyword">const</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">'./任我行.mp4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将可读流可写流建立通道</span></span><br><span class="line">rs.<span class="title function_">pipe</span>(ws)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ws.once('open', ()=&gt; {</span></span><br><span class="line"><span class="comment">//   console.log('可写流开启了 可以开始写入数据')</span></span><br><span class="line"><span class="comment">// })</span></span><br><span class="line"><span class="comment">// // 监听可写流的关闭</span></span><br><span class="line"><span class="comment">// ws.once('close', ()=&gt; {</span></span><br><span class="line"><span class="comment">//   console.log('可写流关闭了 无法写入数据')</span></span><br><span class="line"><span class="comment">// })</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rs.on('open', ()=&gt; {</span></span><br><span class="line"><span class="comment">//   console.log('可读流开启 ~');</span></span><br><span class="line"><span class="comment">// })</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rs.on('data', (chunk) =&gt; {</span></span><br><span class="line"><span class="comment">//   console.log('开始读数据 ...')</span></span><br><span class="line"><span class="comment">//   ws.write(chunk)</span></span><br><span class="line"><span class="comment">// })</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rs.on('close', ()=&gt; {</span></span><br><span class="line"><span class="comment">//   console.log('可读流关闭 ~');</span></span><br><span class="line"><span class="comment">//   // 'end' 事件将在流中再没有数据可供消费时触发</span></span><br><span class="line"><span class="comment">//   ws.end()</span></span><br><span class="line"><span class="comment">// })</span></span><br></pre></td></tr></tbody></table>

<h4 id="Zlib"><a href="#Zlib" class="headerlink" title="Zlib"></a>Zlib</h4><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> gzip = zlib.<span class="title function_">createGzip</span>()</span><br><span class="line"><span class="keyword">const</span> readstream = fs.<span class="title function_">createReadStream</span>(<span class="string">'./logs/Buffer.png'</span>)</span><br><span class="line"><span class="keyword">const</span> writestream = fs.<span class="title function_">createWriteStream</span>(<span class="string">'./log.png.zip'</span>)</span><br><span class="line">readstream</span><br><span class="line">  .<span class="title function_">pipe</span>(gzip)</span><br><span class="line">  .<span class="title function_">pipe</span>(writestream)</span><br><span class="line"></span><br><span class="line">参考网址: <span class="attr">https</span>:<span class="comment">//segmentfault.com/q/1010000004256619</span></span><br></pre></td></tr></tbody></table>

<h4 id="ReadLine"><a href="#ReadLine" class="headerlink" title="ReadLine"></a>ReadLine</h4><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>({</span><br><span class="line">  <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">  <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">question</span>(<span class="string">'What do you think of Node.js? '</span>, <span class="function">(<span class="params">answer</span>) =&gt;</span> {</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Log the answer in a database</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Thank you for your valuable feedback: <span class="subst">${answer}</span>`</span>)</span><br><span class="line"></span><br><span class="line">  rl.<span class="title function_">close</span>()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table>

<h4 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h4><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">'abcdefg'</span></span><br><span class="line"><span class="keyword">const</span> hash = crypto.<span class="title function_">createHmac</span>(<span class="string">'sha256'</span>, secret)</span><br><span class="line">                   .<span class="title function_">update</span>(<span class="string">'I love you'</span>)</span><br><span class="line">                   .<span class="title function_">digest</span>(<span class="string">'hex'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash)</span><br></pre></td></tr></tbody></table>

<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>( <span class="keyword">function</span> (<span class="params"> req, res </span>) {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> ( req.<span class="property">url</span> ) {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/home'</span>:</span><br><span class="line">      res.<span class="title function_">write</span>(<span class="string">'home'</span>)</span><br><span class="line">      res.<span class="title function_">end</span>()</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/mine'</span>:</span><br><span class="line">      res.<span class="title function_">write</span>(<span class="string">'mine'</span>)</span><br><span class="line">      res.<span class="title function_">end</span>()</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/login'</span>: </span><br><span class="line">      fs.<span class="title function_">readFile</span>( <span class="string">'./static/login.html'</span>,<span class="keyword">function</span> (<span class="params"> error , data </span>) {</span><br><span class="line">        <span class="keyword">if</span> ( error ) <span class="keyword">throw</span> error  </span><br><span class="line">        res.<span class="title function_">write</span>( data )</span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/fulian.jpg'</span>:</span><br><span class="line">      fs.<span class="title function_">readFile</span>( <span class="string">'./static/fulian.jpg'</span>, <span class="string">'binary'</span>, <span class="keyword">function</span>(<span class="params"> error , data </span>) {</span><br><span class="line">        <span class="keyword">if</span>( error ) <span class="keyword">throw</span> error </span><br><span class="line">        res.<span class="title function_">write</span>( data, <span class="string">'binary'</span> )</span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>: </span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"> }).<span class="title function_">listen</span>( <span class="number">8000</span>, <span class="string">'localhost'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">'服务器运行在： http://localhost:8000'</span> )</span><br><span class="line"> })</span><br></pre></td></tr></tbody></table>

<h4 id="静态资源服务"><a href="#静态资源服务" class="headerlink" title="静态资源服务"></a>静态资源服务</h4><h5 id="readStaticFile"><a href="#readStaticFile" class="headerlink" title="readStaticFile"></a>readStaticFile</h5><p>&#x2F;modules&#x2F;readStaticFile.js</p>
<table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入依赖的模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readStaticFile</span>(<span class="params">res, filePathname</span>) {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ext = path.<span class="title function_">parse</span>(filePathname).<span class="property">ext</span></span><br><span class="line">  <span class="keyword">var</span> mimeType = mime.<span class="title function_">getType</span>(ext)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断路径是否有后缀, 有的话则说明客户端要请求的是一个文件 </span></span><br><span class="line">  <span class="keyword">if</span> (ext) {</span><br><span class="line">    <span class="comment">// 根据传入的目标文件路径来读取对应文件</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePathname, <span class="function">(<span class="params">err, data</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">      <span class="keyword">if</span> (err) {</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">404</span>, { <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> })</span><br><span class="line">        res.<span class="title function_">write</span>(<span class="string">"404 - NOT FOUND"</span>)</span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>, { <span class="string">"Content-Type"</span>: mimeType })</span><br><span class="line">        res.<span class="title function_">write</span>(data)</span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">    <span class="comment">// 返回 true 表示, 客户端想要的 是 静态文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 返回 false 表示, 客户端想要的 不是 静态文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = readStaticFile</span><br></pre></td></tr></tbody></table>

<h5 id="server"><a href="#server" class="headerlink" title="server"></a>server</h5><p>&#x2F;server.js</p>
<table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入相关模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> readStaticFile = <span class="built_in">require</span>(<span class="string">'./modules/readStaticFile'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搭建 HTTP 服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) {</span><br><span class="line">  <span class="keyword">var</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">var</span> urlPathname = urlObj.<span class="property">pathname</span>;</span><br><span class="line">  <span class="keyword">var</span> filePathname = path.<span class="title function_">join</span>(__dirname, <span class="string">"/public"</span>, urlPathname);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取静态文件</span></span><br><span class="line">  <span class="title function_">readStaticFile</span>(res, filePathname);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 3000 端口监听请求</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"服务器运行中."</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"正在监听 3000 端口:"</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>Nodejs学习</tag>
      </tags>
  </entry>
  <entry>
    <title>封装的一些实用代码工具</title>
    <url>/posts/2/</url>
    <content><![CDATA[<h1 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h1><blockquote>
<p>把时间戳转成 <code>2023-05-17 15:27:22</code> 的格式</p>
</blockquote>
<ul>
<li>js 版本</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 时间戳转换</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">msToDate</span>(<span class="params">msec</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> datetime = <span class="keyword">new</span> <span class="title class_">Date</span>(msec);</span><br><span class="line">  <span class="keyword">let</span> year = datetime.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">let</span> month = datetime.<span class="title function_">getMonth</span>();</span><br><span class="line">  <span class="keyword">let</span> date = datetime.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">let</span> hour = datetime.<span class="title function_">getHours</span>();</span><br><span class="line">  <span class="keyword">let</span> minute = datetime.<span class="title function_">getMinutes</span>();</span><br><span class="line">  <span class="keyword">let</span> second = datetime.<span class="title function_">getSeconds</span>();</span><br><span class="line">  <span class="keyword">let</span> result1 =</span><br><span class="line">    year + <span class="comment">// 打印出来： &quot;2023.05.17 15:24:54&quot;</span></span><br><span class="line">    <span class="string">&quot;.&quot;</span> + <span class="comment">// &#x27;.&#x27; 换成 &#x27;-&#x27; 变成 &quot;2023-05-17 15:27:22&quot;</span></span><br><span class="line">    (month + <span class="number">1</span> &gt;= <span class="number">10</span> ? month + <span class="number">1</span> : <span class="string">&quot;0&quot;</span> + (month + <span class="number">1</span>)) +</span><br><span class="line">    <span class="string">&quot;.&quot;</span> +</span><br><span class="line">    (date + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date : date) +</span><br><span class="line">    <span class="string">&quot; &quot;</span> +</span><br><span class="line">    (hour + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + hour : hour) +</span><br><span class="line">    <span class="string">&quot;:&quot;</span> + <span class="comment">// &#x27;:&#x27; 换成 &#x27;-&#x27; 变成 &quot;2023-05-17 15-27-22&quot;</span></span><br><span class="line">    (minute + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + minute : minute) +</span><br><span class="line">    <span class="string">&quot;:&quot;</span> +</span><br><span class="line">    (second + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + second : second);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result2 =</span><br><span class="line">    year +</span><br><span class="line">    <span class="string">&quot;.&quot;</span> +</span><br><span class="line">    (month + <span class="number">1</span> &gt;= <span class="number">10</span> ? month + <span class="number">1</span> : <span class="string">&quot;0&quot;</span> + (month + <span class="number">1</span>)) +</span><br><span class="line">    <span class="string">&quot;.&quot;</span> +</span><br><span class="line">    (date + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + date : date);</span><br><span class="line">  <span class="keyword">let</span> result = &#123;</span><br><span class="line">    <span class="attr">hasTime</span>: result1, <span class="comment">// 带时分秒</span></span><br><span class="line">    <span class="attr">withoutTime</span>: result2, <span class="comment">// 不带时分秒</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ts 版本</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将指定的时间戳、日期对象或日期字符串转换成指定格式的日期和时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> datetime 时间戳、日期对象或日期字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hasTime 是否需要包含时间部分，默认为 true</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> format 日期和时间的格式字符串，默认为 &#x27;yyyy-MM-dd HH:mm:ss&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 格式化后的日期和时间对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">msToDate</span>(<span class="params"></span></span><br><span class="line"><span class="params">  datetime: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">Date</span>,</span></span><br><span class="line"><span class="params">  hasTime = <span class="literal">true</span>,</span></span><br><span class="line"><span class="params">  format = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span></span><br><span class="line"><span class="params"></span>): &#123;</span><br><span class="line">  <span class="attr">hasTime</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">withoutTime</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(datetime);</span><br><span class="line">  <span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">const</span> month = date.<span class="title function_">getMonth</span>();</span><br><span class="line">  <span class="keyword">const</span> day = date.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">const</span> hour = date.<span class="title function_">getHours</span>();</span><br><span class="line">  <span class="keyword">const</span> minute = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">  <span class="keyword">const</span> second = date.<span class="title function_">getSeconds</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果不需要包含时间部分，则只返回日期部分</span></span><br><span class="line">  <span class="keyword">if</span> (!hasTime) &#123;</span><br><span class="line">    <span class="keyword">const</span> withoutTime = format</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/HH:mm:ss/g</span>, <span class="string">&quot;&quot;</span>) <span class="comment">// 去掉时间部分</span></span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/[yYMmd]/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;y&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> year.<span class="title function_">toString</span>();</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;M&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">padZero</span>(month + <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;d&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">padZero</span>(day);</span><br><span class="line">          <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> match;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasTime</span>: <span class="string">&quot;&quot;</span>, withoutTime &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回包含日期和时间的完整字符串</span></span><br><span class="line">  <span class="keyword">const</span> timestampStr = format</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/yyyy/g</span>, year.<span class="title function_">toString</span>())</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/MM/g</span>, <span class="title function_">padZero</span>(month + <span class="number">1</span>))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/dd/g</span>, <span class="title function_">padZero</span>(day))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/HH/g</span>, <span class="title function_">padZero</span>(hour))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/mm/g</span>, <span class="title function_">padZero</span>(minute))</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/ss/g</span>, <span class="title function_">padZero</span>(second));</span><br><span class="line">  <span class="keyword">const</span> withoutTimeStr = timestampStr.<span class="title function_">replace</span>(<span class="regexp">/ \d+:\d+:\d+/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hasTime</span>: timestampStr, <span class="attr">withoutTime</span>: withoutTimeStr &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在数字前添加前导零，使得长度为指定值，并转成字符串格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 数字值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 目标字符串长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 转换后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">value: <span class="built_in">number</span>, length = <span class="number">2</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">toString</span>().<span class="title function_">padStart</span>(length, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="一个特别万能的数组去重方法"><a href="#一个特别万能的数组去重方法" class="headerlink" title="一个特别万能的数组去重方法"></a>一个特别万能的数组去重方法</h1><blockquote>
<p>可去去掉重复的对象也可以去掉重复的数组,Nan 和 undefined 转换出来是 null，目前还未解决</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="title class_">NaN</span>, <span class="number">1</span>, <span class="string">&quot;1&quot;</span>, <span class="title class_">NaN</span>, &#123;&#125;, &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">10</span> &#125; &#125;, &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">10</span> &#125; &#125;, &#123;&#125;];</span><br><span class="line">arr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//将原数组map出来</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item); <span class="comment">//通过JSON.stringify将数组中的各项转成字符串</span></span><br><span class="line">&#125;);</span><br><span class="line">arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr)); <span class="comment">//利用es6的new Set进行去重</span></span><br><span class="line">arr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在map循环将各项转回来</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1,null,&#x27;1&#x27;,2,&#123;a:10&#125;,&#123;&#125;,&#123; a: &#123; b: 10 &#125; &#125;]</span></span><br></pre></td></tr></table></figure>

<h1 id="万能的模糊搜索功能"><a href="#万能的模糊搜索功能" class="headerlink" title="万能的模糊搜索功能"></a>万能的模糊搜索功能</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dataList全部数据、value输入框输入的内容、type要查询数据的字段名字</span></span><br><span class="line"><span class="keyword">const</span> filterOne = <span class="keyword">function</span> (<span class="params">dataList, value, type</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> s = dataList.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; type.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item[type[j]] !== <span class="literal">undefined</span> || item[type[j]] != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item[type[j]].<span class="title function_">indexOf</span>(value) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 例子：</span></span><br><span class="line"><span class="title function_">filterOne</span>(list, form.<span class="property">input</span>.<span class="property">value</span>, [<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h1 id="多条件联动搜索功能"><a href="#多条件联动搜索功能" class="headerlink" title="多条件联动搜索功能"></a>多条件联动搜索功能</h1><blockquote>
<p>可以实现多个输入框&#x2F;下拉框&#x2F;时间段的联动搜索功能</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue3写法 结合模糊搜索</span></span><br><span class="line"><span class="keyword">let</span> filterFun = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> filterlist = dataList.<span class="property">value</span>; <span class="comment">// 声明一个变量接收全部数据</span></span><br><span class="line">  <span class="comment">// 条件1</span></span><br><span class="line">  <span class="keyword">if</span> (form.<span class="property">input</span>.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 输入框中的内容↑</span></span><br><span class="line">    filterlist = <span class="title function_">filterOne</span>(list, form.<span class="property">input</span>.<span class="property">value</span>, [<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 条件2</span></span><br><span class="line">  <span class="keyword">if</span> (form.<span class="property">input1</span>.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 输入框中的内容↑</span></span><br><span class="line">    filterlist = <span class="title function_">filterOne</span>(list, form.<span class="property">input1</span>.<span class="property">value</span>, [<span class="string">&quot;name1&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果还有可以在加</span></span><br><span class="line">  <span class="keyword">return</span> filterlist;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="常用正则验证"><a href="#常用正则验证" class="headerlink" title="常用正则验证"></a>常用正则验证</h1><blockquote>
<p>验证手机号，身份证号，QQ 号等等正不正确</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkStr = <span class="keyword">function</span> (<span class="params">str, type</span>) &#123;</span><br><span class="line">  <span class="comment">// 常用正则验证，注意type大小写</span></span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;phone&quot;</span>: <span class="comment">// 手机号码</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;tel&quot;</span>: <span class="comment">// 座机</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;card&quot;</span>: <span class="comment">// 身份证</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;pwd&quot;</span>: <span class="comment">// 密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]\w&#123;5,17&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;postal&quot;</span>: <span class="comment">// 邮政编码</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/[1-9]\d&#123;5&#125;(?!\d)/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;QQ&quot;</span>: <span class="comment">// QQ号</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[1-9][0-9]&#123;4,9&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;email&quot;</span>: <span class="comment">// 邮箱</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;money&quot;</span>: <span class="comment">// 金额(小数点2位)</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^\d*(?:\.\d&#123;0,2&#125;)?$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;URL&quot;</span>: <span class="comment">// 网址</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/</span>.<span class="title function_">test</span>(</span><br><span class="line">        str</span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;IP&quot;</span>: <span class="comment">// IP</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/</span>.<span class="title function_">test</span>(</span><br><span class="line">        str</span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;date&quot;</span>: <span class="comment">// 日期时间</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;) (\d&#123;2&#125;)(?:\:\d&#123;2&#125;|:(\d&#123;2&#125;):(\d&#123;2&#125;))$/</span>.<span class="title function_">test</span>(</span><br><span class="line">          str</span><br><span class="line">        ) || <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/</span>.<span class="title function_">test</span>(str)</span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;number&quot;</span>: <span class="comment">// 数字</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;english&quot;</span>: <span class="comment">// 英文</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;chinese&quot;</span>: <span class="comment">// 中文</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[\u4E00-\u9FA5]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;lower&quot;</span>: <span class="comment">// 小写</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[a-z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;upper&quot;</span>: <span class="comment">// 大写</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[A-Z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;HTML&quot;</span>: <span class="comment">// HTML标记</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/&lt;(&quot;[^&quot;]*&quot;|&#x27;[^&#x27;]*&#x27;|[^&#x27;&quot;&gt;])*&gt;/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> strr = <span class="number">15037757333</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkStr</span>(strr, <span class="string">&quot;phone&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = <span class="keyword">function</span> (<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="comment">//函数防抖[func 函数,wait 延迟执行毫秒数,immediate true 表立即执行,false 表非立即执行,立即执行是触发事件后函数会立即执行，然后n秒内不触发事件才能继续执行函数的效果]</span></span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = <span class="keyword">function</span> (<span class="params">func, wait, type</span>) &#123;</span><br><span class="line">  <span class="comment">//函数节流 [func 函数 wait 延迟执行毫秒数 type 1 表时间戳版，2 表定时器版]</span></span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">      <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        previous = now;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">          func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>快捷开发</category>
      </categories>
      <tags>
        <tag>高频前端面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3</title>
    <url>/posts/9/</url>
    <content><![CDATA[<h3 id="vue3-简介"><a href="#vue3-简介" class="headerlink" title="vue3 简介"></a>vue3 简介</h3><p>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）<br>耗时 2 年多、2600+次提交、30+个 RFC、600+次 PR、99 位贡献者<br>github 上的 tags 地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></p>
<h4 id="vue3-带来了什么"><a href="#vue3-带来了什么" class="headerlink" title="vue3 带来了什么"></a>vue3 带来了什么</h4><p>1.性能的提升<br>打包大小减少 41%</p>
<p>初次渲染快 55%, 更新渲染快 133%</p>
<p>内存减少 54%</p>
<p>…</p>
<p>2.源码的升级<br>使用 Proxy 代替 defineProperty 实现响应式</p>
<p>重写虚拟 DOM 的实现和 Tree-Shaking</p>
<p>…</p>
<p>3.拥抱 TypeScript<br>Vue3 可以更好的支持 TypeScript</p>
<h4 id="vue3-新的特性"><a href="#vue3-新的特性" class="headerlink" title="vue3 新的特性"></a>vue3 新的特性</h4><p>Composition API（组合 API）</p>
<p>setup 配置<br>ref 与 reactive<br>watch 与 watchEffect<br>provide 与 inject<br>…<br>新的内置组件</p>
<p>Fragment<br>Teleport<br>Suspense<br>其他改变</p>
<p>新的生命周期钩子<br>data 选项应始终被声明为一个函数<br>移除 keyCode 支持作为 v-on 的修饰符<br>……</p>
<h4 id="创建-vue3-项目"><a href="#创建-vue3-项目" class="headerlink" title="创建 vue3 项目"></a>创建 vue3 项目</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">## 查看@vue/cli版本，确保@vue/cli版本在<span class="number">4.5</span><span class="number">.0</span>以上</span><br><span class="line">vue --version</span><br><span class="line">## 安装或者升级你的@vue/cli</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">## 创建</span><br><span class="line">vue create vue3_study</span><br><span class="line">## 启动</span><br><span class="line">cd vue3_study</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h3 id="vue2-Options-API-的弊端"><a href="#vue2-Options-API-的弊端" class="headerlink" title="vue2 Options API 的弊端"></a>vue2 Options API 的弊端</h3><p>在 Vue2 中，我们编写组件的方式是 OptionsAPI：</p>
<p>Options API 的一大特点就是在对应的属性中编写对应的功能模块；</p>
<p>比如 data 定义数据、methods 中定义方法、computed 中定义计算属性、watch 中监听属性改变，也包括生命 周期钩子；<br>但是这种代码有一个很大的弊端：</p>
<p>当我们实现某一个功能时，这个功能对应的代码逻辑会被拆分到各个属性中；</p>
<p>当我们组件变得更大、更复杂时，逻辑关注点的列表就会增长，那么同一个功能的逻辑就会被拆分的很分散；</p>
<p>尤其对于那些一开始没有编写这些组件的人来说，这个组件的代码是难以阅读和理解的（阅读组件的其他人）；</p>
<h3 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a>setup 函数</h3><p>我们先来研究一个 setup 函数的参数，它主要有两个参数：</p>
<p>第一个参数：props</p>
<p>第二个参数：context</p>
<p>props 非常好理解，它其实就是父组件传递过来的属性会被放到 props 对象中，我们在 setup 中如果需要使用，那么就可以直接通过 props 参数获取：</p>
<p>对于定义 props 的类型，我们还是和之前的规则是一样的，在 props 选项中定义；</p>
<p>并且在 template 中依然是可以正常去使用 props 中的属性，比如 message；</p>
<p>如果我们在 setup 函数中想要使用 props，那么不可以通过 this 去获取（后面我会讲到为什么）；</p>
<p>因为 props 有直接作为参数传递到 setup 函数中，所以我们可以直接通过参数来使用即可；</p>
<p>另外一个参数是 context，我们也称之为是一个 SetupContext，它里面包含三个属性：</p>
<p>attrs：所有的非 prop 的 attribute；</p>
<p>slots：父组件传递过来的插槽（这个在以渲染函数返回时会有作用，后面会讲到）；</p>
<p>emit：当我们组件内部需要发出事件时会用到 emit（因为我们不能访问 this，所以不可以通过 this.$emit 发出事件）；</p>
<p>setup 函数的返回值<br>setup 函数的两种返回值：</p>
<p>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）<br>若返回一个渲染函数：则可以自定义渲染内容</p>
<h3 id="reactive-函数"><a href="#reactive-函数" class="headerlink" title="reactive 函数"></a>reactive 函数</h3><p>作用: 定义一个对象类型的响应式数据（基本类型不要用它，控制台会报警告，要用 ref 函数）<br>语法：const 代理对象&#x3D; reactive(源对象)接收一个对象（或数组），返回一个代理对象（Proxy 的实例对象，简称 proxy 对象）<br>reactive 定义的响应式数据是“深层次的”。<br>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</p>
<h3 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref 函数"></a>ref 函数</h3><p>作用: 定义一个响应式的数据<br>语法: const xxx &#x3D; ref(initValue)<br>创建一个包含响应式数据的引用对象（reference 对象，简称 ref 对象）, 其内部的值是在 ref.value 属性中被维护的 。<br>JS 中操作数据： xxx.value<br>模板中读取数据: vue 自动帮我们进行解包操作，不需要.value，直接：<div></div><br>备注：<br>接收的数据可以是：基本类型、也可以是对象类型。<br>基本类型的数据：响应式依然是靠 Object.defineProperty()的 get 与 set 完成的。<br>对象类型的数据：内部 求助 了 Vue3.0 中的一个新函数—— reactive 函数。</p>
<h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h4><p>如果我们使用 ES6 的解构语法，对 reactive 返回的对象进行解构获取值，那么之后无论是修改解构后的变量<strong>，还是修改 reactive 返回的 state 对象，</strong>数据都不再是响应式的：Vue 为我们提供了一个 toRefs 的函数，可以将 reactive 返回的对象中的属性都转成 ref；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = <span class="title function_">toRefs</span>(state);</span><br></pre></td></tr></table></figure>

<p>那么我们再次进行结构出来的 name 和 age 本身都是 ref 的；<br>这种做法相当于已经在 state.name 和 ref.value 之间建立了 链接，任何一个修改都会引起另外一个变化；</p>
<h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="title function_">toRef</span>(state, <span class="string">&quot;name &quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; age &#125; = state;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeName</span> = (<span class="params"></span>) =&gt; (state.<span class="property">name</span> = <span class="string">&quot;coderwhy&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果我们只希望转换一个 reactive 对象中的属性为 ref, 那么可以使用 toRef 的方法<br>应用: 要将响应式对象中的某个属性单独提供给外部使用时。</p>
<h4 id="ref-的其他-API"><a href="#ref-的其他-API" class="headerlink" title="ref 的其他 API"></a>ref 的其他 API</h4><p>unref<br>如果我们想要获取一个 ref 引用中的 value，那么也可以通过 unref 方法：</p>
<p>如果参数是一个 ref，则返回内部值，否则返回参数本身；</p>
<p>这是 val &#x3D; isRef(val) ? val.value : val 的语法糖函数；</p>
<p>isRef<br>判断值是否是一个 ref 对象。</p>
<p>shallowRef<br>创建一个浅层的 ref 对象；</p>
<p>triggerRef<br>手动触发和 shallowRef 相关联的副作用<br>shallowRef<br>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>
<p>什么时候使用?</p>
<p>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。<br>如果有一个对象数据，后续功能不会修改该对象中的属性，而是产生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。<br>customRef<br>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显示控制：</p>
<p>它需要一个工厂函数，该函数接受 track 和 trigger 函数作为参数；</p>
<p>并且应该返回一个带有 get 和 set 的对象；</p>
<h4 id="ref-amp-reactive"><a href="#ref-amp-reactive" class="headerlink" title="ref &amp; reactive"></a>ref &amp; reactive</h4><p>从定义数据角度对比：<br>ref 用来定义：基本类型数据。<br>reactive 用来定义：对象（或数组）类型数据。<br>备注：ref 也可以用来定义对象（或数组）类型数据, 它内部会自动通过 reactive 转为代理对象。<br>从原理角度对比：<br>ref 通过 Object.defineProperty()的 get 与 set 来实现响应式（数据劫持）。<br>reactive 通过使用 Proxy 来实现响应式（数据劫持）, 并通过 Reflect 操作源对象内部的数据。<br>从使用角度对比：<br>ref 定义的数据：操作数据需要.value，读取数据时模板中直接读取不需要.value。<br>reactive 定义的数据：操作数据与读取数据：均不需要.value。</p>
<h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><h4 id="vu2"><a href="#vu2" class="headerlink" title="vu2"></a>vu2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x 双向数据绑定原理是通过Objcet.defineProperty来实现的</span></span><br><span class="line"><span class="comment">// 这种方式有缺点: 数组的长度 数组的内容发生变化检测不到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">phone</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// let obj = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 视图更新的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;视图更新了 ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">&quot;push&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;shift&quot;</span>, <span class="string">&quot;unshift&quot;</span>, <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;reverse&quot;</span>, <span class="string">&quot;splice&quot;</span>];</span><br><span class="line"><span class="comment">// 将数组的原型保存一份</span></span><br><span class="line"><span class="keyword">let</span> arrProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 创建原型 将数组原型拷贝一份</span></span><br><span class="line"><span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrProto);</span><br><span class="line"><span class="comment">// 重写数组的方法</span></span><br><span class="line">methods.<span class="title function_">forEach</span>(<span class="function">(<span class="params">method</span>) =&gt;</span> &#123;</span><br><span class="line">  proto[method] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// AOP 面向切面编程</span></span><br><span class="line">    <span class="comment">// 改变了数组的数据</span></span><br><span class="line">    arrProto[method].<span class="title function_">call</span>(<span class="variable language_">this</span>, ...<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="comment">// 重新渲染视图</span></span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断一个对象是不是数组</span></span><br><span class="line">  <span class="comment">// if(Object.prototype.toString.call(obj) === &#x27;[object Array]&#x27;)&#123;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    <span class="comment">// 让观测的对象的原型和我们自己重写的原型建立关系</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = proto;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果观察的是一个对象的话 对其属性进行响应式监听(set、get)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&quot;[object Object]&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 取出对象中的每一个键和值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="comment">// 调用响应式处理函数</span></span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, key, obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 观察obj对象</span></span><br><span class="line"><span class="title function_">observe</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式处理</span></span><br><span class="line"><span class="comment">// Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 检测对象的属性值是否还是对象</span></span><br><span class="line">  <span class="title function_">observe</span>(val);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测设置的值是不是对象</span></span><br><span class="line">      <span class="title function_">observe</span>(newVal);</span><br><span class="line">      <span class="comment">// 新值和旧值不相等的时候</span></span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="comment">// 覆盖掉原来的val值</span></span><br><span class="line">        val = newVal;</span><br><span class="line">        <span class="comment">// 通知render函数重新渲染视图</span></span><br><span class="line">        <span class="title function_">render</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// obj.age = 20</span></span><br><span class="line"><span class="comment">// console.log(obj.name, obj.age);</span></span><br><span class="line"><span class="comment">// 至此 基本可以实现数据发生变化 视图更新的效果</span></span><br><span class="line"><span class="comment">// 但是 如果数据有多层呢 也就是属性对应的值也是对象?</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;huawei&#x27;</span></span><br><span class="line"><span class="comment">// console.log(obj.phone.name);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改的值和原来的值一样 不需要重新渲染视图</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;iphone&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果重新为对象obj的phone赋值一个新的对象呢? 视图要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone = &#123;name: &#x27;huawei&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并且当修改新的对象的属性值时 视图也要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;zs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为对象新增属性值呢? 也是没有办法监测到的</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;man&#x27;</span></span><br><span class="line"><span class="comment">// $set来解决这个</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$myset</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="title function_">splice</span>(key, val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">defineReactive</span>(obj, key, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $myset(obj, &#x27;sex&#x27;, &#x27;man&#x27;)</span></span><br><span class="line"><span class="comment">// 修改新增的属性值 视图也能更新</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;woman&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = Object.assign(obj.phone, &#123;price: &#x27;666&#x27;&#125;)</span></span><br><span class="line"><span class="comment">// obj.phone.price = 888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = &#123;...obj.phone, ...&#123;price: &#x27;666&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">// obj.phone.price = &#x27;888&#x27;</span></span><br><span class="line"><span class="comment">// 以后vue涉及到给data中的对象新增属性时 有三种方式</span></span><br><span class="line"><span class="comment">// 1、this.$set() || Vue.set()</span></span><br><span class="line"><span class="comment">// 2、obj = Object.assign(原对象, 新对象(新增的属性:值))</span></span><br><span class="line"><span class="comment">// 2、obj = &#123;...原对象, ...新对象(新增的属性:值)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================== 数组 ======================</span></span><br><span class="line"><span class="comment">// 数组的响应式数据处理依赖的并不是Object.defineProperty 而是对数组的能够引起数据变化的方法进行重写</span></span><br><span class="line"><span class="comment">// obj.push(6)</span></span><br><span class="line"><span class="comment">// obj.length ++</span></span><br><span class="line"><span class="comment">// obj[0] = 88</span></span><br><span class="line"><span class="comment">// $myset(obj, &#x27;0&#x27;, 66)</span></span><br></pre></td></tr></table></figure>

<h4 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue3响应式原理利用了es6提供的proxy Api</span></span><br><span class="line"><span class="comment">// 可以直接监听到对象和数组内容及长度的变化</span></span><br><span class="line"><span class="comment">// 缺点: 兼容性差 支持就用proxy 不支持就用Objcet.defineProperty</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="attr">girlFriend</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;刘亦菲&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;视图重新渲染 ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="comment">// Reflect.get(target, propertyKey[, receiver])</span></span><br><span class="line">    <span class="comment">// 获取对象身上某个属性的值，类似于 target[name]。</span></span><br><span class="line">    <span class="comment">// 如果属性的值是一个对象的话 则重新进行代理 设置set&amp;get</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target[key] == <span class="string">&quot;object&quot;</span> &amp;&amp; target[key] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target[key], handler);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, val</span>) &#123;</span><br><span class="line">    <span class="comment">// if(target[key] == &#x27;length&#x27;) return true</span></span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, val);</span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">    <span class="comment">// return true表示赋值成功 如果不返回true 在严格模式下可能会报TypeError</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler);</span><br><span class="line"><span class="comment">// 使用代理后的对象</span></span><br><span class="line"><span class="comment">// console.log(proxy.name);</span></span><br><span class="line"><span class="comment">// console.log(proxy.grilFriend);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// 修改深层次的对象的属性 无法监听到</span></span><br><span class="line"><span class="comment">// proxy.grilFriend.name = &#x27;黄圣依&#x27;</span></span><br><span class="line"><span class="comment">// console.log(proxy.name);</span></span><br><span class="line"><span class="comment">// console.log(proxy.grilFriend);</span></span><br><span class="line"><span class="comment">// console.log(obj.name);</span></span><br><span class="line"><span class="comment">// console.log(obj.grilFriend);</span></span><br><span class="line"></span><br><span class="line">proxy.<span class="property">arr</span>[<span class="number">0</span>] = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">proxy.<span class="property">arr</span>.<span class="property">length</span>++;</span><br><span class="line"><span class="comment">// console.log(proxy.arr.length);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">arr</span>.<span class="property">length</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>vue学习</tag>
      </tags>
  </entry>
  <entry>
    <title>vue传参</title>
    <url>/posts/e62d/</url>
    <content><![CDATA[<h2 id="Vue跨组件通信8种方式汇总-未完待续…"><a href="#Vue跨组件通信8种方式汇总-未完待续…" class="headerlink" title="Vue跨组件通信8种方式汇总(未完待续…)"></a>Vue跨组件通信8种方式汇总(未完待续…)</h2><blockquote>
<p>Vue组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用，所以对于Vue来说组件间的数据通信非常重要。首先我们需要知道在vue中组件之间存在什么样的关系, 才更容易理解他们的通信方式。下图为关系说明：</p>
</blockquote>
<p><img src="/../assets/vue_img/chuancan.png" alt="视图"></p>
<ul>
<li><p>如上图所示， A与B、A与C、B与D、C与E组件之间是父子关系； B与C之间是兄弟关系；A与D、A与E之间是隔代关系； D与E是堂兄关系（非直系亲属） 针对以上关系归类为两类：</p>
</li>
<li><p>1、父子组件之间的通讯</p>
</li>
<li><p>2、非父子之间的通选（兄弟组件、堂兄组件等）</p>
</li>
</ul>
<blockquote>
<p>本文会介绍组件间通信的8种方式如下图目录所示:并介绍在不同的场景下如何选择有效方式实现的组件间通信方式，希望可以帮助小伙伴们更好理解组件间的通信。</p>
</blockquote>
<p><img src="/../assets/vue_img/fangshi.png" alt="视图"></p>
<h3 id="方法一：props-和-emit"><a href="#方法一：props-和-emit" class="headerlink" title="方法一：props 和 $emit"></a>方法一：props 和 $emit</h3><blockquote>
<p>父组件通过props的方式向子组件传递数据，子组件通过$emit（绑定事件） 可以向父组件通信。</p>
</blockquote>
<h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><ul>
<li>在父组件中的子组件标签上写一个自定义属性</li>
<li>在子组件的配置项中添加一个props配置项</li>
<li>在props中接收自定义属性的值</li>
<li>在子组件中就可以使用props中的属性来拿到传递的值</li>
</ul>
<p><strong>父组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是home组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // <span class="comment">&lt;!-- 子组件 ↓ --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 定义一个自定义属性 message，msg是data中的数据 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">:message</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Children.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Children</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;父组件传给子组件的内容&#x27;</span>, <span class="comment">// 传给子组件的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>子组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是Home的子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 接收到的数据 ↓ --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Children&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;<span class="comment">// props 接收</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">message</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>, <span class="comment">// 定义类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&#x27;子组件&#x27;</span> <span class="comment">// 默认值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// props:[&#x27;message&#x27;] 第二种接收方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><ul>
<li>子组件要触发一个事件函数才能向父组件传递数据</li>
<li>在子组件的事件函数中通过this.$emit方法向父组件发出一个自定义事件</li>
<li>在父组件的子组件标签上，用过v-on来绑定子组件发出的自定义事件</li>
<li>为该事件添加一个事件响应函数</li>
<li>这个事件响应函数有一个默认参数，这个参数就是传递过来的数据</li>
</ul>
<p><strong>父组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是home组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件的number是: &#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 子组件↓ --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 定义一个自定方法，childrenAddNum是子组件传递过来的事件，addNum是在父组件要调用的事件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Children</span> @<span class="attr">childrenAddNum</span>=<span class="string">&quot;addNum&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Children.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Children</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">num</span>: <span class="number">1</span>,<span class="comment">// 父组件初始number</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">addNum</span>(<span class="params">e</span>) &#123;<span class="comment">// 这个 e 就是子组件传递过来的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(e); // 2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">num</span> += e</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">num</span>);<span class="comment">// 3 click +2 click +2 click +2 click +2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>子组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是Home的子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 子组件需触发一个事件 addNum --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNum&quot;</span>&gt;</span>让父组件的num加 &#123;&#123; childrenNum &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Children&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">childrenNum</span>: <span class="number">2</span> <span class="comment">// 父组件num要加的数字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">addNum</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 子组件通过this.$emit向父组件传递一个自定义事件、数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;childrenAddNum&#x27;</span>, <span class="variable language_">this</span>.<span class="property">childrenNum</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="方法二：-parent-x2F-chidren"><a href="#方法二：-parent-x2F-chidren" class="headerlink" title="方法二：$parent&#x2F;$chidren"></a>方法二：$parent&#x2F;$chidren</h3><blockquote>
<p>vue官网API里这样描述<br><img src="/../assets/vue_img/chuancan1.png"></p>
</blockquote>
<p><strong>父组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是home组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>改变子组件中message中的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Children</span>&gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Children.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Children</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;Home: 对你是我儿子&#x27;</span> <span class="comment">// 子组件要改变的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">changeMsg</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="property">message</span>); <span class="comment">// 获取到了子组件中的message中的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="property">message</span> = <span class="variable language_">this</span>.<span class="property">msg</span> <span class="comment">// 点击改变子组件中的message中的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>子组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 子组件数据 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 在computed中获取到的父组件数据 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>获取父组件的msg数据&#123;&#123; parentVal &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;我是home的儿子&#x27;</span> <span class="comment">// 子组件的原始数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123; <span class="comment">// 计算属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">parentVal</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">msg</span>;  <span class="comment">//在计算属性中获取父组件的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="方法三：provide-x2F-inject"><a href="#方法三：provide-x2F-inject" class="headerlink" title="方法三：provide&#x2F;inject"></a>方法三：provide&#x2F;inject</h3><ul>
<li>类型：<ul>
<li>provide：Object | () &#x3D;&gt; Object</li>
<li>inject：Array<string> | { [key: string]: string | Symbol | Object }</li>
</ul>
</li>
</ul>
<blockquote>
<p>理解：provide&#x2F; inject 是vue2.2.0新增的api, 简单来说就是父组件中通过provide来提供变量, 然后再子组件中通过inject来注入变量 ，这里不论子组件嵌套有多深, 只要调用了 inject 那么就可以注入 provide中的数据</p>
</blockquote>
<p><strong>父组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是home组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 子组件 ↓ --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Children</span>&gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Children.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">Children</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">text</span>: <span class="string">&#x27;Home组件传递的数据&#x27;</span> <span class="comment">// 子组件要改变的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 推荐</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="variable language_">this</span>.<span class="property">text</span> <span class="comment">// return 一个对象，中间是要传给子级、孙子的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">/* 另一种写法：provide: &#123; msg: &quot;Home组件传递的数据&quot; &#125; */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>子组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 直接渲染 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 赋值后渲染 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 改变msg内容 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;editMsg&quot;</span>&gt;</span>改变msg<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 孙子组件 ↓ --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Grandchild</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandchild</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Grandchild</span> <span class="keyword">from</span> <span class="string">&#x27;./Grandchild.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Children&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">Grandchild</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">inject</span>: [<span class="string">&#x27;msg&#x27;</span>], <span class="comment">// 子组件通过inject来接收</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="variable language_">this</span>.<span class="property">msg</span> <span class="comment">// 赋值 &amp; 也可以直接使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 尝试改变，不能直接改变inject中的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">editMsg</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;子组件更改了这条数据&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>孙子组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 孙子组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grandchild&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是孙子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 渲染 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Grandchild&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">inject</span>: [<span class="string">&#x27;msg&#x27;</span>] <span class="comment">// 孙子组件中也可以获取到msg这条数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="方法四：ref-x2F-refs"><a href="#方法四：ref-x2F-refs" class="headerlink" title="方法四：ref&#x2F;refs"></a>方法四：ref&#x2F;refs</h3><blockquote>
<p>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据</p>
</blockquote>
<p><strong>父组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是home组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 子组件 ↓ --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">ref</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Children.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">Children</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;Home组件传递的数据&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">message</span>.<span class="property">message</span>);<span class="comment">// 我是子组件的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> message = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">message</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">message</span>);  <span class="comment">// 我是子组件的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    message.<span class="title function_">sayHello</span>();  <span class="comment">// hello</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>子组件 ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--子组件--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;我是子组件的数据&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="方法五：eventBus-事件中心管理组件间的通信"><a href="#方法五：eventBus-事件中心管理组件间的通信" class="headerlink" title="方法五：eventBus  事件中心管理组件间的通信"></a>方法五：eventBus  事件中心管理组件间的通信</h3><p>在vue中可以使用它来作为沟通桥梁的概念, 就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件， 所以组件都可以通知其他组件。</p>
<blockquote>
<p>注意：eventBus也有不方便之处, 当项目较大,就容易造成难以维护的灾难</p>
</blockquote>
<p><strong>组件A ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--组件A--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是home组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsg&quot;</span>&gt;</span>点击发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;Home组件传递的数据&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sendMsg</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$EventBus</span>.$emit(<span class="string">&#x27;sendMsg&#x27;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>组件B ↓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--组件B--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是兄弟组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$EventBus</span>.$on(<span class="string">&#x27;sendMsg&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);<span class="comment">// 这是组件A传递过来的消息！</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="方法六：localStorage-x2F-sessinStorage"><a href="#方法六：localStorage-x2F-sessinStorage" class="headerlink" title="方法六：localStorage&#x2F;sessinStorage"></a>方法六：localStorage&#x2F;sessinStorage</h3><blockquote>
<p>这种通讯比较简单 ，数据存储在Application中查看，但是数据和状态混乱不易维护。</p>
</blockquote>
<ul>
<li>window.localStorage.setItem（key，value）&#x2F;&#x2F;保存数据</li>
<li>window.localStorage.getItem（key) &#x2F;&#x2F;获取数据</li>
<li>window.localStorage.removeItem（key）&#x2F;&#x2F;删除数据</li>
</ul>
<blockquote>
<p>注意用 JSON.parse() &#x2F; JSON.stringify() 做数据格式转换 localStorage &#x2F; sessionStorage可以结合 vuex, 实现数据的持久保存,同时使用vuex解决数据和状态混乱问题</p>
</blockquote>
<h3 id="方法七：-attrs-x2F-listeners"><a href="#方法七：-attrs-x2F-listeners" class="headerlink" title="方法七：$attrs&#x2F;$listeners"></a>方法七：$attrs&#x2F;$listeners</h3>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>vue传参</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/posts/8/</url>
    <content><![CDATA[<h2 id="vue-简介"><a href="#vue-简介" class="headerlink" title="vue 简介"></a>vue 简介</h2><p>Vue 是一套用于构建用户界面的 渐进式框架 。</p>
<p>与其它大型框架不同的是，Vue 采用自底向上增量开发的设计。</p>
<p>Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>最初它不过是个人项目，时至今日，已成为全世界三大前端框架之一，github 上拥有 19.8 万 Star。 领先于 React 和 Angular，在国内更是首选。<br><img src="http://laoxu.fun/2022/06/30/vue2/image-20220717093650297.png" alt="alt"></p>
<p>自从 Vue 2.0 发布之后，Vue 就成了前端领域的热门话题。</p>
<p>2019.02.05，Vue 发布了 2.6.0 ，这是一个承前启后的版本，在它之后，推出了 3.0.0。</p>
<p>2019.12.05，在万众期待中，尤雨溪公布了 Vue 3 源代码，此时的 Vue 3 仍 处于 Alpha 版本。</p>
<p>2020 年 09 月 18 日，Vue.js 3.0 正式发布。</p>
<hr>
<h2 id="Vue-周边生态"><a href="#Vue-周边生态" class="headerlink" title="Vue 周边生态"></a>Vue 周边生态</h2><p>vue-cli：vue 脚手架<br>vue-resource(axios)：ajax 请求<br>vue-router：路由<br>vuex：状态管理（它是 vue 的插件但是没有用 vue-xxx 的命名规则）<br>vue-lazyload：图片懒加载<br>vue-scroller：页面滑动相关<br>mint-ui：基于 vue 的 UI 组件库（移动端）<br>element-ui：基于 vue 的 UI 组件库（PC 端）</p>
<h2 id="原生计数器"><a href="#原生计数器" class="headerlink" title="原生计数器"></a>原生计数器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 1. 获取DOM原生</span><br><span class="line">const titleEl = document.querySelector(<span class="string">&quot;.title&quot;</span>);</span><br><span class="line">const btnInEl = document.querySelector(<span class="string">&#x27;.increment&#x27;</span>);</span><br><span class="line">const btnDeEl = document.querySelector(<span class="string">&#x27;.decrement&#x27;</span>);</span><br><span class="line">// 2. 默认设置的是Hello World</span><br><span class="line"><span class="built_in">let</span> counter = 0</span><br><span class="line">// 3. 设置titleEl的内容</span><br><span class="line">titleEl.innerHTML = counter;</span><br><span class="line">// 4. 监听按钮的点击</span><br><span class="line">btnInEl.addEventListener(<span class="string">&#x27;click&#x27;</span>,(=&gt;&#123;</span><br><span class="line">   counter += 1;</span><br><span class="line">   titleEl.innerHTML =counter;</span><br><span class="line">&#125;)</span><br><span class="line">btnDeEl.addEventListener(<span class="string">&#x27;click&#x27;</span>,(=&gt;&#123;</span><br><span class="line">   counter -=1;</span><br><span class="line">   titleEl.innerHTML = counter;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="vue-写法"><a href="#vue-写法" class="headerlink" title="vue 写法"></a>vue 写法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">     &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">   &lt;body&gt;</span><br><span class="line">     &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">       &lt;!-- vue指令: v-on:事件类型 --&gt;</span><br><span class="line">       &lt;button v-on:click=<span class="string">&quot;increment&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">       &lt;!-- 简写 比如: @click @keyup @keydown --&gt;</span><br><span class="line">       &lt;button @click=<span class="string">&quot;increment&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">       &#123;&#123; count &#125;&#125;</span><br><span class="line">       &lt;button v-on:click=<span class="string">&quot;decrement&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">       &lt;button @click=<span class="string">&quot;decrement&quot;</span>&gt;-&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;script&gt;</span><br><span class="line">       // 关闭生产提示</span><br><span class="line">       Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">       var vm = new Vue(&#123;</span><br><span class="line">         el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">         // 数据</span><br><span class="line">         data: &#123;</span><br><span class="line">           count: 0</span><br><span class="line">         &#125;,</span><br><span class="line">         // 方法</span><br><span class="line">         methods: &#123;</span><br><span class="line">           <span class="function"><span class="title">increment</span></span>()&#123;</span><br><span class="line">             // this =&gt; vue实例</span><br><span class="line">             this.count++</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="function"><span class="title">decrement</span></span>()&#123;</span><br><span class="line">             this.count--</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &lt;/script&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 属性绑定 v-bind:</span></span><br><span class="line"><span class="comment"># 功能：指定变化的属性值</span></span><br><span class="line"><span class="comment"># 完整写法</span></span><br><span class="line"> v-bind:xxx=<span class="string">&#x27;yyy&#x27;</span>  // yyy会作为表达式解析执行</span><br><span class="line"><span class="comment">#  简洁写法</span></span><br><span class="line"> :xxx=<span class="string">&#x27;yyy&#x27;</span></span><br><span class="line"><span class="comment"># 属性绑定应用</span></span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 数组 --&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;]&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 数组嵌套三元表达式 --&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;, isactive?&#x27;active&#x27;: &#x27;&#x27;]&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 数组嵌套对象 --&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;, &#123;active: isactive&#125;]&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 直接使用对象 --&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;&#123;red:true&#125;&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1 :class=<span class="string">&quot;styles&quot;</span>&gt;&#123;&#123;msg ? <span class="string">&#x27;尘埃等闲&#x27;</span>:<span class="string">&#x27;大千世界&#x27;</span>&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&#x27;click&#x27;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">let</span> vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: <span class="literal">true</span>,</span><br><span class="line">            info: <span class="string">&#x27;明天就中秋了，你们的中秋节目准备的咋样了？&#x27;</span>,</span><br><span class="line">            isactive: <span class="literal">true</span>,</span><br><span class="line">            index: 1,</span><br><span class="line">            styles: &#123;</span><br><span class="line">                red: <span class="literal">true</span>,</span><br><span class="line">                thin: <span class="literal">true</span>,</span><br><span class="line">                active: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">click</span></span>() &#123;</span><br><span class="line">                console.log(this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单向数据绑定</span></span><br><span class="line"><span class="comment"># 语法：</span></span><br><span class="line">v-bind:href =<span class="string">&quot;xxx&quot;</span> 或简写为 :href =<span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 特点：数据只能从 data 流向页面</span></span><br><span class="line"><span class="comment"># 双向数据绑定 指令 v-model</span></span><br><span class="line"><span class="comment"># 语法：</span></span><br><span class="line">v-mode:value=<span class="string">&quot;xxx&quot;</span> 或简写为 v-model=<span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 特点：数据不仅能从 data 流向页面，还能从页面流向 data</span></span><br><span class="line">v-model应用</span><br><span class="line">v-model:用来辅助开发者在不操作 DOM 的前提下，快速获取表单的数据</span><br><span class="line">&lt;p&gt;选择的省份是: &#123;&#123;province&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;<span class="keyword">select</span> v-model=<span class="string">&#x27;province&#x27;</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;0&quot;</span>&gt;--请选择--&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;1&quot;</span>&gt;上海&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;2&quot;</span>&gt;深圳&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;3&quot;</span>&gt;广州&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;4&quot;</span>&gt;北京&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;5&quot;</span>&gt;杭州&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;您选中的是:&#123;&#123;sex&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> v-model=<span class="string">&#x27;sex&#x27;</span> value=<span class="string">&quot;man&quot;</span>&gt;man</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> v-model=<span class="string">&#x27;sex&#x27;</span> value=<span class="string">&quot;woman&quot;</span>&gt;woman</span><br><span class="line"></span><br><span class="line">&lt;p&gt;您的爱好是: &#123;&#123;loves&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;game&quot;</span> v-model=loves value=<span class="string">&quot;玩游戏&quot;</span>&gt;玩游戏</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;music&quot;</span> v-model=loves value=<span class="string">&quot;听音乐&quot;</span>&gt;听音乐</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;basketball&quot;</span> v-model=loves value=<span class="string">&quot;打篮球&quot;</span>&gt;打篮球</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;eat&quot;</span> v-model=loves value=<span class="string">&quot;吃东西&quot;</span>&gt;吃东西</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;treenp&quot;</span> v-model=loves value=<span class="string">&quot;吹牛皮&quot;</span>&gt;吹牛皮</span><br><span class="line"></span><br><span class="line">.number: 将输入值转化为数字类型</span><br><span class="line">想要严格限制输入框只允许输入数字，请使用属性<span class="built_in">type</span>=<span class="string">&quot;number&quot;</span></span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model.number=<span class="string">&#x27;first&#x27;</span> @keyup=<span class="string">&#x27;sum&#x27;</span>&gt;+</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model.number=<span class="string">&#x27;last&#x27;</span> @keyup=<span class="string">&#x27;sum&#x27;</span>&gt; =</span><br><span class="line">&lt;span&gt;&#123;&#123;result&#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">.lazy: 当添加了.lazy修饰符后，双向绑定的数据就不同步了，相当于在input输入框失去焦点后触发的change事件中同步</span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;input v-model.lazy=<span class="string">&quot;msg&quot;</span> @change=<span class="string">&quot;show&quot;</span>&gt;</span><br><span class="line">   &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: 老许</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">show</span></span> () &#123;</span><br><span class="line">      console.log(this.msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">.trim 自动去除输入框前后(首尾)空格</span><br><span class="line">如下: 如果直接在开头输入空格，或者是在末尾输入空格，是不会显示有输入内容的</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model.trim=<span class="string">&quot;msg&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-on-指令"><a href="#v-on-指令" class="headerlink" title="v-on 指令"></a>v-on 指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v-on:click=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">v-on:keyup=<span class="string">&#x27;xxx(参数)&#x27;</span></span><br><span class="line">v-on:keyup.enter=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">功能：绑定指定事件名的回调函数</span><br><span class="line">简洁写法</span><br><span class="line">@click=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">@keyup=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">@keyup.enter=<span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>

<p>事件修饰符<br>prevent：阻止默认事件（常用）；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent=<span class="string">&quot;onSubmit&quot;</span>&gt;&lt;/form&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span> @click.prevent=<span class="string">&quot;showInfo&quot;</span>&gt;点我&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>stop：阻止事件冒泡（常用）；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;demo1&quot;</span> @click=<span class="string">&quot;showInfo&quot;</span>&gt;</span><br><span class="line">&lt;button @click.stop=<span class="string">&quot;showInfo&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;!-- 修饰符可以连续写 先写的先起作用: 这样写就是先阻止默认行为后阻止冒泡--&gt;</span><br><span class="line">&lt;!-- &lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span> @click.prevent.stop=<span class="string">&quot;showInfo&quot;</span>&gt;点我&lt;/a&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>once：事件只触发一次（常用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 事件只触发一次（常用） --&gt;</span><br><span class="line">&lt;button @click.once=<span class="string">&quot;showInfo&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="指令语法：条件渲染指令"><a href="#指令语法：条件渲染指令" class="headerlink" title="指令语法：条件渲染指令"></a>指令语法：条件渲染指令</h3><p>v-if 是控制元素是否加载到页面上（有性能开销）</p>
<p>适用于：切换频率较低的场景。</p>
<p>特点：不展示的 DOM 元素直接被移除。当条件不成立时, v-if 的所有子节点不会解析</p>
<p>注意：v-if 可以和:v-else-if、v-else 一起使用，但要求结构不能被 ‘打断’。</p>
<p>v-show 是控制元素的显示与隐藏 （初始创建时加载一次）</p>
<p>切换频率较高的场景。<br>不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;p v-if=<span class="string">&#x27;flag&#x27;</span>&gt;海底月是天上月&lt;/p&gt;</span><br><span class="line">&lt;p v-else&gt;眼前人是心上人&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p v-if=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;优秀&lt;/p&gt;</span><br><span class="line">&lt;p v-else-if=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;良好&lt;/p&gt;</span><br><span class="line">&lt;p v-else-if=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;一般&lt;/p&gt;</span><br><span class="line">&lt;p v-else=<span class="string">&quot;type === &#x27;D&#x27;&quot;</span>&gt;差&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p v-show=<span class="string">&#x27;flag&#x27;</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h3><p>v-for 指令:</p>
<p>1、用于展示列表数据</p>
<p>2、语法：v-for&#x3D;“(item, index) in xxx” :key&#x3D;“yyy”</p>
<p>3、可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;span&gt;key是唯一的标识 其数据类型只能是字符串或者数字&lt;/span&gt;</span><br><span class="line">  &lt;!-- item代表数组中的每一项 --&gt;</span><br><span class="line">  &lt;!-- 如果需要取下标 (item, index) --&gt;</span><br><span class="line">  &lt;li v-for=<span class="string">&quot;(item,index) of persons&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">	&#123;&#123;item.name&#125;&#125;-&#123;&#123;item.age&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历对象 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=<span class="string">&quot;(value,key) of car&quot;</span> :key=<span class="string">&quot;key&quot;</span>&gt;</span><br><span class="line">	&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历字符串 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=<span class="string">&quot;(char,index) of str&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历指定次数 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=<span class="string">&quot;(number,index) of 5&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h4 id="key-使用注意事项"><a href="#key-使用注意事项" class="headerlink" title="key 使用注意事项"></a>key 使用注意事项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">面试题：react、vue中的key有什么作用？（key的内部原理）</span><br><span class="line"></span><br><span class="line">1. 虚拟DOM中key的作用：</span><br><span class="line">key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】,</span><br><span class="line">随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</span><br><span class="line"></span><br><span class="line">2.对比规则：</span><br><span class="line">(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="line">		①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</span><br><span class="line">		②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</span><br><span class="line">(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class="line">		创建新的真实DOM，随后渲染到到页面。</span><br><span class="line"></span><br><span class="line">3. 用index作为key可能会引发的问题：</span><br><span class="line">	1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class="line">					会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class="line">	2. 如果结构中还包含输入类的DOM：</span><br><span class="line">					会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class="line">4. 开发中如何选择key?</span><br><span class="line">	1.最好使用每条数据的唯一标识作为key, 比如<span class="built_in">id</span>、手机号、身份证号、学号等唯一值。</span><br><span class="line">	2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</span><br><span class="line">	使用index作为key是没有问题的。</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;carname&#x27;</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&#x27;add&#x27;</span>&gt;添加一辆车&lt;/button&gt;</span><br><span class="line">  &lt;ul v-for=<span class="string">&#x27;(item, index) in list&#x27;</span> :key=<span class="string">&#x27;item.id&#x27;</span>&gt;</span><br><span class="line">  &lt;li&gt;&#123;&#123; item.name &#125;&#125;&lt;input&gt;&lt;/input&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div &gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    carname: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    nextId: 4,</span><br><span class="line">    list: [</span><br><span class="line">    &#123;<span class="built_in">id</span>: 001, name: <span class="string">&#x27;法拉利&#x27;</span> &#125;,</span><br><span class="line">    &#123;<span class="built_in">id</span>: 002, name: <span class="string">&#x27;兰博基尼&#x27;</span> &#125;,</span><br><span class="line">    &#123;<span class="built_in">id</span>: 003, name: <span class="string">&#x27;布加迪&#x27;</span> &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">add</span></span>() &#123;</span><br><span class="line">      this.list.unshift(&#123;</span><br><span class="line">        <span class="built_in">id</span>: this.nextId,</span><br><span class="line">        name: this.carname</span><br><span class="line">      &#125;)</span><br><span class="line">        this.nextId += 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>​ 定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</p>
<p>​ 语法：</p>
<p>​ 1.注册过滤器：Vue.filter (name,callback) 或 new Vue { filters:{} }</p>
<p>​ 2.使用过滤器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;&#123; xxx | 过滤器名 &#125;&#125;&#x27;</span> 或 v-bind:属性 = <span class="string">&quot;xxx | 过滤器名&quot;</span></span><br></pre></td></tr></table></figure>

<p>​ 备注：</p>
<p>​ 1.过滤器也可以接收额外参数、多个过滤器也可以串联</p>
<p>​ 2.并没有改变原本的数据, 是产生新的对应的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt; !--准备好一个容器--&gt;</span><br><span class="line">  &lt;div <span class="built_in">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;显示格式化后的时间&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 计算属性实现 --&gt;</span><br><span class="line">    &lt;h3&gt;现在是：&#123;&#123; fmtTime &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;!-- methods实现 --&gt;</span><br><span class="line">    &lt;h3&gt;现在是：&#123;&#123; getFmtTime() &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 过滤器实现 --&gt;</span><br><span class="line">    &lt;h3&gt;现在是：&#123;&#123; time | timeFormater&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 过滤器实现（传参） --&gt;</span><br><span class="line">    &lt;h3&gt;现在是：&#123;&#123; time | timeFormater(<span class="string">&#x27;YYYY_MM_DD&#x27;</span>) | mySlice&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3 :x=<span class="string">&quot;msg | mySlice&quot;</span>&gt;哈哈哈&lt;/h3&gt;</span><br><span class="line">	&lt;/div &gt;</span><br><span class="line"></span><br><span class="line">  &lt;div <span class="built_in">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; msg | mySlice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">	&lt;/body &gt;</span><br><span class="line"></span><br><span class="line">  &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">    //全局过滤器</span><br><span class="line">    Vue.filter(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(value)&#123;</span><br><span class="line">		<span class="built_in">return</span> value.slice(0,4)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">    time:1621561377603, //时间戳</span><br><span class="line">    msg:<span class="string">&#x27;你好，vue&#x27;</span></span><br><span class="line">			&#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      <span class="function"><span class="title">fmtTime</span></span>()&#123;</span><br><span class="line">		<span class="built_in">return</span> dayjs(this.time).format(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">getFmtTime</span></span>()&#123;</span><br><span class="line">		<span class="built_in">return</span> dayjs(this.time).format(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    //局部过滤器</span><br><span class="line">    filters:&#123;</span><br><span class="line">      timeFormater(value, str = <span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)&#123;</span><br><span class="line">			// console.log(<span class="string">&#x27;@&#x27;</span>,value)</span><br><span class="line">			<span class="built_in">return</span> dayjs(value).format(str)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#root2&#x27;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">      msg:<span class="string">&#x27;hello,vue!&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="computed-和-method"><a href="#computed-和-method" class="headerlink" title="computed 和 method"></a>computed 和 method</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;firstName&#x27;</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;lastName&#x27;</span>&gt;</span><br><span class="line">        &lt;!-- 插值表达式的实现 简单的js逻辑表达式 --&gt;</span><br><span class="line">        &lt;!-- &lt;span&gt;&#123;&#123;firstName +<span class="string">&#x27;-&#x27;</span>+ lastName&#125;&#125;&lt;/span&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;span&gt;&#123;&#123;firstName&#125;&#125; - &#123;&#123;lastName&#125;&#125; &lt;/span&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 更复杂的通过方法的实现</span><br><span class="line">        methods中的方法调用一次就会执行一次 如果数据不需要更新</span><br><span class="line">        会造成性能的浪费--&gt;</span><br><span class="line">        &lt;!-- &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName()&#125;&#125; &lt;/span&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; --&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                // 定义到data中的数据默认会被响应式监听</span><br><span class="line">                firstName: <span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">                lastName: <span class="string">&#x27;三&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                // <span class="function"><span class="title">fullName</span></span>() &#123;</span><br><span class="line">                //     console.log(111);</span><br><span class="line">                //     <span class="built_in">return</span> this.firstName + <span class="string">&#x27;-&#x27;</span> + this.lastName</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 计算属性computed: 计算属性的值本身不存在 是需要通过计算得到的</span><br><span class="line">            // 底层也是通过object.defineProperty来实现的</span><br><span class="line">            // computed 与 methods的区别</span><br><span class="line">            // 1、是否存在缓存: methods调用一次执行一次</span><br><span class="line">            // computed第一次调用时会将结果缓存 (有缓存)、后续调用在所依赖的数据不发生变化的前提下 直接返回缓存的结果 =&gt; 复用率高 提升性能</span><br><span class="line">            // 2、调用方式不同: methods使用时，一般情况需要加括号，而computed则不需要</span><br><span class="line">            // 3、绑定方式不同: methods是单向数据绑定 只有getter, computed是双向数据绑定, 有setter和getter</span><br><span class="line"></span><br><span class="line">            // 使用场景</span><br><span class="line">            // 某个属性的值需要来自多个属性的简单计算或者复杂逻辑计算得出的值时, 推荐使用computed属性, 比如购物车的总价计算</span><br><span class="line"></span><br><span class="line">            computed: &#123;</span><br><span class="line">                // 完整写法</span><br><span class="line">                fullName: &#123;</span><br><span class="line">                    // get作用: 当使用到fullName的时候 默认会调用get方法</span><br><span class="line">                    // get特点:</span><br><span class="line">                    // 1、初次使用计算属性的时候会执行</span><br><span class="line">                    // 2、当依赖的响应式数据发生变化的时候会执行</span><br><span class="line">                    <span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">                        console.log(111);</span><br><span class="line">                        <span class="built_in">return</span> this.firstName + <span class="string">&#x27;-&#x27;</span> + this.lastName</span><br><span class="line">                    &#125;,</span><br><span class="line">                    // 如果需要修改计算属性 需要提供一个<span class="built_in">set</span>方法</span><br><span class="line">                    // 并且这个<span class="built_in">set</span>方法中要能够引起依赖的数据的变化</span><br><span class="line">                    <span class="built_in">set</span>(val) &#123;</span><br><span class="line">                        <span class="built_in">let</span> arr = val.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                        this.firstName = arr[0]</span><br><span class="line">                        this.lastName = arr[1]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                // 简写</span><br><span class="line">                // <span class="function"><span class="title">fullName</span></span>()&#123;</span><br><span class="line">                //     <span class="built_in">return</span> this.firstName + <span class="string">&#x27;-&#x27;</span> + this.lastName</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;name&#x27;</span>&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&#x27;student.loves.playGame.tencent.name&#x27;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // watch 侦听器允许开发者监视数据的变化，从而针对数据的变化做特定的操作</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                // _data会收集data中的数据 处理成响应式</span><br><span class="line">                // 再将其挂载到vm实例对象下方便开发者使用 =&gt; 数据代理</span><br><span class="line">                // 响应式: 简单的说就是数据发生变化 页面会重新渲染</span><br><span class="line">                // 页面发生变化 数据也会随之变化</span><br><span class="line"></span><br><span class="line">                name: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">                message: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                student: &#123;</span><br><span class="line">                    loves: &#123;</span><br><span class="line">                        playGame: &#123;</span><br><span class="line">                            tencent: &#123;</span><br><span class="line">                                name: <span class="string">&#x27;王者荣耀&#x27;</span>,</span><br><span class="line">                                price: 99</span><br><span class="line">                            &#125;,</span><br><span class="line">                            wangyi: &#123;</span><br><span class="line">                                name: <span class="string">&#x27;和平精英&#x27;</span>,</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;,</span><br><span class="line">            watch: &#123;</span><br><span class="line">                // 侦听器本质是一个函数 需要侦听谁 就将侦听的属性当作函数名放到watch中即可</span><br><span class="line">                // 当被监视的属性发生变化时，回调函数自动调用，执行函数中的代码</span><br><span class="line">                // <span class="function"><span class="title">name</span></span>() &#123;</span><br><span class="line">                //     <span class="keyword">if</span> (this.name == <span class="string">&#x27;&#x27;</span>) <span class="built_in">return</span></span><br><span class="line">                //     const &#123; data &#125; = await axios.get(<span class="string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + this.name)</span><br><span class="line">                //     this.message = data.message</span><br><span class="line">                // &#125;</span><br><span class="line"></span><br><span class="line">                // 有配置项的情况 将函数改造成对象的形式</span><br><span class="line">                // name: &#123;</span><br><span class="line">                //     async handler(newVal, oldVal) &#123;</span><br><span class="line">                //         console.log(111);</span><br><span class="line">                //         console.log(<span class="string">&#x27;新值&#x27;</span>+ newVal, <span class="string">&#x27;老值&#x27;</span>+ oldVal);</span><br><span class="line">                //         <span class="keyword">if</span> (this.name == <span class="string">&#x27;&#x27;</span>) <span class="built_in">return</span></span><br><span class="line">                //         const &#123; data &#125; = await axios.get(<span class="string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + this.name)</span><br><span class="line">                //         this.message = data.message</span><br><span class="line">                //     &#125;,</span><br><span class="line">                // 表示页面初次渲染好之后，就立即触发当前的 watch 侦听器</span><br><span class="line">                // 执行handler函数中的内容</span><br><span class="line">                //     immediate: <span class="literal">true</span>,</span><br><span class="line">                // &#125;,</span><br><span class="line">                // 如果层次不深 可以直接通过这种方式侦听</span><br><span class="line">                // <span class="string">&#x27;student.name&#x27;</span>:&#123;&#125;</span><br><span class="line"></span><br><span class="line">                // <span class="string">&#x27;student.loves.playGame.tencent.name&#x27;</span>:&#123;</span><br><span class="line">                //     handler(newVal)&#123;</span><br><span class="line">                //         console.log(11111);</span><br><span class="line">                //         console.log(newVal);</span><br><span class="line">                //     &#125;</span><br><span class="line">                // &#125;</span><br><span class="line">				// vue中的watch默认不监视对象内部的值改变</span><br><span class="line">                student: &#123;</span><br><span class="line">                    handler(newVal) &#123;</span><br><span class="line">                        console.log(11111);</span><br><span class="line">                        console.log(newVal);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    // 开启深度监听</span><br><span class="line">                    //</span><br><span class="line">                    deep: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        vm.<span class="variable">$watch</span>(<span class="string">&#x27;student&#x27;</span>, &#123;</span><br><span class="line">            handler(newVal) &#123;</span><br><span class="line">              console.log(11111);</span><br><span class="line">              console.log(newVal);</span><br><span class="line">            &#125;,</span><br><span class="line">            // 开启深度监听</span><br><span class="line">            deep: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="computed-和-watch"><a href="#computed-和-watch" class="headerlink" title="computed 和 watch"></a>computed 和 watch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&quot;demo&quot;</span>&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">                lastName: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">                fullName: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            // 侦听器的方式</span><br><span class="line">            watch: &#123;</span><br><span class="line">                firstName: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">                    this.fullName = val + <span class="string">&#x27; &#x27;</span> + this.lastName</span><br><span class="line">                &#125;,</span><br><span class="line">                lastName: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">                    this.fullName = this.firstName + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 计算属性的方式</span><br><span class="line">            computed: &#123;</span><br><span class="line">                <span class="function"><span class="title">fullName</span></span>() &#123;</span><br><span class="line">                    this.fullName = this.firstName + <span class="string">&#x27; &#x27;</span> + this.lastName</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // computed和watch的区别</span><br><span class="line">            // 1、computed是有缓存的  watch没有</span><br><span class="line">            // 2、computed一般执行同步操作 异步操作在watch中实现</span><br><span class="line">            // 3、computed监听的那个数据的数据发生变化时,不会重新计算,只有依赖的数据发生变化时才会重新调用getter来计算</span><br><span class="line">            // watch监听的数据发生变化时 立马执行相应的回调函数重新计算</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><p>什么是数据代理？</p>
<p>通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> obj1 = &#123; x: 100 &#125;</span><br><span class="line"><span class="built_in">let</span> obj2 = &#123; y: 200 &#125;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">	<span class="function"><span class="title">get</span></span>() &#123;</span><br><span class="line">		<span class="built_in">return</span> obj1.x</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="built_in">set</span>(value) &#123;</span><br><span class="line">		obj1.x = value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">此时操作obj2实际上在操作obj1</span><br></pre></td></tr></table></figure>

<p>vue 中的数据代理</p>
<p>vue 里面 data 的数据代理 通过_data 收集 data 中的数据</p>
<p>利用 Object.defineProperty 中的 get 和 set 将 data 中的每个数据进行数据代理</p>
<p>再将代理好的数据挂载到 vm 实例上</p>
<p>好处: 方便开发者操作 data 中的数据</p>
<h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set()"></a>Vue.set()</h3><p>注意：受现代 JavaScript 的限制 (以及废弃 Object.observe)，Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的</p>
<p>如果在实例创建之后添加新的属性到实例上，它不会触发视图更新</p>
<p>如果想要数据是响应式的并且能触发视图更新 使用 Vue.set()</p>
<p>(比如 this.myObject.newProperty &#x3D; ‘hi’)</p>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">自定义指令总结：</span><br><span class="line">一、定义语法：</span><br><span class="line">(1).局部指令：</span><br><span class="line">new Vue(&#123; new Vue(&#123;</span><br><span class="line">directives:&#123;指令名:配置对象&#125; 或 directives&#123;指令名:回调函数&#125;</span><br><span class="line">&#125;) &#125;)</span><br><span class="line">(2).全局指令：</span><br><span class="line">Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)</span><br><span class="line"></span><br><span class="line">二、配置对象中常用的3个回调：</span><br><span class="line">(1).<span class="built_in">bind</span>：指令与元素成功绑定时调用。</span><br><span class="line">(2).inserted：指令所在元素被插入页面时调用。</span><br><span class="line">(3).update：指令所在模板结构被重新解析时调用。</span><br><span class="line"></span><br><span class="line">三、备注：</span><br><span class="line">1.指令定义时不加v-，但使用时要加v-；</span><br><span class="line">2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!-- &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-focus&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">    自定义指令: &lt;p v-two-double.flag=<span class="string">&quot;number&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;number += 1&quot;</span>&gt;++&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; age &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;age += 1&quot;</span>&gt;++&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    自动聚焦: &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-focus v-if=<span class="string">&quot;flag&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;del&quot;</span>&gt;移除元素&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // ctrl+<span class="built_in">shift</span>+k 删除当前行</span><br><span class="line">    Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    // 1、自定义指令什么时候会被执行 ?</span><br><span class="line">    // - 指令与页面元素绑定成功时(页面一打开)</span><br><span class="line">    // - 自定义指令所在的vue模板被重新解析时</span><br><span class="line"></span><br><span class="line">    // 函数式写法</span><br><span class="line">    Vue.directive(<span class="string">&#x27;two-double&#x27;</span>, (el, binding) =&gt; &#123;</span><br><span class="line">      el.innerText = binding.value * 2</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // Vue.directive(<span class="string">&#x27;focus&#x27;</span>, (el, binding) =&gt; &#123;</span><br><span class="line">    //   // 聚焦失败 原因是此时元素并没有渲染到页面上</span><br><span class="line">    //   el.focus()</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 对象式写法</span><br><span class="line">    Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">      // 指令与元素成功绑定时调用</span><br><span class="line">      <span class="built_in">bind</span>(el,binding)&#123;</span><br><span class="line">        el.style.backgroundColor = <span class="string">&#x27;skyblue&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      // 指令所在元素被插入页面时调用</span><br><span class="line">      inserted(el,binding)&#123;</span><br><span class="line">        el.focus()</span><br><span class="line">      &#125;,</span><br><span class="line">      // 指令所在模板结构被重新解析时调用</span><br><span class="line">      update(el,binding) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;update&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">unbind</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">&#x27;unbind&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        number: 1,</span><br><span class="line">        age: 1,</span><br><span class="line">        flag: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">del</span></span>()&#123;</span><br><span class="line">          this.flag = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 局部自定义指令</span><br><span class="line">      // directives: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue-组件"><a href="#vue-组件" class="headerlink" title="vue 组件"></a>vue 组件</h3><h3 id="组件化和模块化的区别"><a href="#组件化和模块化的区别" class="headerlink" title="组件化和模块化的区别"></a>组件化和模块化的区别</h3><p>模块化</p>
<p>站在代码逻辑的角度来划分 解决 js 依赖等问题 方便分层开发 保证每个模块职能单一</p>
<p>组件化</p>
<p>站在 UI 界面的角度来划分 方便将来 UI 组件的复用</p>
<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>第一种注册方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 在页面中使用组件 --&gt;</span><br><span class="line">        &lt;my-com&gt;&lt;/my-com&gt;</span><br><span class="line">        &lt;my-com&gt;&lt;/my-com&gt;</span><br><span class="line">        &lt;my-com&gt;&lt;/my-com&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 关闭生产环境下的vue提示</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">        // 使用组件三步骤</span><br><span class="line">        // 1、通过Vue.extend(options)定义组件</span><br><span class="line">        // 2、通过Vue.component(&#x27;组件名&#x27;, 定义好的组件)注册全局组件</span><br><span class="line">        // 3、在页面结构中通过&lt;组件名&gt;&lt;/组件名&gt;使用组件</span><br><span class="line"></span><br><span class="line">        // 注意事项</span><br><span class="line">        // 1、template有且只能有一个根元素</span><br><span class="line">        // 2、不要写el属性 定义的组件都要交给vm管理 由vm中的el来决定服务于哪个容器</span><br><span class="line">        // 3、如果自定义组件名使用了驼峰命名法(myCom) 在页面中使用的时候要用-分割组件名并且转为小写(my-com)</span><br><span class="line">        // 4、组件名不要使用已有的元素名称，比如：div、span都不行。</span><br><span class="line">        // 5、组件中的data必须定义为一个函数 函数中必须返回一个对象 避免组件在复用时 数据直接相互引用导致冲突问题</span><br><span class="line">        // 6、不用使用脚手架时，单标签会导致复用组件后续无法渲染的问题</span><br><span class="line">        // 7、组件中的this指向的是当前组件的实例对象</span><br><span class="line">        // 8、使用name配置项指定组件在开发者工具中呈现的名字</span><br><span class="line"></span><br><span class="line">        // 第一种注册方式 Vue.extend + Vue.component 结合</span><br><span class="line">        // 定义组件</span><br><span class="line">        let mycom = Vue.extend(&#123;</span><br><span class="line">            // el: &#x27;#app&#x27;, 违背设计组件的初心</span><br><span class="line">            // template: 将来展示在页面上的结构</span><br><span class="line">            // name: &#x27;qwer&#x27;, 使用name配置项指定组件在开发者工具中呈现的名字</span><br><span class="line">            template: `&lt;div&gt;</span><br><span class="line">                        &lt;h1 @click=&#x27;show&#x27;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">                        &lt;h3&gt;&#123;&#123;msg&#125;&#125;&lt;/h3&gt;</span><br><span class="line">                       &lt;/div&gt;`,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    msg: &#x27;hello component&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                show()&#123;</span><br><span class="line">                    // this指向的是当前组件的实例对象</span><br><span class="line">                    console.log(this);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        // 注册全局组件</span><br><span class="line">        Vue.component(&#x27;my-com&#x27;, mycom)</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>第二种注册方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;mycom1&gt;&lt;/mycom1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- .vue文件中也是通过这种方式定义页面结构 --&gt;</span><br><span class="line">    &lt;!-- template模板 只会将template中的内容渲染到页面上 不会将template标签渲染到页面上 --&gt;</span><br><span class="line">    &lt;template id=&quot;mycom1&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;第三种注册方式&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 第二种注册方式 =&gt; template没有提示</span><br><span class="line">        // Vue.component(&#x27;mycom1&#x27;, Vue.extend(&#123;</span><br><span class="line">        //     template: &#x27;&lt;h1&gt;第二种注册方式&lt;/h1&gt;&#x27;,</span><br><span class="line">        // &#125;))</span><br><span class="line"></span><br><span class="line">        // 简写 Vue.component(&#x27;组件名&#x27;, 配置对象) 内部会帮我们调用Vue.extend</span><br><span class="line">        // Vue.component(&#x27;mycom1&#x27;, &#123;</span><br><span class="line">        //     template: &#x27;&lt;h1&gt;第二种注册方式&lt;/h1&gt;&#x27;,</span><br><span class="line">        // &#125;)</span><br><span class="line"></span><br><span class="line">        // 第三种注册方式</span><br><span class="line">        Vue.component(&#x27;mycom1&#x27;, &#123;</span><br><span class="line">            template: &#x27;#mycom1&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="组件-data-详解"><a href="#组件-data-详解" class="headerlink" title="组件 data 详解"></a>组件 data 详解</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">   &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">   &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">       &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">       &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       // 定义一个名为 button-counter 的新组件</span><br><span class="line">       Vue.component(&#x27;button-counter&#x27;, &#123;</span><br><span class="line">           data() &#123;</span><br><span class="line">               return &#123;</span><br><span class="line">                   count: 0</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           template: &#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       // 为什么data必须是一个函数且返回一个对象</span><br><span class="line">       // 如果是对象的话多个页面可能会复用这个组件 如果其中一个页面对组件data进行修改的话 其它页面的data也会发生变化 造成数据冲突 (引用问题)</span><br><span class="line">       // 而定义成一个函数 每次返回一个新的对象 保证了对象的唯一性 避免了组件数据修改影响其他组件数据</span><br><span class="line">       var vm = new Vue(&#123;</span><br><span class="line">           el: &#x27;#app&#x27;,</span><br><span class="line">           data() &#123;</span><br><span class="line">               return &#123;&#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           components: &#123;</span><br><span class="line"></span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;&#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       // var obj = &#123;x:100, y:100&#125;</span><br><span class="line">       // var obj2 = obj</span><br><span class="line">       // obj2.x = 1000</span><br><span class="line">       // console.log(obj); // &#123;x:1000, y:100&#125;</span><br><span class="line"></span><br><span class="line">       // ===================================</span><br><span class="line">       // function getObj()&#123;</span><br><span class="line">       //     return &#123;x: 100, y:100&#125;</span><br><span class="line">       // &#125;</span><br><span class="line">       // var obj = getObj()</span><br><span class="line">       // var obj2 = getObj()</span><br><span class="line">       // obj2.x = 1000</span><br><span class="line">       // console.log(obj); // &#123;x:100, y:100&#125;</span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;!-- 容器 --&gt;</span><br><span class="line">   &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &lt;mycom&gt;&lt;/mycom&gt;</span><br><span class="line">       &lt;mycom2&gt;&lt;/mycom2&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 模板 --&gt;</span><br><span class="line">   &lt;template id=&quot;tmpl&quot;&gt;</span><br><span class="line">       &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       let mycom = Vue.extend(&#123;</span><br><span class="line">           template: &#x27;#tmpl&#x27;,</span><br><span class="line">           data()&#123;</span><br><span class="line">               return &#123;</span><br><span class="line">                   msg: &#x27;局部组件注册&#x27;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       let mycom2 = Vue.extend(&#123;</span><br><span class="line">           template: &#x27;#tmpl&#x27;,</span><br><span class="line">           data()&#123;</span><br><span class="line">               return &#123;</span><br><span class="line">                   msg: &#x27;局部组件注册222&#x27;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       var vm = new Vue(&#123;</span><br><span class="line">           el: &#x27;#app&#x27;,</span><br><span class="line">           data: &#123;&#125;,</span><br><span class="line">           methods: &#123;&#125;,</span><br><span class="line">           components: &#123;</span><br><span class="line">               mycom,</span><br><span class="line">               mycom2</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="嵌套组件"><a href="#嵌套组件" class="headerlink" title="嵌套组件"></a>嵌套组件</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">   &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">   &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &lt;!-- &lt;app&gt;&lt;/app&gt; --&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;template id=&quot;bwm&quot;&gt;</span><br><span class="line">       &lt;h1 @click=&#x27;show&#x27;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">   &lt;template id=&quot;car&quot;&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           &lt;h1 @click=&#x27;show&#x27;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">           &lt;bwm&gt;&lt;/bwm&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">   &lt;template id=&quot;app2&quot;&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           &lt;h1 @click=&#x27;show&#x27;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">           &lt;car&gt;&lt;/car&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">       // 宝马组件</span><br><span class="line">       let bwm = Vue.extend(&#123;</span><br><span class="line">           template: &#x27;#bwm&#x27;,</span><br><span class="line">           data() &#123;</span><br><span class="line">               return &#123;</span><br><span class="line">                   msg: &#x27;宝马最新款x7只需要100w&#x27;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line">               show() &#123;</span><br><span class="line">                   console.log(&#x27;仅仅100w 心动不如行动&#x27;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       // 车组件</span><br><span class="line">       let car = Vue.extend(&#123;</span><br><span class="line">           template: &#x27;#car&#x27;,</span><br><span class="line">           data() &#123;</span><br><span class="line">               return &#123;</span><br><span class="line">                   msg: &#x27;男人必须有一辆爱车~&#x27;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line">               show() &#123;</span><br><span class="line">                   console.log(&#x27;比如说劳斯莱斯&#x27;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           components: &#123;</span><br><span class="line">               bwm</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       // App组件</span><br><span class="line">       let App = Vue.extend(&#123;</span><br><span class="line">           template: &#x27;#app2&#x27;,</span><br><span class="line">           data() &#123;</span><br><span class="line">               return &#123;</span><br><span class="line">                   msg: &#x27;app2&#x27;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line">               show() &#123;</span><br><span class="line">                   console.log(&#x27;app2&#x27;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           components: &#123;</span><br><span class="line">               car</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       var vm = new Vue(&#123;</span><br><span class="line">           template: &#x27;&lt;App&gt;&lt;/App&gt;&#x27;,</span><br><span class="line">           components: &#123;</span><br><span class="line">               App</span><br><span class="line">           &#125;,</span><br><span class="line">           data: &#123;&#125;,</span><br><span class="line">           methods: &#123;&#125;</span><br><span class="line">       &#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(创建前): 在实例初始化之后，数据代理和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问methods, data等上的方法和数据，这个钩子一般不会做太多功能，会初始化自己的生命周期，事件方法如：$on $emit</span><br><span class="line"></span><br><span class="line"><span class="title function_">created</span>(创建完成): 此时已经完成了数据响应式监听和数据代理，可以获取数据和调用方法 但是<span class="variable constant_">DOM</span>未渲染 在这个周期里面，可以去发送请求, 因为请求是异步的，不会阻碍实例加载，除非是那些同步操走才会导致页面空白。站在这个角度说来，在这个周期里面进行请求，渲染速度反而会更快。</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeMount</span>(挂载前): 检测有没有template属性 有的话会把template渲染成一个render函数，开始解析模板，生成虚拟dom，没有则将外部的html作为模板进行解析。此时数据虽然初始化完成，<span class="variable constant_">DOM</span>未完成挂载，页面还不能显示解析好的内容，数据的双向绑定还是显示&#123;&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">上下两者中间还有一个创建vm.<span class="property">$el</span>保存真实dom的过程，将来虚拟dom对比发现可复用的元素，就从该属性身上取出来渲染 同学们切记 !!!</span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(挂载完成): 数据和真实<span class="variable constant_">DOM</span>都完成挂载，这个周期适合执行初始化需要操作<span class="variable constant_">DOM</span>的方法。至此初始化操作完成，一般在此进行：开启定时器，发送网络请求，订阅消息，绑定自定义事件等初始化操作</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeUpdate</span>(更新前): 只要是页面数据改变了都会触发，数据更新之前，页面数据还是原来的数据，页面和数据没有同步，当你请求赋值一个数据的时候会执行这个周期，如果没有数据改变不执行。</span><br><span class="line"></span><br><span class="line">中间还有个虚拟<span class="variable constant_">DOM</span>对比的过程，根据新数据，生成新的虚拟<span class="variable constant_">DOM</span>，随后与旧的虚拟<span class="variable constant_">DOM</span>进行比较，最终完成页面更新，如果真实<span class="variable constant_">DOM</span>可以复用 则从vm.<span class="property">$el</span>中取出对应的真实<span class="variable constant_">DOM</span>直接渲染 即:完成了<span class="title class_">Model</span> =&gt; <span class="title class_">View</span>的更新，同学们切记 !!!</span><br><span class="line"></span><br><span class="line"><span class="title function_">updated</span>(更新完成): 只要是页面数据改变了都会触发，数据更新完毕，页面的数据是更新完成的。beforeUpdate和updated要谨慎使用，因为页面更新数据的时候都会触发，在这里操作数据很影响性能和容易死循环。此时页面和数据保持同步</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeDestroy</span>(销毁前): 这个周期是在组件销毁之前执行，此时: vm中所有的: data、methods、指令等等，都处于可用状态，马上要执行销毁过程，一般在此阶段:关闭定时器、取消订阅消息、解绑自定义事件等收尾操作</span><br><span class="line"></span><br><span class="line"><span class="title function_">destroyed</span>(销毁完成): 在实例销毁之后调用，调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，自定义事件会被移除</span><br></pre></td></tr></table></figure>

<h3 id="vue-动画"><a href="#vue-动画" class="headerlink" title="vue 动画"></a>vue 动画</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        /* v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入 */</span><br><span class="line">        /* v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了 */</span><br><span class="line">        .v-enter,</span><br><span class="line">        .v-leave-to &#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">            transform: translateX(150px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* v-enter-active 【入场动画的时间段】 */</span><br><span class="line">        /* v-leave-active 【离场动画的时间段】 */</span><br><span class="line">        .v-enter-active,</span><br><span class="line">        .v-leave-active &#123;</span><br><span class="line">            transition: all .5s ease</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .my-enter,</span><br><span class="line">        .my-leave-to &#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">            transform: translateY(150px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .my-enter-active,</span><br><span class="line">        .my-leave-active &#123;</span><br><span class="line">            transition: all .5s cubic-bezier(0, 1.95, .89, .38)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;button @click=&#x27;flag = !flag&#x27;&gt;Toggle&lt;/button&gt;</span><br><span class="line">        &lt;!-- 使用 transition 元素，把 需要被动画控制的元素，包裹起来 --&gt;</span><br><span class="line">        &lt;transition&gt;</span><br><span class="line">            &lt;h3 v-if=&#x27;flag&#x27;&gt;有些同学的心已经到家了&lt;/h3&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;!-- 对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 &lt;transition&gt;，则 v- 是这些类名的默认前缀。</span><br><span class="line">        如果需要自定义类名 可以通过name属性: name=&#x27;my&#x27;  .my-enter --&gt;</span><br><span class="line">        &lt;transition name=&#x27;my&#x27;&gt;</span><br><span class="line">            &lt;h3 v-if=&#x27;flag&#x27;&gt;有些同学的心已经到家了&lt;/h3&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    flag: false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue2-响应式原理"><a href="#vue2-响应式原理" class="headerlink" title="vue2 响应式原理"></a>vue2 响应式原理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x 双向数据绑定原理是通过Objcet.defineProperty来实现的</span></span><br><span class="line"><span class="comment">// 这种方式有缺点: 数组的长度 数组的内容发生变化检测不到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">phone</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// let obj = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 视图更新的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;视图更新了 ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">&quot;push&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;shift&quot;</span>, <span class="string">&quot;unshift&quot;</span>, <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;reverse&quot;</span>, <span class="string">&quot;splice&quot;</span>];</span><br><span class="line"><span class="comment">// 将数组的原型保存一份</span></span><br><span class="line"><span class="keyword">let</span> arrProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 创建原型 将数组原型拷贝一份</span></span><br><span class="line"><span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrProto);</span><br><span class="line"><span class="comment">// 重写数组的方法</span></span><br><span class="line">methods.<span class="title function_">forEach</span>(<span class="function">(<span class="params">method</span>) =&gt;</span> &#123;</span><br><span class="line">  proto[method] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// AOP 面向切面编程</span></span><br><span class="line">    <span class="comment">// 改变了数组的数据</span></span><br><span class="line">    arrProto[method].<span class="title function_">call</span>(<span class="variable language_">this</span>, ...<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="comment">// 重新渲染视图</span></span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断一个对象是不是数组</span></span><br><span class="line">  <span class="comment">// if(Object.prototype.toString.call(obj) === &#x27;[object Array]&#x27;)&#123;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    <span class="comment">// 让观测的对象的原型和我们自己重写的原型建立关系</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = proto;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果观察的是一个对象的话 对其属性进行响应式监听(set、get)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&quot;[object Object]&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 取出对象中的每一个键和值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="comment">// 调用响应式处理函数</span></span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, key, obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 观察obj对象</span></span><br><span class="line"><span class="title function_">observe</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式处理</span></span><br><span class="line"><span class="comment">// Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 检测对象的属性值是否还是对象</span></span><br><span class="line">  <span class="title function_">observe</span>(val);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测设置的值是不是对象</span></span><br><span class="line">      <span class="title function_">observe</span>(newVal);</span><br><span class="line">      <span class="comment">// 新值和旧值不相等的时候</span></span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="comment">// 覆盖掉原来的val值</span></span><br><span class="line">        val = newVal;</span><br><span class="line">        <span class="comment">// 通知render函数重新渲染视图</span></span><br><span class="line">        <span class="title function_">render</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// obj.age = 20</span></span><br><span class="line"><span class="comment">// console.log(obj.name, obj.age);</span></span><br><span class="line"><span class="comment">// 至此 基本可以实现数据发生变化 视图更新的效果</span></span><br><span class="line"><span class="comment">// 但是 如果数据有多层呢 也就是属性对应的值也是对象?</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;huawei&#x27;</span></span><br><span class="line"><span class="comment">// console.log(obj.phone.name);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改的值和原来的值一样 不需要重新渲染视图</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;iphone&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果重新为对象obj的phone赋值一个新的对象呢? 视图要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone = &#123;name: &#x27;huawei&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并且当修改新的对象的属性值时 视图也要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;zs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为对象新增属性值呢? 也是没有办法监测到的</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;man&#x27;</span></span><br><span class="line"><span class="comment">// $set来解决这个</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$myset</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="title function_">splice</span>(key, val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">defineReactive</span>(obj, key, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $myset(obj, &#x27;sex&#x27;, &#x27;man&#x27;)</span></span><br><span class="line"><span class="comment">// 修改新增的属性值 视图也能更新</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;woman&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = Object.assign(obj.phone, &#123;price: &#x27;666&#x27;&#125;)</span></span><br><span class="line"><span class="comment">// obj.phone.price = 888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = &#123;...obj.phone, ...&#123;price: &#x27;666&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">// obj.phone.price = &#x27;888&#x27;</span></span><br><span class="line"><span class="comment">// 以后vue涉及到给data中的对象新增属性时 有三种方式</span></span><br><span class="line"><span class="comment">// 1、this.$set() || Vue.set()</span></span><br><span class="line"><span class="comment">// 2、obj = Object.assign(原对象, 新对象(新增的属性:值))</span></span><br><span class="line"><span class="comment">// 2、obj = &#123;...原对象, ...新对象(新增的属性:值)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================== 数组 ======================</span></span><br><span class="line"><span class="comment">// 数组的响应式数据处理依赖的并不是Object.defineProperty 而是对数组的能够引起数据变化的方法进行重写</span></span><br><span class="line"><span class="comment">// obj.push(6)</span></span><br><span class="line"><span class="comment">// obj.length ++</span></span><br><span class="line"><span class="comment">// obj[0] = 88</span></span><br><span class="line"><span class="comment">// $myset(obj, &#x27;0&#x27;, 66)</span></span><br></pre></td></tr></table></figure>

<h3 id="props-父传子"><a href="#props-父传子" class="headerlink" title="props (父传子)"></a>props (父传子)</h3><p>父组件要正向地向子组件传递数据或参数，子组件收到后，根据传递过来的数据不同，渲染不同的页面内容，或者执行操作。<br>这个正向传递数据的过程是通过 props 来实现的。子组件使用 props 来声明需要从父组件接受的数据。</p>
<p>注意:<br>1、所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。<br>2、每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>
<p>两种常见的试图变更一个 prop 的情形<br>1、这个 prop 用来传递一个初始值 这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data property 并将这个 prop 用作其初始值<br>2、这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性</p>
<h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><p>作用: 在下次 DOM 更新循环结束之后执行其指定的回调。<br>应用场景:<br>1、在修改数据之后，要基于更新后的新 dom 进行某些操作时，可以立即使用这个方法，获取更新后的 DOM。<br>2、在 created 中需要操作 dom，此时 dom 并没有加载完毕</p>
<p>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。<br>Vue 是异步执行 DOM 更新的，简单来说，Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。</p>
<h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>mixin<br>Vue.mixin 给我们提供了一种混入 Vue 实例的方法，创建了混入对象之后，我们自定义的方法或者变量可以很轻松的挂载在 Vue 实例上，给我们带来方便</p>
<p>Vue.mixin 为我们提供了两种混入方式：局部混入和全局混入<br>局部混入：<br>顾名思义就是部分混入，也就是只有引入了 mixin 的混入对象才可以使用，并且只有在引入了 mixin 混入对象的组件中才生效</p>
<p>全局混入：<br>全局混入我们只需要把 mixin.js 引入到 main.js 中，然后将 mixin 放入到 Vue.mixin()方法中即可；<br>全局混入更为便捷，我们将不用在子组件声明，全局混入将会影响每一个组件的实例，使用的时候需要小心谨慎；这样全局混入之后，我们可以直接在组件中通过 this.变量&#x2F;方法来调用 mixin 混入对象的变量&#x2F;方法；</p>
<p>mixin 可以定义公用的变量或方法，但是 mixin 中的数据是不共享的，也就是每个组件中的 mixin 实例都是不一样的，都是单独存在的个体，不存在相互影响的；</p>
<h4 id="mixin-合并策略"><a href="#mixin-合并策略" class="headerlink" title="mixin 合并策略"></a>mixin 合并策略</h4><p>1、data<br>mixins 中的 data 会合并到 data 中，有冲突的话，data 中数据覆盖 mixins 中的数据。</p>
<p>2、methods、components 和 directives<br>methods、components 和 directives 会执行，但有冲突时，组件中的 methods、components 和 directives 会覆盖 mixins 中的 methods、components 和 directives。</p>
<p>3、特殊的钩子函数（生命周期）</p>
<p>组件和 mixin 的生命周期都要执行，但是 mixin 的生命周期优先于组件生命周期执行<br>mixin beforeCreate -&gt; component beforeCreate -&gt; mixin created -&gt; component created</p>
<h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>什么是动态组件？</p>
<p>动态组件指的是动态切换组件的显示与隐藏</p>
<h4 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h4><p>vue 提供了一个内置的组件，专门用来实现动态组件的渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;comName=&#x27;MyLeft&#x27;&quot;</span>&gt;显示<span class="title class_">Left</span>组件&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName=&#x27;MyRight&#x27;&quot;</span>&gt;</span>显示Right组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyLeft</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyRight</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件的交互</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">comName</span>: <span class="string">&#x27;MyLeft&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MyLeft</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MyRight</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;left组件被创建了&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;left组件被销毁了&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件被缓存了&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件被激活了&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="devServer-代理跨域"><a href="#devServer-代理跨域" class="headerlink" title="devServer 代理跨域"></a>devServer 代理跨域</h3><p>vue.config.js 配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">join</span>(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">resolve</span>.<span class="property">alias</span></span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&quot;@&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>))</span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&quot;assets&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;src/assets&quot;</span>))</span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&quot;components&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;src/components&quot;</span>))</span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&quot;base&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;baseConfig&quot;</span>))</span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&quot;public&quot;</span>, <span class="title function_">resolve</span>(<span class="string">&quot;public&quot;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">pages</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: &#123;</span><br><span class="line">      <span class="comment">// page 的入口</span></span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&quot;src/index.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 关闭eslint语法校验</span></span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 代理的方式配置跨域</span></span><br><span class="line">    <span class="comment">// 缺点:</span></span><br><span class="line">    <span class="comment">// 1、会先从本地public下查找有没有对应接口的文件 如果有 先返回本地的文件数据 没有再去发起请求访问服务器的数据 (优先匹配前端资源)</span></span><br><span class="line">    <span class="comment">// 2、没法配置多个代理</span></span><br><span class="line">    <span class="comment">// proxy: &#x27;http://localhost:3000/&#x27;,</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 正则匹配所有以&#x27;/api&#x27;开头的请求路径</span></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// http://localhost:8080/api/teachers</span></span><br><span class="line">        <span class="comment">// http://localhost:3000/teachers</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// target: 代理目标的基础路径</span></span><br><span class="line">        <span class="comment">// http://localhost:8080/teachers</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:3000/&quot;</span>,</span><br><span class="line">        <span class="comment">// 路径重写</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ws：websocket</span></span><br><span class="line">        <span class="comment">// ws: true,</span></span><br><span class="line">        <span class="comment">// 改变源, 也就是控制host</span></span><br><span class="line">        <span class="comment">// changeOrigin: true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/v1&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:3001&quot;</span>,</span><br><span class="line">        <span class="comment">// 路径重写</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/v1&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p>vue 的一个插件库，是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目 中组件的切换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">基本使用</span><br><span class="line">安装vue-router，命令：npm i vue-router@<span class="number">3</span></span><br><span class="line">引入插件: <span class="keyword">import</span> <span class="title class_">VueRouter</span> form <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">应用插件：<span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line">编写router配置项：</span><br><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//使用vueRouter</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="comment">//引入路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">	<span class="attr">routes</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"><span class="comment">//main.js中引入挂载router</span></span><br></pre></td></tr></table></figure>

<h4 id="实现切换（active-class-可配置高亮样式）"><a href="#实现切换（active-class-可配置高亮样式）" class="headerlink" title="实现切换（active-class 可配置高亮样式）"></a>实现切换（active-class 可配置高亮样式）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/about&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">About</span></span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<h4 id="指定展示位置"><a href="#指定展示位置" class="headerlink" title="指定展示位置"></a>指定展示位置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>

<h4 id="路由注意点"><a href="#路由注意点" class="headerlink" title="路由注意点"></a>路由注意点</h4><p>路由组件通常存放在 pages 或者 view 文件夹，一般组件(可复用)通常存放在 components 文件夹。</p>
<p>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载（keep-alive）。</p>
<p>每个组件都有自己的$route 属性，里面存储着自己的路由信息。</p>
<p>整个应用只有一个 router，可以通过组件的$router 属性获取到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router : 是路由操作对象，只写对象</span><br><span class="line">route : 路由信息对象，只读对象</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作 路由跳转</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;word&#x27;</span>,</span><br><span class="line">          <span class="attr">age</span>:<span class="string">&#x27;11&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 路由参数接收</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">params</span>.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">params</span>.<span class="property">age</span>;</span><br></pre></td></tr></table></figure>

<h4 id="嵌套路由（多级路由）"><a href="#嵌套路由（多级路由）" class="headerlink" title="嵌套路由（多级路由）"></a>嵌套路由（多级路由）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">		<span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">		<span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">		<span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line">				<span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line">				<span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">			&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">                <span class="comment">// 路由懒加载写法</span></span><br><span class="line">                <span class="attr">component</span>:<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="comment">/*webpackChunkName*:&#x27;user&#x27;/, User)</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">		]</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">]</span></span><br></pre></td></tr></table></figure>

<h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><p>懒加载简单来说就是延迟加载或按需加载，就是用到的时候再进行加载。</p>
<p>作用: 首屏组件加载速度更快一些，解决白屏问题；更好的客户体验；也是性能优化的一种方式；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="comment">// 首屏没有做路由懒加载</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/center&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="comment">// 路由懒加载: 懒加载简单来说就是延迟加载或按需加载，就是用到的时候再进行加载。</span></span><br><span class="line">    <span class="comment">// 作用: 首屏组件加载速度更快一些，解决白屏问题；更好的客户体验；</span></span><br><span class="line">    <span class="comment">// 也是性能优化的一种方式；</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;center&quot; */</span> <span class="string">&quot;../views/Center.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Search.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="路由的-query-参数"><a href="#路由的-query-参数" class="headerlink" title="路由的 query 参数"></a>路由的 query 参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail?id=666&amp;title=你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">	<span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		path:&#x27;/home/message/detail&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		query:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		   id:666,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            title:&#x27;你好&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">	&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line">接收参数</span><br><span class="line"></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure>

<h4 id="路由的-params-参数"><a href="#路由的-params-参数" class="headerlink" title="路由的 params 参数"></a>路由的 params 参数</h4><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。 在 vue-router 中使用英文的冒号（:）来定义路由的参数项</p>
<p>配置路由，声明接收 params 参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">	<span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">	<span class="attr">children</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">			<span class="attr">children</span>:[</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">					<span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">					<span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传递参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail/666/你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">	<span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		params:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		   id:666,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            title:&#x27;你好&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">		&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">	&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>接收参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span>;</span><br></pre></td></tr></table></figure>

<h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><p>用：对路由进行权限控制</p>
<p>分类：全局守卫、独享守卫、组件内守卫</p>
<h4 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEach&quot;</span>, to, <span class="keyword">from</span>);</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;</span><br><span class="line">    <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>) === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">//权限控制的具体规则</span></span><br><span class="line">      <span class="title function_">next</span>(); <span class="comment">//放行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;暂无权限查看&quot;</span>);</span><br><span class="line">      <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">//放行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;afterEach&quot;</span>, to, <span class="keyword">from</span>);</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span>; <span class="comment">//修改网页的title</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&quot;vue_test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="独享守卫"><a href="#独享守卫" class="headerlink" title="独享守卫:"></a>独享守卫:</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">	<span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>) === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">			<span class="title function_">next</span>()</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">			<span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="title function_">next</span>()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件内守卫："><a href="#组件内守卫：" class="headerlink" title="组件内守卫："></a>组件内守卫：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h3><p>对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值。<br>hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。<br>hash 模式：<br>地址中永远带着#号，不美观 。<br>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。<br>兼容性较好。<br>history 模式：<br>地址干净，美观 。<br>兼容性和 hash 模式相比略差。底层是 h5 api history 对象<br>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。可以安装 connect-history-api-fallback 插件解决</p>
<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>什么是 vuex？<br>vue 中实现集中式状态（数据）管理的 vue 插件（vue.use(vuex)），对 vue 应用中多个组件的共享状态进行集中式管理（读&#x2F;写），是一种任意组件之间通信的方式，适用于较大型项目</p>
<p>使用场景？<br>1、多个视图依赖于同一状态</p>
<p>2、来自不同视图的行为需要变更同一状态<br><img src="http://laoxu.fun/2022/06/30/vue2/image-20220814212828028.png" alt="alt"></p>
<h4 id="Vuex-的工作流程"><a href="#Vuex-的工作流程" class="headerlink" title="Vuex 的工作流程"></a>Vuex 的工作流程</h4><p>一、安装 vuex npm i vuex@3</p>
<p>二、引入 Vue，引入 VueX，Vue.use(VueX)</p>
<p>三、在项目创建 store 文件夹，及 index.js<br>定义相关的 vuex 的 state，getters，actions，mutations，</p>
<p>并创建 vuex 实例：const sotre &#x3D; new Vue.Store({state，getters，actions，mutations})</p>
<p>四、在入口文件 main.js 中引入 store,并在根实例注册挂载</p>
<p>五、在任意组件中，通过 this.$store.state 就可以访问到共享数据</p>
<p>六、当通过组件要修改 store 中的数据时，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果该操作是同步的并且不需要共用，可以用<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>()来触发mutations, 只有mutations才可以直接更改state共享数据</span><br><span class="line"><span class="number">2.</span> mutations中只能有同步操作，不能有异步操作</span><br><span class="line"><span class="number">3.</span> 如果修改数据的操作是异步的，通过<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>()触发actions, actions中可以发起异步请求，获取数据后，再调用 commit触发mutations,通过mutations修改共享数据</span><br></pre></td></tr></table></figure>

<h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p>mapState<br>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品名称: &#123;&#123;goodName&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品价格: &#123;&#123;goodPrice&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品描述: &#123;&#123;goodDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品最新描述: &#123;&#123;goodNewDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入辅助函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// mapState: 映射状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">n</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 封装思路</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// function mapState(obj)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 需要取出对象的键值对</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// for(let key in obj)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return function [key]()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     return this.$store.state[obj[key]]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// mapState(&#123;name: &#x27;goodName&#x27;, price: &#x27;goodPrice&#x27;&#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 手写计算属性 + state</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// name() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// price() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodPrice</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// desc() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 生成计算属性 =&gt; 对象的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 传入的对象键为: 生成的计算属性名字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 传入的对象值为: 需要访问state中的哪个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ...mapState(&#123; name: &#x27;goodName&#x27;, price: &#x27;goodPrice&#x27;, desc: &#x27;goodDesc&#x27; &#125;),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// goodName() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// goodPrice() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodPrice</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// goodDesc() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.state.goodDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 当计算属性的名字和需要访问state的属性名字一样时 可以使用数组的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;goodName&#x27;</span>, <span class="string">&#x27;goodPrice&#x27;</span>, <span class="string">&#x27;goodDesc&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回值是一个对象  &#123;name:function&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> res = <span class="title function_">mapState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;goodName&#x27;</span> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>mapGetters</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品名称: &#123;&#123;goodName&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品价格: &#123;&#123;goodPrice&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品描述: &#123;&#123;goodDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品最新描述: &#123;&#123;goodNewDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入辅助函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// mapState: 映射状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">n</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 手写的计算属性 + getter</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// newDesc()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.getters.goodNewDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// newDesc()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.getters.goodNewDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// newDesc()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.getters.goodNewDesc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 利用辅助函数生成</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 对象写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ...mapGetters(&#123;newDesc: &#x27;goodNewDesc&#x27;&#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数组写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;goodNewDesc&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回值是一个对象  &#123;name:function&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> res = <span class="title function_">mapGetters</span>(&#123; <span class="attr">newDesc</span>: <span class="string">&#x27;goodNewDesc&#x27;</span> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>mapMutations</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品名称: &#123;&#123;goodName&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品价格: &#123;&#123;goodPrice&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品描述: &#123;&#123;goodDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      商品最新描述: &#123;&#123;goodNewDesc&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要涨价的金额&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;money&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;increase(money)&#x27;</span>&gt;</span>涨价<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;increaseDouble(money)&#x27;</span>&gt;</span>翻倍的涨价<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入辅助函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// mapState: 映射状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapGetters, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">money</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// increase()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   this.$store.commit(&#x27;INCREASE&#x27;, this.money)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 没有手动传参会将$event事件参数对象当作第二个参数传过去</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// increase(e)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   this.$store.commit(&#x27;INCREASE&#x27;, e)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 手动传参就使用我们的参数当作第二个参数传过去</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// increase(money)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   this.$store.commit(&#x27;INCREASE&#x27;, money)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 对象的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ...mapMutations(&#123; increase: &#x27;INCREASE&#x27; &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数组的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;increase&#x27;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;goodName&#x27;</span>, <span class="string">&#x27;goodPrice&#x27;</span>, <span class="string">&#x27;goodDesc&#x27;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;goodNewDesc&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 返回值是一个对象  &#123;name:function&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> res = <span class="title function_">mapState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;goodName&#x27;</span> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>mapActions</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// increaseDouble()&#123;</span></span><br><span class="line"><span class="comment">//   // 逻辑稍微复杂且需要共用 dispatch</span></span><br><span class="line"><span class="comment">//   this.$store.dispatch(&#x27;increaseDouble&#x27;, this.money)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// ...mapActions(&#123;increaseDouble: &#x27;increaseDouble&#x27;&#125;)</span></span><br><span class="line">...<span class="title function_">mapActions</span>([<span class="string">&#x27;increaseDouble&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>在 VUE 项目中，由于是单页应用，vuex 中的数据在页面刷新时就会被清除，所以我们要考虑怎样让 vuex 中的数据持久保存在浏览器中，至少不能每次刷新时都丢失登录状态，这篇文章介绍 VUE 项目中常用到的两种 vuex 持久化的方法，底层实现原理一直，方法不太一样，可以在项目中根据实际来区分<br>方法一、浏览器监听+本地存储<br>我们可以监听浏览器的刷新，在页面刷新时将 vuex 内的数据保存在本地存储中(根据项目需要可以考虑保存在 sessionStorage 或者 localStorage 中)<br>在 App.vue 中，created 生命周期写我们的监听方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeunload&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;store&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后在进入到 created 生命周期时，去到 sessionStorage&#x2F;localStorage 中的数据，将数据替换</p>
<p>到 vuex 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;store&quot;</span>)) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">replaceState</span>(</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>,</span><br><span class="line">      <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;store&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二、状态持久化插件<br>推荐使用 vuex-persistedstate 插件<br>使用方法如下<br>1、在项目中安装该插件 cnpm i –save vuex-persistedstate<br>2、在 src&#x2F;store&#x2F;index.js 中引入该插件 import createPersistedState from ‘vuex-persistedstate’<br>在 vuex 中使用 plugins: [createPersistedState()]<br>整体代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">createPersistedState</span>(&#123;</span><br><span class="line">    <span class="attr">storage</span>: <span class="variable language_">window</span>.<span class="property">sessionStorage</span>, <span class="comment">// 默认位置是 localStorage</span></span><br><span class="line">    <span class="attr">reducer</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 默认是全部缓存，在这里可以设置需要缓存的状态</span></span><br><span class="line">        ...state</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>vue学习</tag>
      </tags>
  </entry>
  <entry>
    <title>收集的一些比较实用的宝藏网站</title>
    <url>/posts/10/</url>
    <content><![CDATA[<h1 id="一、IT-类网站"><a href="#一、IT-类网站" class="headerlink" title="一、IT 类网站"></a>一、IT 类网站</h1><h2 id="0-博客收藏"><a href="#0-博客收藏" class="headerlink" title="0.博客收藏"></a>0.博客收藏</h2><ul>
<li>胡萝卜周 —— 分享一些好用的软件或者破解版软件。直通车：<a href="http://www.carrotchou.blog/">查看链接</a></li>
<li>博客园 —— 开发者的网上家园。直通车：<a href="https://www.cnblogs.com/">查看链接</a></li>
<li>大眼仔 —— 分享一些软件、教程资源。直通车：<a href="http://www.dayanzai.me/">查看链接</a></li>
</ul>
<h2 id="1-社区交流网站"><a href="#1-社区交流网站" class="headerlink" title="1.社区交流网站"></a>1.社区交流网站</h2><ul>
<li>吾爱破解网 —— 大佬聚集地，各种教程，菜鸟的飞升之路。直通车：<a href="https://www.52pojie.cn/">查看链接</a></li>
<li>瑞客论坛 —— 众多 IT 教程辅助工具破解资源分享论坛。直通车：<a href="https://www.ruike1.com/">查看链接</a></li>
<li>V2EX —— 一个关于分享和探索的地方。直通车：<a href="https://www.v2ex.com/">查看链接</a></li>
<li>掘金 —— 一个帮助开发者成长的社区。直通车：<a href="https://juejin.im/">查看链接</a></li>
<li>InfoQ —— 一个实践驱动的社区资讯站点，致力于促进软件开发领域知识与创新的传播。直通车：<a href="https://www.infoq.cn/">查看链接</a></li>
<li>开发者头条 —— 程序员分享平台。直通车：<a href="https://toutiao.io/posts/hot/7">查看链接</a></li>
<li>cocoachina —— 一站式开发者成长社区。直通车：<a href="http://www.cocoachina.com/">查看链接</a></li>
<li>推酷 —— IT 人专属个性阅读社区。直通车：<a href="https://www.tuicool.com/">查看链接</a></li>
</ul>
<h2 id="2-教程向网站"><a href="#2-教程向网站" class="headerlink" title="2.教程向网站"></a>2.教程向网站</h2><ul>
<li>Topbook —— 涉及 app、小程序、电脑软件以及各种教程。直通车：<a href="https://topbook.cc/">查看链接</a></li>
<li>实验楼 —— 帮助你撸代码，搭配有各种虚拟环境，包你满意。直通车：<a href="https://www.shiyanlou.com/">查看链接</a></li>
<li>我要自学网 —— 免费的各类视频教程网站。直通车：<a href="https://www.51zxw.net/">查看链接</a></li>
<li>W3school —— 全球最大的 web 技术教程网站。直通车：<a href="https://www.w3school.com.cn/">查看链接</a></li>
<li>W3cschool —— 随时随地学编程。直通车：<a href="https://www.w3cschool.cn/">查看链接</a></li>
<li>菜鸟教程 —— 有些教程比较旧了一些。直通车：<a href="https://www.runoob.com/">查看链接</a></li>
<li>Linux 命令大全(手册) —— 可以查询相关命令。直通车：<a href="https://www.linuxcool.com/">查看链接</a></li>
<li>破解 IDE 网站 —— 可以破解 Pychram、WebStrome 等（密码 4565）。直通车：<a href="http://vrg123.com/">查看链接</a></li>
</ul>
<h2 id="3-代码托管网站"><a href="#3-代码托管网站" class="headerlink" title="3.代码托管网站"></a>3.代码托管网站</h2><ul>
<li>Github。直通车：<a href="https://github.com/">查看链接</a></li>
<li>Gitee。直通车：<a href="https://gitee.com/">查看链接</a></li>
</ul>
<h2 id="4-操作系统重装-x2F-封装"><a href="#4-操作系统重装-x2F-封装" class="headerlink" title="4.操作系统重装&#x2F;封装"></a>4.操作系统重装&#x2F;封装</h2><p>MSDN——纯净操作系统下载网站。直通车：<a href="https://msdn.itellyou.cn/">查看链接</a></p>
<p><strong>系统库</strong>：</p>
<ul>
<li>介绍：MSDN 系统库 - 致力于原版 windows 生态服务</li>
<li>地址：<a href="https://www.xitongku.com/">查看链接</a></li>
</ul>
<p>TechBench——一个下载操作系统和微软 office 网站，可以直接浏览器满速下载。直通车：<a href="https://tb.rg-adguard.net/public.php?lang=zh-CN&extract">查看链接</a></p>
<ul>
<li><strong>注意：如果此网站下载时显示<code>Access Denied</code>，只要将下载链接中的 <code>.edgesuite.net/db/</code> 字段换成 <code>/pr/</code> 即可正常下载</strong></li>
</ul>
<p>IT 天空——详细系统封装教程网站。直通车：<a href="https://www.itsk.com/portal.php">查看链接</a></p>
<h2 id="5-VPS-产商网站"><a href="#5-VPS-产商网站" class="headerlink" title="5.VPS 产商网站"></a>5.VPS 产商网站</h2><ul>
<li>Vultr——比较实惠，多个国家的服务器应有尽有，首次注册充值$10 美元还可以获得$50 美元的折扣。直通车：<a href="https://www.vultr.com/?ref=8274420-4F">查看链接</a></li>
<li>Google Cloud —— 新用户注册即送 300 美金，可免费试用一年。直通车：<a href="https://cloud.google.com/">查看链接</a>关于谷歌云的注册方法，可以查看我的这篇文章 —— <a href="https://www.wrysmile.cn/V2Ray-01.html" title="[免费领取一年谷歌云]">[免费领取一年谷歌云]</a></li>
</ul>
<h2 id="6-云类网站"><a href="#6-云类网站" class="headerlink" title="6.云类网站"></a>6.云类网站</h2><ul>
<li>坚果云——可实现 PC、Android、ios 无缝同步，还可查看文件历史版本，唯一不足就是免费版每个月上传 1G，下载 3G。<a href="https://www.jianguoyun.com/">查看链接</a></li>
<li>蓝奏云——怎么说呢，相当于小型百度云，不限速，便于分享，就是不支持大文件。<a href="http://www.lanzou.com/">查看链接</a></li>
</ul>
<h2 id="7-开源网站"><a href="#7-开源网站" class="headerlink" title="7.开源网站"></a>7.开源网站</h2><ul>
<li>开源中国 —— 中文开源技术交流社区。<a href="https://www.oschina.net/">查看链接</a></li>
<li>深度开源 —— 开源项目、代码、文档、新闻的社区。<a href="https://www.open-open.com/">查看链接</a></li>
<li>HelloGitHub —— 分享 GitHub 上有趣、入门级的开源项目。<a href="https://hellogithub.com/">查看链接</a></li>
<li>开源镜像站 —— 清华大学开源软件镜像站。<a href="https://mirrors.tuna.tsinghua.edu.cn/">查看链接</a></li>
</ul>
<h2 id="8-博客搭建网站"><a href="#8-博客搭建网站" class="headerlink" title="8.博客搭建网站"></a>8.博客搭建网站</h2><ul>
<li>来必力——为博客添加评论功能。直通车：<a href="https://www.livere.com/">查看链接</a></li>
<li>DaoVoice——为博客添加在线联系功能。直通车：<a href="http://dashboard.daovoice.io/">查看链接</a></li>
<li>LeanCloud——为博客统计每篇文章的阅读量。<a href="https://leancloud.cn/dashboard/applist.html#/apps">查看链接</a></li>
</ul>
<h2 id="9-刷机类网站"><a href="#9-刷机类网站" class="headerlink" title="9.刷机类网站"></a>9.刷机类网站</h2><ul>
<li>Android 玩机伪段位认定 —— 滑稽网站，娱乐即可。<a href="https://bbs.letitfly.me/d/1029">查看链接</a></li>
</ul>
<h1 id="二、图像类网站"><a href="#二、图像类网站" class="headerlink" title="二、图像类网站"></a>二、图像类网站</h1><h2 id="1-图床网站"><a href="#1-图床网站" class="headerlink" title="1.图床网站"></a>1.图床网站</h2><ul>
<li><a href="http://sm.ms/">SM.MS</a>。<a href="https://sm.ms/">查看链接</a></li>
<li>路过图床。<a href="https://imgchr.com/wrysmile">查看链接</a></li>
<li>ImageHub。<a href="https://www.imagehub.cc/">查看链接</a></li>
<li>聚合图床。<a href="https://www.superbed.cn/">查看链接</a></li>
<li>ImgUrl。<a href="https://imgurl.org/">查看链接</a></li>
<li>遇见图床。<a href="https://www.hualigs.cn/">查看链接</a></li>
<li><a href="http://vgy.me/">vgy.me</a>。<a href="https://vgy.me/">查看链接</a></li>
</ul>
<h2 id="2-图片放大、压缩网站"><a href="#2-图片放大、压缩网站" class="headerlink" title="2.图片放大、压缩网站"></a>2.图片放大、压缩网站</h2><ul>
<li><strong>Bigjpg</strong> —— AI 人工智能图片放大。<a href="http://bigjpg.com/">查看链接</a></li>
<li><strong>waifu2x</strong> —— 使用卷积神经网络对动漫风格的图片进行放大操作。<a href="http://waifu2x.udp.jp/">查看链接</a></li>
<li><strong>TinyPNG</strong> —— 使用智能有损压缩技术进行压缩图片。<a href="https://tinypng.com/">查看链接</a></li>
</ul>
<h2 id="3-图标素材网站"><a href="#3-图标素材网站" class="headerlink" title="3.图标素材网站"></a>3.图标素材网站</h2><ul>
<li><strong>iconfont</strong> —— 阿里云官方的字体图标库，可以添加到项目中直接获取该项目的 css 样式。<a href="https://www.iconfont.cn/">查看链接</a></li>
<li><strong>iconninja</strong> —— 国外免费图标素材下载，支持 png、svg、ico 格式下载。<a href="http://www.iconninja.com/">查看链接</a></li>
<li><strong>ICONS</strong> —— 国外图标下载，免费图标也不少，支持 png、svg、eps、pdf 格式下载。<a href="https://icons8.cn/icons">查看链接</a></li>
<li><strong>easyicon</strong> —— 国内图标下载，支持 png、ico、icns 格式下载。<a href="https://www.easyicon.net/">查看链接</a></li>
<li><strong>WORLDVECTORLOGO</strong> —— 可以免费下载来自世界各地大小公司的 LOGO。<a href="https://worldvectorlogo.com/">查看链接</a></li>
<li><strong>SEEKLOGO</strong> —— 提供了更为详细的信息。<a href="https://seeklogo.com/">查看链接</a></li>
<li><strong>软件</strong> —— 直接提取原有程序的图标。<a href="https://www.lanzous.com/i3a8d7g">查看链接</a></li>
</ul>
<h2 id="4-渐变色配色网站"><a href="#4-渐变色配色网站" class="headerlink" title="4.渐变色配色网站"></a>4.渐变色配色网站</h2><ul>
<li>CoolHue——首页中含有 60 种渐变色背景，支持 css 代码、图片下载。直通车：<a href="https://webkul.github.io/coolhue/">查看链接</a></li>
<li>Uigradients——比较简单的配色网站，支持 css 代码、图片下载。直通车：<a href="https://uigradients.com/">查看链接</a></li>
<li>Webgradients——大概拥有 180 种渐变配色，支持 css 代码、图片下载。直通车：<a href="https://webgradients.com/">查看链接</a></li>
<li>Gradients of Shapefactory——整个网站的功能之一，支持 css 代码、图片下载。直通车：<a href="https://gradient.shapefactory.co/">查看链接</a></li>
</ul>
<h2 id="5-平面设计网站"><a href="#5-平面设计网站" class="headerlink" title="5.平面设计网站"></a>5.平面设计网站</h2><ul>
<li>创客贴。直通车：<a href="https://www.chuangkit.com/">查看链接</a></li>
</ul>
<h2 id="6-RGB-颜色查询网站"><a href="#6-RGB-颜色查询网站" class="headerlink" title="6.RGB 颜色查询网站"></a>6.RGB 颜色查询网站</h2><ul>
<li><a href="http://www.sioe.cn/">www.sioe.cn</a> 应用工具 —— 颜色种类较少，但支持 RGB 值与 16 进制颜色码转换。<a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">查看链接</a></li>
<li>在线工具 —— 颜色种类较多，支持直接取色查询。<a href="http://tool.oschina.net/commons?type=3">查看链接</a></li>
<li>RGB 颜色查询对照表 —— 颜色种类较多。<a href="https://www.114la.com/other/rgb.htm">查看链接</a></li>
</ul>
<h2 id="7-人工智能网站"><a href="#7-人工智能网站" class="headerlink" title="7.人工智能网站"></a>7.人工智能网站</h2><ul>
<li>抠图网站 —— 便捷、无需安装、抠图快、人物抠图效果十分惊艳。<a href="http://remove.bg/">查看链接</a></li>
<li>Facepixelizer —— 一款专门给照片中人脸区域打马赛克的工具。<a href="https://www.facepixelizer.com/">查看链接</a></li>
<li>一个在线 PS 工具，可以随时随地编辑图片，可以免去安装 PS 长时间的等待。<a href="https://www.wrysmile.cn/uupoop.com/">查看链接</a></li>
<li>稿定设计在线 PS —— 在线 PS 工具。<a href="https://ps.gaoding.com/#/">查看链接</a></li>
</ul>
<h2 id="8-设计类网站"><a href="#8-设计类网站" class="headerlink" title="8.设计类网站"></a>8.设计类网站</h2><ul>
<li>Dribbble —— 一个面向创作家、艺术工作者、设计师等创意类作品的人群，提供作品在线服务，供网友在线查看已经完成的作品或者正在创作的作品的交流网站。直通车：<a href="https://dribbble.com/">查看链接</a></li>
</ul>
<h2 id="9-壁纸网站"><a href="#9-壁纸网站" class="headerlink" title="9.壁纸网站"></a>9.壁纸网站</h2><ul>
<li>彼岸图网 4K 动漫壁纸 —— <a href="http://pic.netbian.com/4kdongman/">查看链接</a></li>
<li>二次元壁纸 —— <a href="https://bz.zzzmh.cn/?from=groupmessage#anime">查看链接</a></li>
<li>WinDynamicDesktop —— 一款仿 Mac 的动态壁纸软件，会根据日落日出自动更改。官网：<a href="https://www.microsoft.com/en-us/p/windynamicdesktop/9nm8n7dq3z5f?activetab=pivot:overviewtab">链接</a></li>
</ul>
<h1 id="三、影音类网站"><a href="#三、影音类网站" class="headerlink" title="三、影音类网站"></a>三、影音类网站</h1><h2 id="1-视频解析下载"><a href="#1-视频解析下载" class="headerlink" title="1.视频解析下载"></a>1.视频解析下载</h2><ul>
<li>唧唧 —— 用来下载 B 站视频。<a href="https://www.jijidown.com/">查看链接</a></li>
<li>urlgot —— 可以解析下载油管&#x2F;B 站&#x2F;腾讯&#x2F;优酷&#x2F;爱奇艺等视频的在线网站。<a href="https://www.haobang.fun/">查看链接</a></li>
</ul>
<h2 id="2-动效制作平台——犸良"><a href="#2-动效制作平台——犸良" class="headerlink" title="2.动效制作平台——犸良"></a>2.动效制作平台——犸良</h2><ul>
<li>阿里出品的一个动效制作工具，通过网站提供的模板，可以让零基础的同学一键做出炫酷的动效。<a href="https://design.alipay.com/emotion/">查看链接</a></li>
</ul>
<h2 id="3-在线音乐平台"><a href="#3-在线音乐平台" class="headerlink" title="3.在线音乐平台"></a>3.在线音乐平台</h2><ul>
<li>刘明野的音乐盒 —— 专注于无损音乐的解析和下载，支持在线播放，支持搜索歌曲，曲库量整合网易、QQ、咪咕等平台。<a href="http://tool.liumingye.cn/music/">查看链接</a></li>
</ul>
<h2 id="4-人工智能网站"><a href="#4-人工智能网站" class="headerlink" title="4.人工智能网站"></a>4.人工智能网站</h2><ul>
<li>视频一键去背景 —— 可以智能识别视频中的主体，然后去除背景。<a href="https://www.unscreen.com/">查看链接</a></li>
</ul>
<h1 id="四、工具类网站"><a href="#四、工具类网站" class="headerlink" title="四、工具类网站"></a>四、工具类网站</h1><h2 id="0-格式转换工具"><a href="#0-格式转换工具" class="headerlink" title="0.格式转换工具"></a>0.格式转换工具</h2><ul>
<li>目前全网最全的格式转换工具，支持约 200 多种格式的文件转换。更为难得的是，这些工具是完全免费的。<a href="http://www.alltoall.net/">查看链接</a></li>
<li>文件转换器 —— 支持超过 300 种格式。<a href="https://convertio.co/zh/">查看链接</a></li>
<li>Office-converter —— 多种格式转换，支持手机、平板和电脑。<a href="https://cn.office-converter.com/">查看链接</a></li>
<li>Smallpdf —— 一体式在线 PDF 工具。直通车：<a href="https://smallpdf.com/">查看链接</a></li>
<li>ilovepdf —— PDF 爱好者的在线工具。直通车：<a href="https://www.ilovepdf.com/zh_cn">查看链接</a></li>
<li>PDF24 Tools —— 专注于 PDF 文档处理的在线工具。<a href="https://tools.pdf24.org/zh/">查看链接</a></li>
</ul>
<h2 id="1-云端在线网站"><a href="#1-云端在线网站" class="headerlink" title="1.云端在线网站"></a>1.云端在线网站</h2><ul>
<li>GitMind —— 一个免费在线思维导图软件。<a href="https://gitmind.cn/">查看链接</a></li>
<li>百度脑图。没有任何的广告，可以免费使用所有功能，并且支持导出多种格式的思维导图。<a href="https://naotu.baidu.com/">查看链接</a></li>
<li><del>吾爱大佬所写，可以在线查看腾讯和 360 的软件商店，可在线下载。直通车：<a href="http://soft.tinybad.cn/">查看链接</a></del>（目前网站已失效）</li>
<li>NICETOOL —— 在线工具大全。直通车：<a href="http://www.nicetool.net/">查看链接</a></li>
</ul>
<h2 id="2-浏览器插件网站"><a href="#2-浏览器插件网站" class="headerlink" title="2.浏览器插件网站"></a>2.浏览器插件网站</h2><ul>
<li>Chrome 插件网 —— 谷歌浏览器插件网站。<a href="https://chromecj.com/">查看链接</a></li>
<li>万能命令 —— 一个在线工具快捷跳转平台，将各种高质量的在线工具按应用站点聚合起来，可以让你方便快捷的找到合适的工具。<a href="https://wanneng.run/cn/">查看链接</a></li>
<li>Web 前端助手 —— 字符串编解码、图片 base64 编码、代码压缩、美化、JSON 格式化、正则表达式、时间转换工具、二维码生成器、编码规范检测、页面性能检测、栅格检测、JS 运行效率分析。<a href="https://github.com/zxlie/FeHelper">查看链接</a></li>
</ul>
<h2 id="3-正版中国"><a href="#3-正版中国" class="headerlink" title="3.正版中国"></a>3.正版中国</h2><ul>
<li>一个分享正版软件限时免费信息的网站。直通车：<a href="https://getitfree.cn/">查看链接</a></li>
</ul>
<h2 id="4-电脑插件网站"><a href="#4-电脑插件网站" class="headerlink" title="4.电脑插件网站"></a>4.电脑插件网站</h2><ul>
<li>Snipaste —— 一个集截图与贴图功能于一身的插件。官网：<a href="https://zh.snipaste.com/">链接</a></li>
<li>Everything —— 可以很快速全盘搜索文件。官网：<a href="https://www.voidtools.com/zh-cn/">链接</a></li>
<li>Quicker —— 强大的快捷操作指令。官网：<a href="https://www.getquicker.net/">链接</a></li>
<li>Listary —— 可以很快搜索指定文件与软件。官网：<a href="https://www.listary.com/">链接</a></li>
<li>Wox —— 与 Listary 类似，这个更新较为勤快。官网：<a href="http://www.wox.one/">链接</a></li>
<li>PowerToys —— 微软自家的小工具，现已更新中文。官网：<a href="https://github.com/microsoft/PowerToys">链接</a></li>
<li>uTools —— 一个极简、插件化、跨平台的现代桌面软件。官网：<a href="https://www.u.tools/">链接</a></li>
<li>MacType —— Windows 字体美化软件，可以像 mac 一样，作者停止维护。官网：<a href="https://github.com/snowie2000/MacType">链接</a></li>
<li>ContextMenuManager —— 右键管理工具，功能在逐渐完善中。官网：<a href="https://github.com/BluePointLilac/ContextMenuManager">链接</a></li>
</ul>
<h2 id="5-开发工具"><a href="#5-开发工具" class="headerlink" title="5.开发工具"></a>5.开发工具</h2><p><a href="https://cubic-bezier.com/#.17,.67,.83,.67"><strong>cubic-bezier</strong></a>：调节贝塞尔曲线，来展示不同的前端展示动画</p>
<p><a href="https://www.fastmock.site/#/"><strong>Fast Mock</strong></a>：自定义接口来 Mock 数据</p>
<h2 id="6-浏览器历史版本"><a href="#6-浏览器历史版本" class="headerlink" title="6.浏览器历史版本"></a>6.浏览器历史版本</h2><p><strong>谷歌浏览器历史版本下载</strong>：<a href="https://www.chromedownloads.net/chrome64win/">这里</a></p>
<h1 id="五、学习类网站"><a href="#五、学习类网站" class="headerlink" title="五、学习类网站"></a>五、学习类网站</h1><h2 id="1-学术文献资料推荐网站"><a href="#1-学术文献资料推荐网站" class="headerlink" title="1.学术文献资料推荐网站"></a>1.学术文献资料推荐网站</h2><blockquote>
<p>转自 topbook，原文链接：<a href="https://mp.weixin.qq.com/s/MtTKx3hv2mh1munhEucD_g">查看</a></p>
</blockquote>
<ul>
<li>国家哲学社会科学文献中心——提供免费下载，提供各类哲学社会科学文献。</li>
<li>中国国家数字图书馆——中国国家图书馆的在线网站。</li>
<li>德国 Springer-Verlag——是世界著名科技出版集团，日前在国内开通了 SpringerLink 服务。</li>
<li>国家数据——可搜索某个省 10 年内的 GDP 或城镇化的数据。</li>
<li>术语在线——含有各个领域论文的术语检索要求。</li>
<li>浙江图书馆——办理借阅证后可免费下载知网、万方的文献资料。方法请移步<a href="https://mp.weixin.qq.com/s/FqA8o_AEKGN3mO6VgiKmrA">这里</a>。</li>
<li>Idata ——</li>
</ul>
<h2 id="2-打字练习网站"><a href="#2-打字练习网站" class="headerlink" title="2.打字练习网站"></a>2.打字练习网站</h2><ul>
<li>TypingClud——国外打字练习网站，关卡众多，并附有视频教学以及小游戏。直通车：<a href="https://www.typingclub.com/">查看链接</a></li>
</ul>
<h2 id="3-电子书下载网站"><a href="#3-电子书下载网站" class="headerlink" title="3.电子书下载网站"></a>3.电子书下载网站</h2><ul>
<li>鸠摩搜书 —— 一个电子书搜索引擎，整合网上所有可以搜索的资源。直通车：<a href="https://www.jiumodiary.com/">查看链接</a></li>
<li>伴读 —— 电子书下载网站，出版的书籍基本上都有，新书热门书籍较少。直通车：<a href="https://www.bandubook.com/">查看链接</a></li>
<li>脚本之家 —— 计算机类的电子书下载网站。直通车：<a href="https://www.jb51.net/books/">查看链接</a></li>
<li>码农之家 —— 计算机电子书下载网。直通车：<a href="https://www.xz577.com/">查看链接</a></li>
<li>Z-Library —— 英文书下载网站。直通车：<a href="https://b-ok.org/">查看链接</a></li>
<li>亚马逊电子书 —— 可下载免费电子书在相应设备上观看。官网：<a href="https://www.amazon.cn/Kindle%E5%85%8D%E8%B4%B9%E7%94%B5%E5%AD%90%E4%B9%A6/b?ie=UTF8&node=116175071&ref_=sa_menu_kindle_l3_b116175071">链接</a></li>
<li>图灵社区 —— 计算机类的电子书下载网站。官网：<a href="https://www.ituring.com.cn/">链接</a></li>
<li>书格 —— 古籍书籍下载网站。官网：<a href="https://new.shuge.org/">链接</a></li>
</ul>
<h1 id="六、简历类网站"><a href="#六、简历类网站" class="headerlink" title="六、简历类网站"></a>六、简历类网站</h1><ul>
<li><strong>ikono</strong> —— 一个免费简历模板网站，收录了很多人的简历模板，同时提供源文件给我们下载，包含 PSD 格式、AI 格式、SKETCH 格式，是不是很棒棒，对于着急找工作的我们直接可以下载使用，减少没必要浪费的时间！<a href="http://ikono.me/">查看链接</a></li>
<li><strong>SR</strong> —— 这是一个比较便捷的简历制作网站，便捷在哪里呢？他只需要你输入相关信息就可以弹出简洁精美大气的简历页面。<a href="https://standardresume.co/">查看链接</a></li>
<li><strong>freesumes</strong> —— 这个网站拥有上百个精美个人简历模板，满足你的多方面求职需求。<a href="https://www.freesumes.com/">查看链接</a></li>
<li><strong>Semplice</strong> —— 一个帮助设计师建立精美出色响应式个人作品集的网站，提供了简单的工具协助你制作出精美独特个人网站！<a href="https://www.semplice.com/">查看链接</a></li>
<li><strong>Behance</strong> —— 这个网站上面除了涵盖全球优秀设计作品以外，同时也包含大量精美的模板简历可供下载。<a href="https://www.behance.net/">查看链接</a></li>
<li><strong>Office Plus</strong> —— 微软官方文档模板网站，其中就提供了简历模板。<a href="http://www.officeplus.cn/Template/Home.shtml">查看链接</a></li>
<li><strong>创客贴</strong> —— 提供<strong>简历模板</strong>和<strong>在线编辑</strong>，一站式解决简历问题，部分简历模板收费。<a href="https://www.chuangkit.com/">查看链接</a></li>
<li><strong>五百丁</strong> —— 专业的简历在线制作工具，模板超多、类型很全、质量也挺高。属于付费产品，一个月 12.9 元办个基础会员能够满足一段时间的求职需要。<a href="https://www.500d.me/">查看链接</a></li>
<li><strong>站长素材</strong> —— 免费模板较多且质量较好。<a href="https://sc.chinaz.com/jianli/">查看链接</a></li>
<li><strong>592 职业圈</strong> —— 整个网站都是免费可下载的，为 word 格式。<a href="https://www.job592.com/doc/">查看链接</a></li>
<li><strong>智联招聘</strong> —— 数量少但质量高，简单把网站的个人资料填写好即可进行下载。<a href="https://landing.zhaopin.com/resume-templates?source=article">查看链接</a></li>
</ul>
<h1 id="七、求职类网站"><a href="#七、求职类网站" class="headerlink" title="七、求职类网站"></a>七、求职类网站</h1><ul>
<li>九章算法：<a href="https://www.jiuzhang.com/">查看链接</a></li>
<li>领扣：<a href="https://www.lintcode.com/problem/">查看链接</a></li>
<li>careercup：<a href="https://careercup.com/">查看链接</a></li>
<li>BoSS 直聘：<a href="https://www.zhipin.com/">查看链接</a></li>
<li>拉勾网：<a href="https://www.lagou.com/">查看链接</a></li>
<li>猎聘网：<a href="https://www.liepin.com/zhaopin/">查看链接</a></li>
<li>前程无忧：<a href="https://www.51job.com/">查看链接</a></li>
<li>智联招聘：<a href="https://www.zhaopin.com/">查看链接</a></li>
<li>58 同城：<a href="https://dt.58.com/">查看链接</a></li>
<li>dajie 大街：<a href="https://s.dajie.com/">查看链接</a></li>
<li>应届生求职网：<a href="http://www.yingjiesheng.com/">查看链接</a></li>
<li>中华英才网：<a href="http://www.chinahr.com/home/dt/">查看链接</a></li>
<li>百姓网：<a href="https://datong.baixing.com/">查看链接</a></li>
</ul>
<h1 id="八、导航类网站"><a href="#八、导航类网站" class="headerlink" title="八、导航类网站"></a>八、导航类网站</h1><blockquote>
<p>这里收录了一些别人比较好的导航网站</p>
</blockquote>
<h2 id="1-IT-类导航"><a href="#1-IT-类导航" class="headerlink" title="1.IT 类导航"></a>1.IT 类导航</h2><ul>
<li>三颗豆子：<a href="http://www.bewindoweb.com/dwg.php">链接</a></li>
<li>实用导航（可以代下载 CSDN 和 PUDN 资源）：<a href="https://goshare.site/resource/">链接</a></li>
</ul>
<h2 id="2-设计类导航"><a href="#2-设计类导航" class="headerlink" title="2.设计类导航"></a>2.设计类导航</h2><ul>
<li>奇迹秀工具箱：<a href="http://www.qijishow.com/down/index.html">链接</a></li>
</ul>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>宝藏网站</tag>
      </tags>
  </entry>
</search>
